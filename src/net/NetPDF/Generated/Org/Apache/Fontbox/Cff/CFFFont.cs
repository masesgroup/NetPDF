/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using fontbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Cff
{
    #region CFFFont declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html"/>
    /// </summary>
    public partial class CFFFont : Org.Apache.Fontbox.FontBoxFont
    {
        const string _bridgeClassName = "org.apache.fontbox.cff.CFFFont";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("CFFFont class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CFFFont() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("CFFFont class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CFFFont(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region CFFFont implementation
    public partial class CFFFont
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getCharset--"/> 
        /// </summary>
        public Org.Apache.Fontbox.Cff.CFFCharset Charset
        {
            get { return IExecuteWithSignature<Org.Apache.Fontbox.Cff.CFFCharset>("getCharset", "()Lorg/apache/fontbox/cff/CFFCharset;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getCharStringBytes--"/> 
        /// </summary>
        public Java.Util.List<byte[]> CharStringBytes
        {
            get { return IExecuteWithSignature<Java.Util.List<byte[]>>("getCharStringBytes", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getData--"/> 
        /// </summary>
        public byte[] Data
        {
            get { return IExecuteWithSignatureArray<byte>("getData", "()[B"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getFontBBox--"/> 
        /// </summary>
        public Org.Apache.Fontbox.Util.BoundingBox FontBBox
        {
            get { return IExecuteWithSignature<Org.Apache.Fontbox.Util.BoundingBox>("getFontBBox", "()Lorg/apache/fontbox/util/BoundingBox;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getFontMatrix--"/> 
        /// </summary>
        public Java.Util.List<Java.Lang.Number> FontMatrix
        {
            get { return IExecuteWithSignature<Java.Util.List<Java.Lang.Number>>("getFontMatrix", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getGlobalSubrIndex--"/> 
        /// </summary>
        public Java.Util.List<byte[]> GlobalSubrIndex
        {
            get { return IExecuteWithSignature<Java.Util.List<byte[]>>("getGlobalSubrIndex", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getName--"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getNumCharStrings--"/> 
        /// </summary>
        public int NumCharStrings
        {
            get { return IExecuteWithSignature<int>("getNumCharStrings", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getTopDict--"/> 
        /// </summary>
        public Java.Util.Map<Java.Lang.String, object> TopDict
        {
            get { return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, object>>("getTopDict", "()Ljava/util/Map;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#getType2CharString-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Fontbox.Cff.Type2CharString"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Fontbox.Cff.Type2CharString GetType2CharString(int arg0)
        {
            return IExecuteWithSignature<Org.Apache.Fontbox.Cff.Type2CharString>("getType2CharString", "(I)Lorg/apache/fontbox/cff/Type2CharString;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/cff/CFFFont.html#addValueToTopDict-java.lang.String-java.lang.Object-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public void AddValueToTopDict(Java.Lang.String arg0, object arg1)
        {
            IExecuteWithSignature("addValueToTopDict", "(Ljava/lang/String;Ljava/lang/Object;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}