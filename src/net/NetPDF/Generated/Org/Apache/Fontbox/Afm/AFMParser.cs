/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using fontbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Afm
{
    #region AFMParser declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html"/>
    /// </summary>
    public partial class AFMParser : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AFMParser>
    {
        const string _bridgeClassName = "org.apache.fontbox.afm.AFMParser";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AFMParser() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AFMParser(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region AFMParser implementation
    public partial class AFMParser
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#org.apache.fontbox.afm.AFMParser(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        public AFMParser(Java.Io.InputStream arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#ASCENDER"/>
        /// </summary>
        public static Java.Lang.String ASCENDER { get { if (!_ASCENDERReady) { _ASCENDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ASCENDER"); _ASCENDERReady = true; } return _ASCENDERContent; } }
        private static Java.Lang.String _ASCENDERContent = default;
        private static bool _ASCENDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CAP_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String CAP_HEIGHT { get { if (!_CAP_HEIGHTReady) { _CAP_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAP_HEIGHT"); _CAP_HEIGHTReady = true; } return _CAP_HEIGHTContent; } }
        private static Java.Lang.String _CAP_HEIGHTContent = default;
        private static bool _CAP_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CC"/>
        /// </summary>
        public static Java.Lang.String CC { get { if (!_CCReady) { _CCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CC"); _CCReady = true; } return _CCContent; } }
        private static Java.Lang.String _CCContent = default;
        private static bool _CCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHAR_WIDTH"/>
        /// </summary>
        public static Java.Lang.String CHAR_WIDTH { get { if (!_CHAR_WIDTHReady) { _CHAR_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHAR_WIDTH"); _CHAR_WIDTHReady = true; } return _CHAR_WIDTHContent; } }
        private static Java.Lang.String _CHAR_WIDTHContent = default;
        private static bool _CHAR_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARACTER_SET"/>
        /// </summary>
        public static Java.Lang.String CHARACTER_SET { get { if (!_CHARACTER_SETReady) { _CHARACTER_SETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARACTER_SET"); _CHARACTER_SETReady = true; } return _CHARACTER_SETContent; } }
        private static Java.Lang.String _CHARACTER_SETContent = default;
        private static bool _CHARACTER_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARACTERS"/>
        /// </summary>
        public static Java.Lang.String CHARACTERS { get { if (!_CHARACTERSReady) { _CHARACTERSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARACTERS"); _CHARACTERSReady = true; } return _CHARACTERSContent; } }
        private static Java.Lang.String _CHARACTERSContent = default;
        private static bool _CHARACTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_B"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_B { get { if (!_CHARMETRICS_BReady) { _CHARMETRICS_BContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_B"); _CHARMETRICS_BReady = true; } return _CHARMETRICS_BContent; } }
        private static Java.Lang.String _CHARMETRICS_BContent = default;
        private static bool _CHARMETRICS_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_C"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_C { get { if (!_CHARMETRICS_CReady) { _CHARMETRICS_CContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_C"); _CHARMETRICS_CReady = true; } return _CHARMETRICS_CContent; } }
        private static Java.Lang.String _CHARMETRICS_CContent = default;
        private static bool _CHARMETRICS_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_CH"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_CH { get { if (!_CHARMETRICS_CHReady) { _CHARMETRICS_CHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_CH"); _CHARMETRICS_CHReady = true; } return _CHARMETRICS_CHContent; } }
        private static Java.Lang.String _CHARMETRICS_CHContent = default;
        private static bool _CHARMETRICS_CHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_L"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_L { get { if (!_CHARMETRICS_LReady) { _CHARMETRICS_LContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_L"); _CHARMETRICS_LReady = true; } return _CHARMETRICS_LContent; } }
        private static Java.Lang.String _CHARMETRICS_LContent = default;
        private static bool _CHARMETRICS_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_N"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_N { get { if (!_CHARMETRICS_NReady) { _CHARMETRICS_NContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_N"); _CHARMETRICS_NReady = true; } return _CHARMETRICS_NContent; } }
        private static Java.Lang.String _CHARMETRICS_NContent = default;
        private static bool _CHARMETRICS_NReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_VV"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_VV { get { if (!_CHARMETRICS_VVReady) { _CHARMETRICS_VVContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_VV"); _CHARMETRICS_VVReady = true; } return _CHARMETRICS_VVContent; } }
        private static Java.Lang.String _CHARMETRICS_VVContent = default;
        private static bool _CHARMETRICS_VVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W { get { if (!_CHARMETRICS_WReady) { _CHARMETRICS_WContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W"); _CHARMETRICS_WReady = true; } return _CHARMETRICS_WContent; } }
        private static Java.Lang.String _CHARMETRICS_WContent = default;
        private static bool _CHARMETRICS_WReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W0"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W0 { get { if (!_CHARMETRICS_W0Ready) { _CHARMETRICS_W0Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W0"); _CHARMETRICS_W0Ready = true; } return _CHARMETRICS_W0Content; } }
        private static Java.Lang.String _CHARMETRICS_W0Content = default;
        private static bool _CHARMETRICS_W0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W0X"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W0X { get { if (!_CHARMETRICS_W0XReady) { _CHARMETRICS_W0XContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W0X"); _CHARMETRICS_W0XReady = true; } return _CHARMETRICS_W0XContent; } }
        private static Java.Lang.String _CHARMETRICS_W0XContent = default;
        private static bool _CHARMETRICS_W0XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W0Y"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W0Y { get { if (!_CHARMETRICS_W0YReady) { _CHARMETRICS_W0YContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W0Y"); _CHARMETRICS_W0YReady = true; } return _CHARMETRICS_W0YContent; } }
        private static Java.Lang.String _CHARMETRICS_W0YContent = default;
        private static bool _CHARMETRICS_W0YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W1"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W1 { get { if (!_CHARMETRICS_W1Ready) { _CHARMETRICS_W1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W1"); _CHARMETRICS_W1Ready = true; } return _CHARMETRICS_W1Content; } }
        private static Java.Lang.String _CHARMETRICS_W1Content = default;
        private static bool _CHARMETRICS_W1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W1X"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W1X { get { if (!_CHARMETRICS_W1XReady) { _CHARMETRICS_W1XContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W1X"); _CHARMETRICS_W1XReady = true; } return _CHARMETRICS_W1XContent; } }
        private static Java.Lang.String _CHARMETRICS_W1XContent = default;
        private static bool _CHARMETRICS_W1XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_W1Y"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_W1Y { get { if (!_CHARMETRICS_W1YReady) { _CHARMETRICS_W1YContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_W1Y"); _CHARMETRICS_W1YReady = true; } return _CHARMETRICS_W1YContent; } }
        private static Java.Lang.String _CHARMETRICS_W1YContent = default;
        private static bool _CHARMETRICS_W1YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_WX"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_WX { get { if (!_CHARMETRICS_WXReady) { _CHARMETRICS_WXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_WX"); _CHARMETRICS_WXReady = true; } return _CHARMETRICS_WXContent; } }
        private static Java.Lang.String _CHARMETRICS_WXContent = default;
        private static bool _CHARMETRICS_WXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#CHARMETRICS_WY"/>
        /// </summary>
        public static Java.Lang.String CHARMETRICS_WY { get { if (!_CHARMETRICS_WYReady) { _CHARMETRICS_WYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHARMETRICS_WY"); _CHARMETRICS_WYReady = true; } return _CHARMETRICS_WYContent; } }
        private static Java.Lang.String _CHARMETRICS_WYContent = default;
        private static bool _CHARMETRICS_WYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#COMMENT"/>
        /// </summary>
        public static Java.Lang.String COMMENT { get { if (!_COMMENTReady) { _COMMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMMENT"); _COMMENTReady = true; } return _COMMENTContent; } }
        private static Java.Lang.String _COMMENTContent = default;
        private static bool _COMMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#DESCENDER"/>
        /// </summary>
        public static Java.Lang.String DESCENDER { get { if (!_DESCENDERReady) { _DESCENDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DESCENDER"); _DESCENDERReady = true; } return _DESCENDERContent; } }
        private static Java.Lang.String _DESCENDERContent = default;
        private static bool _DESCENDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#ENCODING_SCHEME"/>
        /// </summary>
        public static Java.Lang.String ENCODING_SCHEME { get { if (!_ENCODING_SCHEMEReady) { _ENCODING_SCHEMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCODING_SCHEME"); _ENCODING_SCHEMEReady = true; } return _ENCODING_SCHEMEContent; } }
        private static Java.Lang.String _ENCODING_SCHEMEContent = default;
        private static bool _ENCODING_SCHEMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_CHAR_METRICS"/>
        /// </summary>
        public static Java.Lang.String END_CHAR_METRICS { get { if (!_END_CHAR_METRICSReady) { _END_CHAR_METRICSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_CHAR_METRICS"); _END_CHAR_METRICSReady = true; } return _END_CHAR_METRICSContent; } }
        private static Java.Lang.String _END_CHAR_METRICSContent = default;
        private static bool _END_CHAR_METRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_COMPOSITES"/>
        /// </summary>
        public static Java.Lang.String END_COMPOSITES { get { if (!_END_COMPOSITESReady) { _END_COMPOSITESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_COMPOSITES"); _END_COMPOSITESReady = true; } return _END_COMPOSITESContent; } }
        private static Java.Lang.String _END_COMPOSITESContent = default;
        private static bool _END_COMPOSITESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_FONT_METRICS"/>
        /// </summary>
        public static Java.Lang.String END_FONT_METRICS { get { if (!_END_FONT_METRICSReady) { _END_FONT_METRICSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_FONT_METRICS"); _END_FONT_METRICSReady = true; } return _END_FONT_METRICSContent; } }
        private static Java.Lang.String _END_FONT_METRICSContent = default;
        private static bool _END_FONT_METRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_KERN_DATA"/>
        /// </summary>
        public static Java.Lang.String END_KERN_DATA { get { if (!_END_KERN_DATAReady) { _END_KERN_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_KERN_DATA"); _END_KERN_DATAReady = true; } return _END_KERN_DATAContent; } }
        private static Java.Lang.String _END_KERN_DATAContent = default;
        private static bool _END_KERN_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_KERN_PAIRS"/>
        /// </summary>
        public static Java.Lang.String END_KERN_PAIRS { get { if (!_END_KERN_PAIRSReady) { _END_KERN_PAIRSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_KERN_PAIRS"); _END_KERN_PAIRSReady = true; } return _END_KERN_PAIRSContent; } }
        private static Java.Lang.String _END_KERN_PAIRSContent = default;
        private static bool _END_KERN_PAIRSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#END_TRACK_KERN"/>
        /// </summary>
        public static Java.Lang.String END_TRACK_KERN { get { if (!_END_TRACK_KERNReady) { _END_TRACK_KERNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_TRACK_KERN"); _END_TRACK_KERNReady = true; } return _END_TRACK_KERNContent; } }
        private static Java.Lang.String _END_TRACK_KERNContent = default;
        private static bool _END_TRACK_KERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#ESC_CHAR"/>
        /// </summary>
        public static Java.Lang.String ESC_CHAR { get { if (!_ESC_CHARReady) { _ESC_CHARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ESC_CHAR"); _ESC_CHARReady = true; } return _ESC_CHARContent; } }
        private static Java.Lang.String _ESC_CHARContent = default;
        private static bool _ESC_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#FAMILY_NAME"/>
        /// </summary>
        public static Java.Lang.String FAMILY_NAME { get { if (!_FAMILY_NAMEReady) { _FAMILY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FAMILY_NAME"); _FAMILY_NAMEReady = true; } return _FAMILY_NAMEContent; } }
        private static Java.Lang.String _FAMILY_NAMEContent = default;
        private static bool _FAMILY_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#FONT_BBOX"/>
        /// </summary>
        public static Java.Lang.String FONT_BBOX { get { if (!_FONT_BBOXReady) { _FONT_BBOXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FONT_BBOX"); _FONT_BBOXReady = true; } return _FONT_BBOXContent; } }
        private static Java.Lang.String _FONT_BBOXContent = default;
        private static bool _FONT_BBOXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#FONT_NAME"/>
        /// </summary>
        public static Java.Lang.String FONT_NAME { get { if (!_FONT_NAMEReady) { _FONT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FONT_NAME"); _FONT_NAMEReady = true; } return _FONT_NAMEContent; } }
        private static Java.Lang.String _FONT_NAMEContent = default;
        private static bool _FONT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#FULL_NAME"/>
        /// </summary>
        public static Java.Lang.String FULL_NAME { get { if (!_FULL_NAMEReady) { _FULL_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FULL_NAME"); _FULL_NAMEReady = true; } return _FULL_NAMEContent; } }
        private static Java.Lang.String _FULL_NAMEContent = default;
        private static bool _FULL_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#IS_BASE_FONT"/>
        /// </summary>
        public static Java.Lang.String IS_BASE_FONT { get { if (!_IS_BASE_FONTReady) { _IS_BASE_FONTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_BASE_FONT"); _IS_BASE_FONTReady = true; } return _IS_BASE_FONTContent; } }
        private static Java.Lang.String _IS_BASE_FONTContent = default;
        private static bool _IS_BASE_FONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#IS_FIXED_PITCH"/>
        /// </summary>
        public static Java.Lang.String IS_FIXED_PITCH { get { if (!_IS_FIXED_PITCHReady) { _IS_FIXED_PITCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_FIXED_PITCH"); _IS_FIXED_PITCHReady = true; } return _IS_FIXED_PITCHContent; } }
        private static Java.Lang.String _IS_FIXED_PITCHContent = default;
        private static bool _IS_FIXED_PITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#IS_FIXED_V"/>
        /// </summary>
        public static Java.Lang.String IS_FIXED_V { get { if (!_IS_FIXED_VReady) { _IS_FIXED_VContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IS_FIXED_V"); _IS_FIXED_VReady = true; } return _IS_FIXED_VContent; } }
        private static Java.Lang.String _IS_FIXED_VContent = default;
        private static bool _IS_FIXED_VReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#ITALIC_ANGLE"/>
        /// </summary>
        public static Java.Lang.String ITALIC_ANGLE { get { if (!_ITALIC_ANGLEReady) { _ITALIC_ANGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ITALIC_ANGLE"); _ITALIC_ANGLEReady = true; } return _ITALIC_ANGLEContent; } }
        private static Java.Lang.String _ITALIC_ANGLEContent = default;
        private static bool _ITALIC_ANGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#KERN_PAIR_KP"/>
        /// </summary>
        public static Java.Lang.String KERN_PAIR_KP { get { if (!_KERN_PAIR_KPReady) { _KERN_PAIR_KPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KERN_PAIR_KP"); _KERN_PAIR_KPReady = true; } return _KERN_PAIR_KPContent; } }
        private static Java.Lang.String _KERN_PAIR_KPContent = default;
        private static bool _KERN_PAIR_KPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#KERN_PAIR_KPH"/>
        /// </summary>
        public static Java.Lang.String KERN_PAIR_KPH { get { if (!_KERN_PAIR_KPHReady) { _KERN_PAIR_KPHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KERN_PAIR_KPH"); _KERN_PAIR_KPHReady = true; } return _KERN_PAIR_KPHContent; } }
        private static Java.Lang.String _KERN_PAIR_KPHContent = default;
        private static bool _KERN_PAIR_KPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#KERN_PAIR_KPX"/>
        /// </summary>
        public static Java.Lang.String KERN_PAIR_KPX { get { if (!_KERN_PAIR_KPXReady) { _KERN_PAIR_KPXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KERN_PAIR_KPX"); _KERN_PAIR_KPXReady = true; } return _KERN_PAIR_KPXContent; } }
        private static Java.Lang.String _KERN_PAIR_KPXContent = default;
        private static bool _KERN_PAIR_KPXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#KERN_PAIR_KPY"/>
        /// </summary>
        public static Java.Lang.String KERN_PAIR_KPY { get { if (!_KERN_PAIR_KPYReady) { _KERN_PAIR_KPYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KERN_PAIR_KPY"); _KERN_PAIR_KPYReady = true; } return _KERN_PAIR_KPYContent; } }
        private static Java.Lang.String _KERN_PAIR_KPYContent = default;
        private static bool _KERN_PAIR_KPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#MAPPING_SCHEME"/>
        /// </summary>
        public static Java.Lang.String MAPPING_SCHEME { get { if (!_MAPPING_SCHEMEReady) { _MAPPING_SCHEMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAPPING_SCHEME"); _MAPPING_SCHEMEReady = true; } return _MAPPING_SCHEMEContent; } }
        private static Java.Lang.String _MAPPING_SCHEMEContent = default;
        private static bool _MAPPING_SCHEMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#NOTICE"/>
        /// </summary>
        public static Java.Lang.String NOTICE { get { if (!_NOTICEReady) { _NOTICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NOTICE"); _NOTICEReady = true; } return _NOTICEContent; } }
        private static Java.Lang.String _NOTICEContent = default;
        private static bool _NOTICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#PCC"/>
        /// </summary>
        public static Java.Lang.String PCC { get { if (!_PCCReady) { _PCCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PCC"); _PCCReady = true; } return _PCCContent; } }
        private static Java.Lang.String _PCCContent = default;
        private static bool _PCCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_CHAR_METRICS"/>
        /// </summary>
        public static Java.Lang.String START_CHAR_METRICS { get { if (!_START_CHAR_METRICSReady) { _START_CHAR_METRICSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_CHAR_METRICS"); _START_CHAR_METRICSReady = true; } return _START_CHAR_METRICSContent; } }
        private static Java.Lang.String _START_CHAR_METRICSContent = default;
        private static bool _START_CHAR_METRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_COMPOSITES"/>
        /// </summary>
        public static Java.Lang.String START_COMPOSITES { get { if (!_START_COMPOSITESReady) { _START_COMPOSITESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_COMPOSITES"); _START_COMPOSITESReady = true; } return _START_COMPOSITESContent; } }
        private static Java.Lang.String _START_COMPOSITESContent = default;
        private static bool _START_COMPOSITESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_FONT_METRICS"/>
        /// </summary>
        public static Java.Lang.String START_FONT_METRICS { get { if (!_START_FONT_METRICSReady) { _START_FONT_METRICSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_FONT_METRICS"); _START_FONT_METRICSReady = true; } return _START_FONT_METRICSContent; } }
        private static Java.Lang.String _START_FONT_METRICSContent = default;
        private static bool _START_FONT_METRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_KERN_DATA"/>
        /// </summary>
        public static Java.Lang.String START_KERN_DATA { get { if (!_START_KERN_DATAReady) { _START_KERN_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_KERN_DATA"); _START_KERN_DATAReady = true; } return _START_KERN_DATAContent; } }
        private static Java.Lang.String _START_KERN_DATAContent = default;
        private static bool _START_KERN_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_KERN_PAIRS"/>
        /// </summary>
        public static Java.Lang.String START_KERN_PAIRS { get { if (!_START_KERN_PAIRSReady) { _START_KERN_PAIRSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_KERN_PAIRS"); _START_KERN_PAIRSReady = true; } return _START_KERN_PAIRSContent; } }
        private static Java.Lang.String _START_KERN_PAIRSContent = default;
        private static bool _START_KERN_PAIRSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_KERN_PAIRS0"/>
        /// </summary>
        public static Java.Lang.String START_KERN_PAIRS0 { get { if (!_START_KERN_PAIRS0Ready) { _START_KERN_PAIRS0Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_KERN_PAIRS0"); _START_KERN_PAIRS0Ready = true; } return _START_KERN_PAIRS0Content; } }
        private static Java.Lang.String _START_KERN_PAIRS0Content = default;
        private static bool _START_KERN_PAIRS0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_KERN_PAIRS1"/>
        /// </summary>
        public static Java.Lang.String START_KERN_PAIRS1 { get { if (!_START_KERN_PAIRS1Ready) { _START_KERN_PAIRS1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_KERN_PAIRS1"); _START_KERN_PAIRS1Ready = true; } return _START_KERN_PAIRS1Content; } }
        private static Java.Lang.String _START_KERN_PAIRS1Content = default;
        private static bool _START_KERN_PAIRS1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#START_TRACK_KERN"/>
        /// </summary>
        public static Java.Lang.String START_TRACK_KERN { get { if (!_START_TRACK_KERNReady) { _START_TRACK_KERNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_TRACK_KERN"); _START_TRACK_KERNReady = true; } return _START_TRACK_KERNContent; } }
        private static Java.Lang.String _START_TRACK_KERNContent = default;
        private static bool _START_TRACK_KERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#STD_HW"/>
        /// </summary>
        public static Java.Lang.String STD_HW { get { if (!_STD_HWReady) { _STD_HWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STD_HW"); _STD_HWReady = true; } return _STD_HWContent; } }
        private static Java.Lang.String _STD_HWContent = default;
        private static bool _STD_HWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#STD_VW"/>
        /// </summary>
        public static Java.Lang.String STD_VW { get { if (!_STD_VWReady) { _STD_VWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STD_VW"); _STD_VWReady = true; } return _STD_VWContent; } }
        private static Java.Lang.String _STD_VWContent = default;
        private static bool _STD_VWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#UNDERLINE_POSITION"/>
        /// </summary>
        public static Java.Lang.String UNDERLINE_POSITION { get { if (!_UNDERLINE_POSITIONReady) { _UNDERLINE_POSITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNDERLINE_POSITION"); _UNDERLINE_POSITIONReady = true; } return _UNDERLINE_POSITIONContent; } }
        private static Java.Lang.String _UNDERLINE_POSITIONContent = default;
        private static bool _UNDERLINE_POSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#UNDERLINE_THICKNESS"/>
        /// </summary>
        public static Java.Lang.String UNDERLINE_THICKNESS { get { if (!_UNDERLINE_THICKNESSReady) { _UNDERLINE_THICKNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNDERLINE_THICKNESS"); _UNDERLINE_THICKNESSReady = true; } return _UNDERLINE_THICKNESSContent; } }
        private static Java.Lang.String _UNDERLINE_THICKNESSContent = default;
        private static bool _UNDERLINE_THICKNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#V_VECTOR"/>
        /// </summary>
        public static Java.Lang.String V_VECTOR { get { if (!_V_VECTORReady) { _V_VECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "V_VECTOR"); _V_VECTORReady = true; } return _V_VECTORContent; } }
        private static Java.Lang.String _V_VECTORContent = default;
        private static bool _V_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#VERSION"/>
        /// </summary>
        public static Java.Lang.String VERSION { get { if (!_VERSIONReady) { _VERSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VERSION"); _VERSIONReady = true; } return _VERSIONContent; } }
        private static Java.Lang.String _VERSIONContent = default;
        private static bool _VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#WEIGHT"/>
        /// </summary>
        public static Java.Lang.String WEIGHT { get { if (!_WEIGHTReady) { _WEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WEIGHT"); _WEIGHTReady = true; } return _WEIGHTContent; } }
        private static Java.Lang.String _WEIGHTContent = default;
        private static bool _WEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#X_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String X_HEIGHT { get { if (!_X_HEIGHTReady) { _X_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "X_HEIGHT"); _X_HEIGHTReady = true; } return _X_HEIGHTContent; } }
        private static Java.Lang.String _X_HEIGHTContent = default;
        private static bool _X_HEIGHTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#parse--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Fontbox.Afm.FontMetrics"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Fontbox.Afm.FontMetrics Parse()
        {
            return IExecuteWithSignature<Org.Apache.Fontbox.Afm.FontMetrics>("parse", "()Lorg/apache/fontbox/afm/FontMetrics;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/afm/AFMParser.html#parse-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Fontbox.Afm.FontMetrics"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Fontbox.Afm.FontMetrics Parse(bool arg0)
        {
            return IExecuteWithSignature<Org.Apache.Fontbox.Afm.FontMetrics>("parse", "(Z)Lorg/apache/fontbox/afm/FontMetrics;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}