/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using fontbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Ttf
{
    #region GlyfDescript declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html"/>
    /// </summary>
    public partial class GlyfDescript : Org.Apache.Fontbox.Ttf.GlyphDescription
    {
        const string _bridgeClassName = "org.apache.fontbox.ttf.GlyfDescript";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("GlyfDescript class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GlyfDescript() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("GlyfDescript class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GlyfDescript(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region GlyfDescript implementation
    public partial class GlyfDescript
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#ON_CURVE"/>
        /// </summary>
        public static byte ON_CURVE { get { if (!_ON_CURVEReady) { _ON_CURVEContent = SGetField<byte>(LocalBridgeClazz, "ON_CURVE"); _ON_CURVEReady = true; } return _ON_CURVEContent; } }
        private static byte _ON_CURVEContent = default;
        private static bool _ON_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#REPEAT"/>
        /// </summary>
        public static byte REPEAT { get { if (!_REPEATReady) { _REPEATContent = SGetField<byte>(LocalBridgeClazz, "REPEAT"); _REPEATReady = true; } return _REPEATContent; } }
        private static byte _REPEATContent = default;
        private static bool _REPEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#X_DUAL"/>
        /// </summary>
        public static byte X_DUAL { get { if (!_X_DUALReady) { _X_DUALContent = SGetField<byte>(LocalBridgeClazz, "X_DUAL"); _X_DUALReady = true; } return _X_DUALContent; } }
        private static byte _X_DUALContent = default;
        private static bool _X_DUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#X_SHORT_VECTOR"/>
        /// </summary>
        public static byte X_SHORT_VECTOR { get { if (!_X_SHORT_VECTORReady) { _X_SHORT_VECTORContent = SGetField<byte>(LocalBridgeClazz, "X_SHORT_VECTOR"); _X_SHORT_VECTORReady = true; } return _X_SHORT_VECTORContent; } }
        private static byte _X_SHORT_VECTORContent = default;
        private static bool _X_SHORT_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#Y_DUAL"/>
        /// </summary>
        public static byte Y_DUAL { get { if (!_Y_DUALReady) { _Y_DUALContent = SGetField<byte>(LocalBridgeClazz, "Y_DUAL"); _Y_DUALReady = true; } return _Y_DUALContent; } }
        private static byte _Y_DUALContent = default;
        private static bool _Y_DUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#Y_SHORT_VECTOR"/>
        /// </summary>
        public static byte Y_SHORT_VECTOR { get { if (!_Y_SHORT_VECTORReady) { _Y_SHORT_VECTORContent = SGetField<byte>(LocalBridgeClazz, "Y_SHORT_VECTOR"); _Y_SHORT_VECTORReady = true; } return _Y_SHORT_VECTORContent; } }
        private static byte _Y_SHORT_VECTORContent = default;
        private static bool _Y_SHORT_VECTORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#getContourCount--"/> 
        /// </summary>
        public int ContourCount
        {
            get { return IExecuteWithSignature<int>("getContourCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#getInstructions--"/> 
        /// </summary>
        public int[] Instructions
        {
            get { return IExecuteWithSignatureArray<int>("getInstructions", "()[I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/GlyfDescript.html#resolve--"/>
        /// </summary>
        public void Resolve()
        {
            IExecuteWithSignature("resolve", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}