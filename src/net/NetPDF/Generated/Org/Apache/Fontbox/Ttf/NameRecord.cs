/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using fontbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Ttf
{
    #region NameRecord declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html"/>
    /// </summary>
    public partial class NameRecord : MASES.JCOBridge.C2JBridge.JVMBridgeBase<NameRecord>
    {
        const string _bridgeClassName = "org.apache.fontbox.ttf.NameRecord";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public NameRecord() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public NameRecord(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region NameRecord implementation
    public partial class NameRecord
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_MACINTOSH_ROMAN"/>
        /// </summary>
        public static int ENCODING_MACINTOSH_ROMAN { get { if (!_ENCODING_MACINTOSH_ROMANReady) { _ENCODING_MACINTOSH_ROMANContent = SGetField<int>(LocalBridgeClazz, "ENCODING_MACINTOSH_ROMAN"); _ENCODING_MACINTOSH_ROMANReady = true; } return _ENCODING_MACINTOSH_ROMANContent; } }
        private static int _ENCODING_MACINTOSH_ROMANContent = default;
        private static bool _ENCODING_MACINTOSH_ROMANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_UNICODE_1_0"/>
        /// </summary>
        public static int ENCODING_UNICODE_1_0 { get { if (!_ENCODING_UNICODE_1_0Ready) { _ENCODING_UNICODE_1_0Content = SGetField<int>(LocalBridgeClazz, "ENCODING_UNICODE_1_0"); _ENCODING_UNICODE_1_0Ready = true; } return _ENCODING_UNICODE_1_0Content; } }
        private static int _ENCODING_UNICODE_1_0Content = default;
        private static bool _ENCODING_UNICODE_1_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_UNICODE_1_1"/>
        /// </summary>
        public static int ENCODING_UNICODE_1_1 { get { if (!_ENCODING_UNICODE_1_1Ready) { _ENCODING_UNICODE_1_1Content = SGetField<int>(LocalBridgeClazz, "ENCODING_UNICODE_1_1"); _ENCODING_UNICODE_1_1Ready = true; } return _ENCODING_UNICODE_1_1Content; } }
        private static int _ENCODING_UNICODE_1_1Content = default;
        private static bool _ENCODING_UNICODE_1_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_UNICODE_2_0_BMP"/>
        /// </summary>
        public static int ENCODING_UNICODE_2_0_BMP { get { if (!_ENCODING_UNICODE_2_0_BMPReady) { _ENCODING_UNICODE_2_0_BMPContent = SGetField<int>(LocalBridgeClazz, "ENCODING_UNICODE_2_0_BMP"); _ENCODING_UNICODE_2_0_BMPReady = true; } return _ENCODING_UNICODE_2_0_BMPContent; } }
        private static int _ENCODING_UNICODE_2_0_BMPContent = default;
        private static bool _ENCODING_UNICODE_2_0_BMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_UNICODE_2_0_FULL"/>
        /// </summary>
        public static int ENCODING_UNICODE_2_0_FULL { get { if (!_ENCODING_UNICODE_2_0_FULLReady) { _ENCODING_UNICODE_2_0_FULLContent = SGetField<int>(LocalBridgeClazz, "ENCODING_UNICODE_2_0_FULL"); _ENCODING_UNICODE_2_0_FULLReady = true; } return _ENCODING_UNICODE_2_0_FULLContent; } }
        private static int _ENCODING_UNICODE_2_0_FULLContent = default;
        private static bool _ENCODING_UNICODE_2_0_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_WINDOWS_SYMBOL"/>
        /// </summary>
        public static int ENCODING_WINDOWS_SYMBOL { get { if (!_ENCODING_WINDOWS_SYMBOLReady) { _ENCODING_WINDOWS_SYMBOLContent = SGetField<int>(LocalBridgeClazz, "ENCODING_WINDOWS_SYMBOL"); _ENCODING_WINDOWS_SYMBOLReady = true; } return _ENCODING_WINDOWS_SYMBOLContent; } }
        private static int _ENCODING_WINDOWS_SYMBOLContent = default;
        private static bool _ENCODING_WINDOWS_SYMBOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_WINDOWS_UNICODE_BMP"/>
        /// </summary>
        public static int ENCODING_WINDOWS_UNICODE_BMP { get { if (!_ENCODING_WINDOWS_UNICODE_BMPReady) { _ENCODING_WINDOWS_UNICODE_BMPContent = SGetField<int>(LocalBridgeClazz, "ENCODING_WINDOWS_UNICODE_BMP"); _ENCODING_WINDOWS_UNICODE_BMPReady = true; } return _ENCODING_WINDOWS_UNICODE_BMPContent; } }
        private static int _ENCODING_WINDOWS_UNICODE_BMPContent = default;
        private static bool _ENCODING_WINDOWS_UNICODE_BMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#ENCODING_WINDOWS_UNICODE_UCS4"/>
        /// </summary>
        public static int ENCODING_WINDOWS_UNICODE_UCS4 { get { if (!_ENCODING_WINDOWS_UNICODE_UCS4Ready) { _ENCODING_WINDOWS_UNICODE_UCS4Content = SGetField<int>(LocalBridgeClazz, "ENCODING_WINDOWS_UNICODE_UCS4"); _ENCODING_WINDOWS_UNICODE_UCS4Ready = true; } return _ENCODING_WINDOWS_UNICODE_UCS4Content; } }
        private static int _ENCODING_WINDOWS_UNICODE_UCS4Content = default;
        private static bool _ENCODING_WINDOWS_UNICODE_UCS4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#LANGUAGE_MACINTOSH_ENGLISH"/>
        /// </summary>
        public static int LANGUAGE_MACINTOSH_ENGLISH { get { if (!_LANGUAGE_MACINTOSH_ENGLISHReady) { _LANGUAGE_MACINTOSH_ENGLISHContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_MACINTOSH_ENGLISH"); _LANGUAGE_MACINTOSH_ENGLISHReady = true; } return _LANGUAGE_MACINTOSH_ENGLISHContent; } }
        private static int _LANGUAGE_MACINTOSH_ENGLISHContent = default;
        private static bool _LANGUAGE_MACINTOSH_ENGLISHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#LANGUAGE_UNICODE"/>
        /// </summary>
        public static int LANGUAGE_UNICODE { get { if (!_LANGUAGE_UNICODEReady) { _LANGUAGE_UNICODEContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_UNICODE"); _LANGUAGE_UNICODEReady = true; } return _LANGUAGE_UNICODEContent; } }
        private static int _LANGUAGE_UNICODEContent = default;
        private static bool _LANGUAGE_UNICODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#LANGUAGE_WINDOWS_EN_US"/>
        /// </summary>
        public static int LANGUAGE_WINDOWS_EN_US { get { if (!_LANGUAGE_WINDOWS_EN_USReady) { _LANGUAGE_WINDOWS_EN_USContent = SGetField<int>(LocalBridgeClazz, "LANGUAGE_WINDOWS_EN_US"); _LANGUAGE_WINDOWS_EN_USReady = true; } return _LANGUAGE_WINDOWS_EN_USContent; } }
        private static int _LANGUAGE_WINDOWS_EN_USContent = default;
        private static bool _LANGUAGE_WINDOWS_EN_USReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_COPYRIGHT"/>
        /// </summary>
        public static int NAME_COPYRIGHT { get { if (!_NAME_COPYRIGHTReady) { _NAME_COPYRIGHTContent = SGetField<int>(LocalBridgeClazz, "NAME_COPYRIGHT"); _NAME_COPYRIGHTReady = true; } return _NAME_COPYRIGHTContent; } }
        private static int _NAME_COPYRIGHTContent = default;
        private static bool _NAME_COPYRIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_FONT_FAMILY_NAME"/>
        /// </summary>
        public static int NAME_FONT_FAMILY_NAME { get { if (!_NAME_FONT_FAMILY_NAMEReady) { _NAME_FONT_FAMILY_NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME_FONT_FAMILY_NAME"); _NAME_FONT_FAMILY_NAMEReady = true; } return _NAME_FONT_FAMILY_NAMEContent; } }
        private static int _NAME_FONT_FAMILY_NAMEContent = default;
        private static bool _NAME_FONT_FAMILY_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_FONT_SUB_FAMILY_NAME"/>
        /// </summary>
        public static int NAME_FONT_SUB_FAMILY_NAME { get { if (!_NAME_FONT_SUB_FAMILY_NAMEReady) { _NAME_FONT_SUB_FAMILY_NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME_FONT_SUB_FAMILY_NAME"); _NAME_FONT_SUB_FAMILY_NAMEReady = true; } return _NAME_FONT_SUB_FAMILY_NAMEContent; } }
        private static int _NAME_FONT_SUB_FAMILY_NAMEContent = default;
        private static bool _NAME_FONT_SUB_FAMILY_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_FULL_FONT_NAME"/>
        /// </summary>
        public static int NAME_FULL_FONT_NAME { get { if (!_NAME_FULL_FONT_NAMEReady) { _NAME_FULL_FONT_NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME_FULL_FONT_NAME"); _NAME_FULL_FONT_NAMEReady = true; } return _NAME_FULL_FONT_NAMEContent; } }
        private static int _NAME_FULL_FONT_NAMEContent = default;
        private static bool _NAME_FULL_FONT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_POSTSCRIPT_NAME"/>
        /// </summary>
        public static int NAME_POSTSCRIPT_NAME { get { if (!_NAME_POSTSCRIPT_NAMEReady) { _NAME_POSTSCRIPT_NAMEContent = SGetField<int>(LocalBridgeClazz, "NAME_POSTSCRIPT_NAME"); _NAME_POSTSCRIPT_NAMEReady = true; } return _NAME_POSTSCRIPT_NAMEContent; } }
        private static int _NAME_POSTSCRIPT_NAMEContent = default;
        private static bool _NAME_POSTSCRIPT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_TRADEMARK"/>
        /// </summary>
        public static int NAME_TRADEMARK { get { if (!_NAME_TRADEMARKReady) { _NAME_TRADEMARKContent = SGetField<int>(LocalBridgeClazz, "NAME_TRADEMARK"); _NAME_TRADEMARKReady = true; } return _NAME_TRADEMARKContent; } }
        private static int _NAME_TRADEMARKContent = default;
        private static bool _NAME_TRADEMARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_UNIQUE_FONT_ID"/>
        /// </summary>
        public static int NAME_UNIQUE_FONT_ID { get { if (!_NAME_UNIQUE_FONT_IDReady) { _NAME_UNIQUE_FONT_IDContent = SGetField<int>(LocalBridgeClazz, "NAME_UNIQUE_FONT_ID"); _NAME_UNIQUE_FONT_IDReady = true; } return _NAME_UNIQUE_FONT_IDContent; } }
        private static int _NAME_UNIQUE_FONT_IDContent = default;
        private static bool _NAME_UNIQUE_FONT_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#NAME_VERSION"/>
        /// </summary>
        public static int NAME_VERSION { get { if (!_NAME_VERSIONReady) { _NAME_VERSIONContent = SGetField<int>(LocalBridgeClazz, "NAME_VERSION"); _NAME_VERSIONReady = true; } return _NAME_VERSIONContent; } }
        private static int _NAME_VERSIONContent = default;
        private static bool _NAME_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#PLATFORM_ISO"/>
        /// </summary>
        public static int PLATFORM_ISO { get { if (!_PLATFORM_ISOReady) { _PLATFORM_ISOContent = SGetField<int>(LocalBridgeClazz, "PLATFORM_ISO"); _PLATFORM_ISOReady = true; } return _PLATFORM_ISOContent; } }
        private static int _PLATFORM_ISOContent = default;
        private static bool _PLATFORM_ISOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#PLATFORM_MACINTOSH"/>
        /// </summary>
        public static int PLATFORM_MACINTOSH { get { if (!_PLATFORM_MACINTOSHReady) { _PLATFORM_MACINTOSHContent = SGetField<int>(LocalBridgeClazz, "PLATFORM_MACINTOSH"); _PLATFORM_MACINTOSHReady = true; } return _PLATFORM_MACINTOSHContent; } }
        private static int _PLATFORM_MACINTOSHContent = default;
        private static bool _PLATFORM_MACINTOSHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#PLATFORM_UNICODE"/>
        /// </summary>
        public static int PLATFORM_UNICODE { get { if (!_PLATFORM_UNICODEReady) { _PLATFORM_UNICODEContent = SGetField<int>(LocalBridgeClazz, "PLATFORM_UNICODE"); _PLATFORM_UNICODEReady = true; } return _PLATFORM_UNICODEContent; } }
        private static int _PLATFORM_UNICODEContent = default;
        private static bool _PLATFORM_UNICODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#PLATFORM_WINDOWS"/>
        /// </summary>
        public static int PLATFORM_WINDOWS { get { if (!_PLATFORM_WINDOWSReady) { _PLATFORM_WINDOWSContent = SGetField<int>(LocalBridgeClazz, "PLATFORM_WINDOWS"); _PLATFORM_WINDOWSReady = true; } return _PLATFORM_WINDOWSContent; } }
        private static int _PLATFORM_WINDOWSContent = default;
        private static bool _PLATFORM_WINDOWSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getLanguageId--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setLanguageId-int-"/>
        /// </summary>
        public int LanguageId
        {
            get { return IExecuteWithSignature<int>("getLanguageId", "()I"); } set { IExecuteWithSignature("setLanguageId", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getNameId--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setNameId-int-"/>
        /// </summary>
        public int NameId
        {
            get { return IExecuteWithSignature<int>("getNameId", "()I"); } set { IExecuteWithSignature("setNameId", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getPlatformEncodingId--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setPlatformEncodingId-int-"/>
        /// </summary>
        public int PlatformEncodingId
        {
            get { return IExecuteWithSignature<int>("getPlatformEncodingId", "()I"); } set { IExecuteWithSignature("setPlatformEncodingId", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getPlatformId--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setPlatformId-int-"/>
        /// </summary>
        public int PlatformId
        {
            get { return IExecuteWithSignature<int>("getPlatformId", "()I"); } set { IExecuteWithSignature("setPlatformId", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getString--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setString-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String String
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getString", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setString", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getStringLength--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setStringLength-int-"/>
        /// </summary>
        public int StringLength
        {
            get { return IExecuteWithSignature<int>("getStringLength", "()I"); } set { IExecuteWithSignature("setStringLength", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#getStringOffset--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/NameRecord.html#setStringOffset-int-"/>
        /// </summary>
        public int StringOffset
        {
            get { return IExecuteWithSignature<int>("getStringOffset", "()I"); } set { IExecuteWithSignature("setStringOffset", "(I)V", value); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}