/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using fontbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Ttf
{
    #region PostScriptTable declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html"/>
    /// </summary>
    public partial class PostScriptTable : Org.Apache.Fontbox.Ttf.TTFTable
    {
        const string _bridgeClassName = "org.apache.fontbox.ttf.PostScriptTable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PostScriptTable() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PostScriptTable(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PostScriptTable implementation
    public partial class PostScriptTable
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#TAG"/>
        /// </summary>
        public static Java.Lang.String TAG { get { if (!_TAGReady) { _TAGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG"); _TAGReady = true; } return _TAGContent; } }
        private static Java.Lang.String _TAGContent = default;
        private static bool _TAGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getFormatType--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setFormatType-float-"/>
        /// </summary>
        public float FormatType
        {
            get { return IExecuteWithSignature<float>("getFormatType", "()F"); } set { IExecuteWithSignature("setFormatType", "(F)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getGlyphNames--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setGlyphNames-java.lang.String[]-"/>
        /// </summary>
        public Java.Lang.String[] GlyphNames
        {
            get { return IExecuteWithSignatureArray<Java.Lang.String>("getGlyphNames", "()[Ljava/lang/String;"); } set { IExecuteWithSignature("setGlyphNames", "([Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getIsFixedPitch--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setIsFixedPitch-long-"/>
        /// </summary>
        public long IsFixedPitch
        {
            get { return IExecuteWithSignature<long>("getIsFixedPitch", "()J"); } set { IExecuteWithSignature("setIsFixedPitch", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getItalicAngle--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setItalicAngle-float-"/>
        /// </summary>
        public float ItalicAngle
        {
            get { return IExecuteWithSignature<float>("getItalicAngle", "()F"); } set { IExecuteWithSignature("setItalicAngle", "(F)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getMaxMemType1--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setMaxMemType1-long-"/>
        /// </summary>
        public long MaxMemType1
        {
            get { return IExecuteWithSignature<long>("getMaxMemType1", "()J"); } set { IExecuteWithSignature("setMaxMemType1", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getMaxMemType42--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setMaxMemType42-long-"/>
        /// </summary>
        public long MaxMemType42
        {
            get { return IExecuteWithSignature<long>("getMaxMemType42", "()J"); } set { IExecuteWithSignature("setMaxMemType42", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getMinMemType1--"/> 
        /// </summary>
        public long MinMemType1
        {
            get { return IExecuteWithSignature<long>("getMinMemType1", "()J"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getMinMemType42--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setMinMemType42-long-"/>
        /// </summary>
        public long MinMemType42
        {
            get { return IExecuteWithSignature<long>("getMinMemType42", "()J"); } set { IExecuteWithSignature("setMinMemType42", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getUnderlinePosition--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setUnderlinePosition-short-"/>
        /// </summary>
        public short UnderlinePosition
        {
            get { return IExecuteWithSignature<short>("getUnderlinePosition", "()S"); } set { IExecuteWithSignature("setUnderlinePosition", "(S)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getUnderlineThickness--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setUnderlineThickness-short-"/>
        /// </summary>
        public short UnderlineThickness
        {
            get { return IExecuteWithSignature<short>("getUnderlineThickness", "()S"); } set { IExecuteWithSignature("setUnderlineThickness", "(S)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#getName-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.5/org/apache/fontbox/ttf/PostScriptTable.html#setMimMemType1-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetMimMemType1(long arg0)
        {
            IExecuteWithSignature("setMimMemType1", "(J)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}