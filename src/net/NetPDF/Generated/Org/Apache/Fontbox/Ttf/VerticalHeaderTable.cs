/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using fontbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Ttf
{
    #region VerticalHeaderTable declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html"/>
    /// </summary>
    public partial class VerticalHeaderTable : Org.Apache.Fontbox.Ttf.TTFTable
    {
        const string _bridgeClassName = "org.apache.fontbox.ttf.VerticalHeaderTable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public VerticalHeaderTable() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public VerticalHeaderTable(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region VerticalHeaderTable implementation
    public partial class VerticalHeaderTable
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#TAG"/>
        /// </summary>
        public static Java.Lang.String TAG { get { if (!_TAGReady) { _TAGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAG"); _TAGReady = true; } return _TAGContent; } }
        private static Java.Lang.String _TAGContent = default;
        private static bool _TAGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getAdvanceHeightMax--"/> 
        /// </summary>
        public int AdvanceHeightMax
        {
            get { return IExecuteWithSignature<int>("getAdvanceHeightMax", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getAscender--"/> 
        /// </summary>
        public short Ascender
        {
            get { return IExecuteWithSignature<short>("getAscender", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getCaretOffset--"/> 
        /// </summary>
        public short CaretOffset
        {
            get { return IExecuteWithSignature<short>("getCaretOffset", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getCaretSlopeRise--"/> 
        /// </summary>
        public short CaretSlopeRise
        {
            get { return IExecuteWithSignature<short>("getCaretSlopeRise", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getCaretSlopeRun--"/> 
        /// </summary>
        public short CaretSlopeRun
        {
            get { return IExecuteWithSignature<short>("getCaretSlopeRun", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getDescender--"/> 
        /// </summary>
        public short Descender
        {
            get { return IExecuteWithSignature<short>("getDescender", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getLineGap--"/> 
        /// </summary>
        public short LineGap
        {
            get { return IExecuteWithSignature<short>("getLineGap", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getMetricDataFormat--"/> 
        /// </summary>
        public short MetricDataFormat
        {
            get { return IExecuteWithSignature<short>("getMetricDataFormat", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getMinBottomSideBearing--"/> 
        /// </summary>
        public short MinBottomSideBearing
        {
            get { return IExecuteWithSignature<short>("getMinBottomSideBearing", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getMinTopSideBearing--"/> 
        /// </summary>
        public short MinTopSideBearing
        {
            get { return IExecuteWithSignature<short>("getMinTopSideBearing", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getNumberOfVMetrics--"/> 
        /// </summary>
        public int NumberOfVMetrics
        {
            get { return IExecuteWithSignature<int>("getNumberOfVMetrics", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getReserved1--"/> 
        /// </summary>
        public short Reserved1
        {
            get { return IExecuteWithSignature<short>("getReserved1", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getReserved2--"/> 
        /// </summary>
        public short Reserved2
        {
            get { return IExecuteWithSignature<short>("getReserved2", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getReserved3--"/> 
        /// </summary>
        public short Reserved3
        {
            get { return IExecuteWithSignature<short>("getReserved3", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getReserved4--"/> 
        /// </summary>
        public short Reserved4
        {
            get { return IExecuteWithSignature<short>("getReserved4", "()S"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getVersion--"/> 
        /// </summary>
        public float Version
        {
            get { return IExecuteWithSignature<float>("getVersion", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/VerticalHeaderTable.html#getYMaxExtent--"/> 
        /// </summary>
        public short YMaxExtent
        {
            get { return IExecuteWithSignature<short>("getYMaxExtent", "()S"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}