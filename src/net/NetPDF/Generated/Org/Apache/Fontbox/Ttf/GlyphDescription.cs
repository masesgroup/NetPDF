/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using fontbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Fontbox.Ttf
{
    #region GlyphDescription declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html"/>
    /// </summary>
    public partial class GlyphDescription : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GlyphDescription>
    {
        const string _bridgeClassName = "org.apache.fontbox.ttf.GlyphDescription";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("GlyphDescription class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GlyphDescription() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("GlyphDescription class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GlyphDescription(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IGlyphDescription
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IGlyphDescription
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region GlyphDescription implementation
    public partial class GlyphDescription : Org.Apache.Fontbox.Ttf.IGlyphDescription
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getContourCount--"/> 
        /// </summary>
        public int ContourCount
        {
            get { return IExecuteWithSignature<int>("getContourCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getPointCount--"/> 
        /// </summary>
        public int PointCount
        {
            get { return IExecuteWithSignature<int>("getPointCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#isComposite--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsComposite()
        {
            return IExecuteWithSignature<bool>("isComposite", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getFlags-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte GetFlags(int arg0)
        {
            return IExecuteWithSignature<byte>("getFlags", "(I)B", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getEndPtOfContours-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetEndPtOfContours(int arg0)
        {
            return IExecuteWithSignature<int>("getEndPtOfContours", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getXCoordinate-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="short"/></returns>
        public short GetXCoordinate(int arg0)
        {
            return IExecuteWithSignature<short>("getXCoordinate", "(I)S", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#getYCoordinate-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="short"/></returns>
        public short GetYCoordinate(int arg0)
        {
            return IExecuteWithSignature<short>("getYCoordinate", "(I)S", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/fontbox/3.0.3/org/apache/fontbox/ttf/GlyphDescription.html#resolve--"/>
        /// </summary>
        public void Resolve()
        {
            IExecuteWithSignature("resolve", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}