/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdfparser
{
    #region COSParser declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html"/>
    /// </summary>
    public partial class COSParser : Org.Apache.Pdfbox.Pdfparser.BaseParser
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdfparser.COSParser";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public COSParser() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public COSParser(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public COSParser(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region COSParser implementation
    public partial class COSParser
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#org.apache.pdfbox.pdfparser.COSParser(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public COSParser(Org.Apache.Pdfbox.Io.RandomAccessRead arg0, Java.Lang.String arg1, Java.Io.InputStream arg2, Java.Lang.String arg3, Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#org.apache.pdfbox.pdfparser.COSParser(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public COSParser(Org.Apache.Pdfbox.Io.RandomAccessRead arg0, Java.Lang.String arg1, Java.Io.InputStream arg2, Java.Lang.String arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#org.apache.pdfbox.pdfparser.COSParser(org.apache.pdfbox.io.RandomAccessRead)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public COSParser(Org.Apache.Pdfbox.Io.RandomAccessRead arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdfparser.COSParser"/> to <see cref="Org.Apache.Pdfbox.Cos.ICOSParser"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Cos.ICOSParser(Org.Apache.Pdfbox.Pdfparser.COSParser t) => t.Cast<Org.Apache.Pdfbox.Cos.ICOSParser>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#SYSPROP_EOFLOOKUPRANGE"/>
        /// </summary>
        public static Java.Lang.String SYSPROP_EOFLOOKUPRANGE { get { if (!_SYSPROP_EOFLOOKUPRANGEReady) { _SYSPROP_EOFLOOKUPRANGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYSPROP_EOFLOOKUPRANGE"); _SYSPROP_EOFLOOKUPRANGEReady = true; } return _SYSPROP_EOFLOOKUPRANGEContent; } }
        private static Java.Lang.String _SYSPROP_EOFLOOKUPRANGEContent = default;
        private static bool _SYSPROP_EOFLOOKUPRANGEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#isLenient--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLenient()
        {
            return IExecuteWithSignature<bool>("isLenient", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#dereferenceCOSObject-org.apache.pdfbox.cos.COSObject-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSObject"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Cos.COSBase DereferenceCOSObject(Org.Apache.Pdfbox.Cos.COSObject arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("dereferenceCOSObject", "(Lorg/apache/pdfbox/cos/COSObject;)Lorg/apache/pdfbox/cos/COSBase;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#createRandomAccessReadView-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Io.RandomAccessReadView"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Io.RandomAccessReadView CreateRandomAccessReadView(long arg0, long arg1)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Io.RandomAccessReadView>("createRandomAccessReadView", "(JJ)Lorg/apache/pdfbox/io/RandomAccessReadView;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/COSParser.html#setEOFLookupRange-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEOFLookupRange(int arg0)
        {
            IExecuteWithSignature("setEOFLookupRange", "(I)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}