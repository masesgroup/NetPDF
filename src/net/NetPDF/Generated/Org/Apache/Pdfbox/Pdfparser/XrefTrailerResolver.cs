/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdfparser
{
    #region XrefTrailerResolver declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html"/>
    /// </summary>
    public partial class XrefTrailerResolver : MASES.JCOBridge.C2JBridge.JVMBridgeBase<XrefTrailerResolver>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdfparser.XrefTrailerResolver";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public XrefTrailerResolver() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public XrefTrailerResolver(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region XRefType declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.XRefType.html"/>
        /// </summary>
        public partial class XRefType : Java.Lang.Enum<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public XRefType() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public XRefType(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region XrefTrailerResolver implementation
    public partial class XrefTrailerResolver
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getCurrentTrailer--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary CurrentTrailer
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getCurrentTrailer", "()Lorg/apache/pdfbox/cos/COSDictionary;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getFirstTrailer--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary FirstTrailer
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getFirstTrailer", "()Lorg/apache/pdfbox/cos/COSDictionary;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getLastTrailer--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary LastTrailer
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getLastTrailer", "()Lorg/apache/pdfbox/cos/COSDictionary;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getTrailer--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#setTrailer-org.apache.pdfbox.cos.COSDictionary-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary Trailer
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getTrailer", "()Lorg/apache/pdfbox/cos/COSDictionary;"); } set { IExecuteWithSignature("setTrailer", "(Lorg/apache/pdfbox/cos/COSDictionary;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getTrailerCount--"/> 
        /// </summary>
        public int TrailerCount
        {
            get { return IExecuteWithSignature<int>("getTrailerCount", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getXrefTable--"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Pdfbox.Cos.COSObjectKey, Java.Lang.Long> XrefTable
        {
            get { return IExecuteWithSignature<Java.Util.Map<Org.Apache.Pdfbox.Cos.COSObjectKey, Java.Lang.Long>>("getXrefTable", "()Ljava/util/Map;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getXrefType--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType XrefType
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>("getXrefType", "()Lorg/apache/pdfbox/pdfparser/XrefTrailerResolver$XRefType;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#getContainedObjectNumbers-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.Long> GetContainedObjectNumbers(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.Long>>("getContainedObjectNumbers", "(I)Ljava/util/Set;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#nextXrefObj-long-org.apache.pdfbox.pdfparser.XrefTrailerResolver.XRefType-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType"/></param>
        public void NextXrefObj(long arg0, Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType arg1)
        {
            IExecuteWithSignature("nextXrefObj", "(JLorg/apache/pdfbox/pdfparser/XrefTrailerResolver$XRefType;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#setStartxref-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetStartxref(long arg0)
        {
            IExecuteWithSignature("setStartxref", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.html#setXRef-org.apache.pdfbox.cos.COSObjectKey-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSObjectKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetXRef(Org.Apache.Pdfbox.Cos.COSObjectKey arg0, long arg1)
        {
            IExecuteWithSignature("setXRef", "(Lorg/apache/pdfbox/cos/COSObjectKey;J)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region XRefType implementation
        public partial class XRefType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.XRefType.html#STREAM"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType STREAM { get { if (!_STREAMReady) { _STREAMContent = SGetField<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>(LocalBridgeClazz, "STREAM"); _STREAMReady = true; } return _STREAMContent; } }
            private static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType _STREAMContent = default;
            private static bool _STREAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.XRefType.html#TABLE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType TABLE { get { if (!_TABLEReady) { _TABLEContent = SGetField<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>(LocalBridgeClazz, "TABLE"); _TABLEReady = true; } return _TABLEContent; } }
            private static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType _TABLEContent = default;
            private static bool _TABLEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.XRefType.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType"/></returns>
            public static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdfparser/XrefTrailerResolver$XRefType;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfparser/XrefTrailerResolver.XRefType.html#values--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType"/></returns>
            public static Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Pdfparser.XrefTrailerResolver.XRefType>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/pdfparser/XrefTrailerResolver$XRefType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}