/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Multipdf
{
    #region PDFMergerUtility declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html"/>
    /// </summary>
    public partial class PDFMergerUtility : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PDFMergerUtility>
    {
        const string _bridgeClassName = "org.apache.pdfbox.multipdf.PDFMergerUtility";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDFMergerUtility() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDFMergerUtility(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AcroFormMergeMode declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.AcroFormMergeMode.html"/>
        /// </summary>
        public partial class AcroFormMergeMode : Java.Lang.Enum<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>
        {
            const string _bridgeClassName = "org.apache.pdfbox.multipdf.PDFMergerUtility$AcroFormMergeMode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AcroFormMergeMode() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AcroFormMergeMode(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region DocumentMergeMode declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.DocumentMergeMode.html"/>
        /// </summary>
        public partial class DocumentMergeMode : Java.Lang.Enum<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>
        {
            const string _bridgeClassName = "org.apache.pdfbox.multipdf.PDFMergerUtility$DocumentMergeMode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DocumentMergeMode() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DocumentMergeMode(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region PDFMergerUtility implementation
    public partial class PDFMergerUtility
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getDestinationDocumentInformation--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setDestinationDocumentInformation-org.apache.pdfbox.pdmodel.PDDocumentInformation-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.PDDocumentInformation DestinationDocumentInformation
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.PDDocumentInformation>("getDestinationDocumentInformation", "()Lorg/apache/pdfbox/pdmodel/PDDocumentInformation;"); } set { IExecuteWithSignature("setDestinationDocumentInformation", "(Lorg/apache/pdfbox/pdmodel/PDDocumentInformation;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getDestinationFileName--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setDestinationFileName-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String DestinationFileName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDestinationFileName", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDestinationFileName", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getDestinationMetadata--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setDestinationMetadata-org.apache.pdfbox.pdmodel.common.PDMetadata-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Common.PDMetadata DestinationMetadata
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.PDMetadata>("getDestinationMetadata", "()Lorg/apache/pdfbox/pdmodel/common/PDMetadata;"); } set { IExecuteWithSignature("setDestinationMetadata", "(Lorg/apache/pdfbox/pdmodel/common/PDMetadata;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getDestinationStream--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setDestinationStream-java.io.OutputStream-"/>
        /// </summary>
        public Java.Io.OutputStream DestinationStream
        {
            get { return IExecuteWithSignature<Java.Io.OutputStream>("getDestinationStream", "()Ljava/io/OutputStream;"); } set { IExecuteWithSignature("setDestinationStream", "(Ljava/io/OutputStream;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getAcroFormMergeMode--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode GetAcroFormMergeMode
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>("getAcroFormMergeMode", "()Lorg/apache/pdfbox/multipdf/PDFMergerUtility$AcroFormMergeMode;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#getDocumentMergeMode--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode GetDocumentMergeMode
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>("getDocumentMergeMode", "()Lorg/apache/pdfbox/multipdf/PDFMergerUtility$DocumentMergeMode;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#isIgnoreAcroFormErrors--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsIgnoreAcroFormErrors()
        {
            return IExecuteWithSignature<bool>("isIgnoreAcroFormErrors", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#addSource-java.io.File-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public void AddSource(Java.Io.File arg0)
        {
            IExecuteWithSignature("addSource", "(Ljava/io/File;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#addSource-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Java.Io.FileNotFoundException"/>
        public void AddSource(Java.Lang.String arg0)
        {
            IExecuteWithSignature("addSource", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#addSource-org.apache.pdfbox.io.RandomAccessRead-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></param>
        public void AddSource(Org.Apache.Pdfbox.Io.RandomAccessRead arg0)
        {
            IExecuteWithSignature("addSource", "(Lorg/apache/pdfbox/io/RandomAccessRead;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#addSources-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void AddSources(Java.Util.List<Org.Apache.Pdfbox.Io.RandomAccessRead> arg0)
        {
            IExecuteWithSignature("addSources", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#appendDocument-org.apache.pdfbox.pdmodel.PDDocument-org.apache.pdfbox.pdmodel.PDDocument-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AppendDocument(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.PDDocument arg1)
        {
            IExecuteWithSignature("appendDocument", "(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/pdmodel/PDDocument;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#mergeDocuments-org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction-org.apache.pdfbox.pdfwriter.compress.CompressParameters-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void MergeDocuments(Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction arg0, Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters arg1)
        {
            IExecuteWithSignature("mergeDocuments", "(Lorg/apache/pdfbox/io/RandomAccessStreamCache$StreamCacheCreateFunction;Lorg/apache/pdfbox/pdfwriter/compress/CompressParameters;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#mergeDocuments-org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void MergeDocuments(Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction arg0)
        {
            IExecuteWithSignature("mergeDocuments", "(Lorg/apache/pdfbox/io/RandomAccessStreamCache$StreamCacheCreateFunction;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setAcroFormMergeMode-org.apache.pdfbox.multipdf.PDFMergerUtility.AcroFormMergeMode-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode"/></param>
        public void SetAcroFormMergeMode(Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode arg0)
        {
            IExecuteWithSignature("setAcroFormMergeMode", "(Lorg/apache/pdfbox/multipdf/PDFMergerUtility$AcroFormMergeMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setDocumentMergeMode-org.apache.pdfbox.multipdf.PDFMergerUtility.DocumentMergeMode-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode"/></param>
        public void SetDocumentMergeMode(Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode arg0)
        {
            IExecuteWithSignature("setDocumentMergeMode", "(Lorg/apache/pdfbox/multipdf/PDFMergerUtility$DocumentMergeMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.html#setIgnoreAcroFormErrors-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIgnoreAcroFormErrors(bool arg0)
        {
            IExecuteWithSignature("setIgnoreAcroFormErrors", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes
        #region AcroFormMergeMode implementation
        public partial class AcroFormMergeMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.AcroFormMergeMode.html#JOIN_FORM_FIELDS_MODE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode JOIN_FORM_FIELDS_MODE { get { if (!_JOIN_FORM_FIELDS_MODEReady) { _JOIN_FORM_FIELDS_MODEContent = SGetField<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>(LocalBridgeClazz, "JOIN_FORM_FIELDS_MODE"); _JOIN_FORM_FIELDS_MODEReady = true; } return _JOIN_FORM_FIELDS_MODEContent; } }
            private static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode _JOIN_FORM_FIELDS_MODEContent = default;
            private static bool _JOIN_FORM_FIELDS_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.AcroFormMergeMode.html#PDFBOX_LEGACY_MODE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode PDFBOX_LEGACY_MODE { get { if (!_PDFBOX_LEGACY_MODEReady) { _PDFBOX_LEGACY_MODEContent = SGetField<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>(LocalBridgeClazz, "PDFBOX_LEGACY_MODE"); _PDFBOX_LEGACY_MODEReady = true; } return _PDFBOX_LEGACY_MODEContent; } }
            private static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode _PDFBOX_LEGACY_MODEContent = default;
            private static bool _PDFBOX_LEGACY_MODEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.AcroFormMergeMode.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode"/></returns>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/multipdf/PDFMergerUtility$AcroFormMergeMode;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.AcroFormMergeMode.html#values--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode"/></returns>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.AcroFormMergeMode>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/multipdf/PDFMergerUtility$AcroFormMergeMode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DocumentMergeMode implementation
        public partial class DocumentMergeMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.DocumentMergeMode.html#OPTIMIZE_RESOURCES_MODE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode OPTIMIZE_RESOURCES_MODE { get { if (!_OPTIMIZE_RESOURCES_MODEReady) { _OPTIMIZE_RESOURCES_MODEContent = SGetField<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>(LocalBridgeClazz, "OPTIMIZE_RESOURCES_MODE"); _OPTIMIZE_RESOURCES_MODEReady = true; } return _OPTIMIZE_RESOURCES_MODEContent; } }
            private static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode _OPTIMIZE_RESOURCES_MODEContent = default;
            private static bool _OPTIMIZE_RESOURCES_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.DocumentMergeMode.html#PDFBOX_LEGACY_MODE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode PDFBOX_LEGACY_MODE { get { if (!_PDFBOX_LEGACY_MODEReady) { _PDFBOX_LEGACY_MODEContent = SGetField<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>(LocalBridgeClazz, "PDFBOX_LEGACY_MODE"); _PDFBOX_LEGACY_MODEReady = true; } return _PDFBOX_LEGACY_MODEContent; } }
            private static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode _PDFBOX_LEGACY_MODEContent = default;
            private static bool _PDFBOX_LEGACY_MODEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.DocumentMergeMode.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode"/></returns>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/multipdf/PDFMergerUtility$DocumentMergeMode;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/multipdf/PDFMergerUtility.DocumentMergeMode.html#values--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode"/></returns>
            public static Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Multipdf.PDFMergerUtility.DocumentMergeMode>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/multipdf/PDFMergerUtility$DocumentMergeMode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}