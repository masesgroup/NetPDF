/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdfwriter
{
    #region ContentStreamWriter declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html"/>
    /// </summary>
    public partial class ContentStreamWriter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ContentStreamWriter>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdfwriter.ContentStreamWriter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ContentStreamWriter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ContentStreamWriter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ContentStreamWriter implementation
    public partial class ContentStreamWriter
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#org.apache.pdfbox.pdfwriter.ContentStreamWriter(java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        public ContentStreamWriter(Java.Io.OutputStream arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#EOL"/>
        /// </summary>
        public static byte[] EOL { get { if (!_EOLReady) { _EOLContent = SGetFieldArray<byte>(LocalBridgeClazz, "EOL"); _EOLReady = true; } return _EOLContent; } }
        private static byte[] _EOLContent = default;
        private static bool _EOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#SPACE"/>
        /// </summary>
        public static byte[] SPACE { get { if (!_SPACEReady) { _SPACEContent = SGetFieldArray<byte>(LocalBridgeClazz, "SPACE"); _SPACEReady = true; } return _SPACEContent; } }
        private static byte[] _SPACEContent = default;
        private static bool _SPACEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#writeToken-org.apache.pdfbox.contentstream.operator.Operator-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Contentstream.Operator.Operator"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteToken(Org.Apache.Pdfbox.Contentstream.Operator.Operator arg0)
        {
            IExecuteWithSignature("writeToken", "(Lorg/apache/pdfbox/contentstream/operator/Operator;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#writeToken-org.apache.pdfbox.cos.COSBase-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteToken(Org.Apache.Pdfbox.Cos.COSBase arg0)
        {
            IExecuteWithSignature("writeToken", "(Lorg/apache/pdfbox/cos/COSBase;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#writeTokens-java.lang.Object...-"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteTokens(params object[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("writeTokens", "([Ljava/lang/Object;)V"); else IExecuteWithSignature("writeTokens", "([Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/ContentStreamWriter.html#writeTokens-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteTokens(Java.Util.List<object> arg0)
        {
            IExecuteWithSignature("writeTokens", "(Ljava/util/List;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}