/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdfwriter.Compress
{
    #region CompressParameters declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html"/>
    /// </summary>
    public partial class CompressParameters : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CompressParameters>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdfwriter.compress.CompressParameters";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public CompressParameters() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public CompressParameters(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region CompressParameters implementation
    public partial class CompressParameters
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#org.apache.pdfbox.pdfwriter.compress.CompressParameters(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public CompressParameters(int arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#DEFAULT_OBJECT_STREAM_SIZE"/>
        /// </summary>
        public static int DEFAULT_OBJECT_STREAM_SIZE { get { if (!_DEFAULT_OBJECT_STREAM_SIZEReady) { _DEFAULT_OBJECT_STREAM_SIZEContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_OBJECT_STREAM_SIZE"); _DEFAULT_OBJECT_STREAM_SIZEReady = true; } return _DEFAULT_OBJECT_STREAM_SIZEContent; } }
        private static int _DEFAULT_OBJECT_STREAM_SIZEContent = default;
        private static bool _DEFAULT_OBJECT_STREAM_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#DEFAULT_COMPRESSION"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters DEFAULT_COMPRESSION { get { if (!_DEFAULT_COMPRESSIONReady) { _DEFAULT_COMPRESSIONContent = SGetField<Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters>(LocalBridgeClazz, "DEFAULT_COMPRESSION"); _DEFAULT_COMPRESSIONReady = true; } return _DEFAULT_COMPRESSIONContent; } }
        private static Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters _DEFAULT_COMPRESSIONContent = default;
        private static bool _DEFAULT_COMPRESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#NO_COMPRESSION"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters NO_COMPRESSION { get { if (!_NO_COMPRESSIONReady) { _NO_COMPRESSIONContent = SGetField<Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters>(LocalBridgeClazz, "NO_COMPRESSION"); _NO_COMPRESSIONReady = true; } return _NO_COMPRESSIONContent; } }
        private static Org.Apache.Pdfbox.Pdfwriter.Compress.CompressParameters _NO_COMPRESSIONContent = default;
        private static bool _NO_COMPRESSIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#getObjectStreamSize--"/> 
        /// </summary>
        public int ObjectStreamSize
        {
            get { return IExecuteWithSignature<int>("getObjectStreamSize", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/compress/CompressParameters.html#isCompress--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCompress()
        {
            return IExecuteWithSignature<bool>("isCompress", "()Z");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}