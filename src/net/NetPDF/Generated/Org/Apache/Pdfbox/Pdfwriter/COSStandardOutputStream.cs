/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdfwriter
{
    #region COSStandardOutputStream declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html"/>
    /// </summary>
    public partial class COSStandardOutputStream : Java.Io.FilterOutputStream
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdfwriter.COSStandardOutputStream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public COSStandardOutputStream() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public COSStandardOutputStream(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public COSStandardOutputStream(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region COSStandardOutputStream implementation
    public partial class COSStandardOutputStream
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#org.apache.pdfbox.pdfwriter.COSStandardOutputStream(java.io.OutputStream,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public COSStandardOutputStream(Java.Io.OutputStream arg0, long arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#org.apache.pdfbox.pdfwriter.COSStandardOutputStream(java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        public COSStandardOutputStream(Java.Io.OutputStream arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#CRLF"/>
        /// </summary>
        public static byte[] CRLF { get { if (!_CRLFReady) { _CRLFContent = SGetFieldArray<byte>(LocalBridgeClazz, "CRLF"); _CRLFReady = true; } return _CRLFContent; } }
        private static byte[] _CRLFContent = default;
        private static bool _CRLFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#EOL"/>
        /// </summary>
        public static byte[] EOL { get { if (!_EOLReady) { _EOLContent = SGetFieldArray<byte>(LocalBridgeClazz, "EOL"); _EOLReady = true; } return _EOLContent; } }
        private static byte[] _EOLContent = default;
        private static bool _EOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#LF"/>
        /// </summary>
        public static byte[] LF { get { if (!_LFReady) { _LFContent = SGetFieldArray<byte>(LocalBridgeClazz, "LF"); _LFReady = true; } return _LFContent; } }
        private static byte[] _LFContent = default;
        private static bool _LFReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#getPos--"/> 
        /// </summary>
        public long Pos
        {
            get { return IExecuteWithSignature<long>("getPos", "()J"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#isOnNewLine--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOnNewLine()
        {
            return IExecuteWithSignature<bool>("isOnNewLine", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#setOnNewLine-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOnNewLine(bool arg0)
        {
            IExecuteWithSignature("setOnNewLine", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#writeCRLF--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteCRLF()
        {
            IExecuteWithSignature("writeCRLF", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#writeEOL--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteEOL()
        {
            IExecuteWithSignature("writeEOL", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdfwriter/COSStandardOutputStream.html#writeLF--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void WriteLF()
        {
            IExecuteWithSignature("writeLF", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}