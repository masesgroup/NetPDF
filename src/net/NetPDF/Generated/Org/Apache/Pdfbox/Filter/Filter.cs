/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Filter
{
    #region Filter declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html"/>
    /// </summary>
    public partial class Filter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Filter>
    {
        const string _bridgeClassName = "org.apache.pdfbox.filter.Filter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Filter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Filter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Filter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Filter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Filter implementation
    public partial class Filter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#SYSPROP_DEFLATELEVEL"/>
        /// </summary>
        public static Java.Lang.String SYSPROP_DEFLATELEVEL { get { if (!_SYSPROP_DEFLATELEVELReady) { _SYSPROP_DEFLATELEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYSPROP_DEFLATELEVEL"); _SYSPROP_DEFLATELEVELReady = true; } return _SYSPROP_DEFLATELEVELContent; } }
        private static Java.Lang.String _SYSPROP_DEFLATELEVELContent = default;
        private static bool _SYSPROP_DEFLATELEVELReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#getCompressionLevel--"/> 
        /// </summary>
        public static int CompressionLevel
        {
            get { return SExecuteWithSignature<int>(LocalBridgeClazz, "getCompressionLevel", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#findImageReader-java.lang.String-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Javax.Imageio.ImageReader"/></returns>
        /// <exception cref="Org.Apache.Pdfbox.Filter.MissingImageReaderException"/>
        public static Javax.Imageio.ImageReader FindImageReader(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Javax.Imageio.ImageReader>(LocalBridgeClazz, "findImageReader", "(Ljava/lang/String;Ljava/lang/String;)Ljavax/imageio/ImageReader;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#findRasterReader-java.lang.String-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Javax.Imageio.ImageReader"/></returns>
        /// <exception cref="Org.Apache.Pdfbox.Filter.MissingImageReaderException"/>
        public static Javax.Imageio.ImageReader FindRasterReader(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Javax.Imageio.ImageReader>(LocalBridgeClazz, "findRasterReader", "(Ljava/lang/String;Ljava/lang/String;)Ljavax/imageio/ImageReader;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#decode-java.io.InputStream-java.util.List-org.apache.pdfbox.cos.COSDictionary-org.apache.pdfbox.filter.DecodeOptions-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Pdfbox.Filter.DecodeOptions"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Io.RandomAccessRead Decode(Java.Io.InputStream arg0, Java.Util.List<Org.Apache.Pdfbox.Filter.Filter> arg1, Org.Apache.Pdfbox.Cos.COSDictionary arg2, Org.Apache.Pdfbox.Filter.DecodeOptions arg3, Java.Util.List<Org.Apache.Pdfbox.Filter.DecodeResult> arg4)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Io.RandomAccessRead>(LocalBridgeClazz, "decode", "(Ljava/io/InputStream;Ljava/util/List;Lorg/apache/pdfbox/cos/COSDictionary;Lorg/apache/pdfbox/filter/DecodeOptions;Ljava/util/List;)Lorg/apache/pdfbox/io/RandomAccessRead;", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#decode-java.io.InputStream-java.io.OutputStream-org.apache.pdfbox.cos.COSDictionary-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Filter.DecodeResult"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Filter.DecodeResult Decode(Java.Io.InputStream arg0, Java.Io.OutputStream arg1, Org.Apache.Pdfbox.Cos.COSDictionary arg2, int arg3)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Filter.DecodeResult>("decode", "(Ljava/io/InputStream;Ljava/io/OutputStream;Lorg/apache/pdfbox/cos/COSDictionary;I)Lorg/apache/pdfbox/filter/DecodeResult;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#encode-java.io.InputStream-java.io.OutputStream-org.apache.pdfbox.cos.COSDictionary-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Encode(Java.Io.InputStream arg0, Java.Io.OutputStream arg1, Org.Apache.Pdfbox.Cos.COSDictionary arg2, int arg3)
        {
            IExecuteWithSignature("encode", "(Ljava/io/InputStream;Ljava/io/OutputStream;Lorg/apache/pdfbox/cos/COSDictionary;I)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/filter/Filter.html#decode-java.io.InputStream-java.io.OutputStream-org.apache.pdfbox.cos.COSDictionary-int-org.apache.pdfbox.filter.DecodeOptions-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Pdfbox.Filter.DecodeOptions"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Filter.DecodeResult"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Filter.DecodeResult Decode(Java.Io.InputStream arg0, Java.Io.OutputStream arg1, Org.Apache.Pdfbox.Cos.COSDictionary arg2, int arg3, Org.Apache.Pdfbox.Filter.DecodeOptions arg4)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Filter.DecodeResult>("decode", "(Ljava/io/InputStream;Ljava/io/OutputStream;Lorg/apache/pdfbox/cos/COSDictionary;ILorg/apache/pdfbox/filter/DecodeOptions;)Lorg/apache/pdfbox/filter/DecodeResult;", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}