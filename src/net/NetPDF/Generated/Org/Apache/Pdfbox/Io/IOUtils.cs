/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-io-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Io
{
    #region IOUtils declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html"/>
    /// </summary>
    public partial class IOUtils : MASES.JCOBridge.C2JBridge.JVMBridgeBase<IOUtils>
    {
        const string _bridgeClassName = "org.apache.pdfbox.io.IOUtils";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public IOUtils() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public IOUtils(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IOUtils implementation
    public partial class IOUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#toByteArray-java.io.InputStream-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static byte[] ToByteArray(Java.Io.InputStream arg0)
        {
            return SExecuteWithSignatureArray<byte>(LocalBridgeClazz, "toByteArray", "(Ljava/io/InputStream;)[B", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#copy-java.io.InputStream-java.io.OutputStream-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static long Copy(Java.Io.InputStream arg0, Java.Io.OutputStream arg1)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "copy", "(Ljava/io/InputStream;Ljava/io/OutputStream;)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#populateBuffer-java.io.InputStream-byte[]-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static long PopulateBuffer(Java.Io.InputStream arg0, byte[] arg1)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "populateBuffer", "(Ljava/io/InputStream;[B)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#createMemoryOnlyStreamCache--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></returns>
        public static Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction CreateMemoryOnlyStreamCache()
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction>(LocalBridgeClazz, "createMemoryOnlyStreamCache", "()Lorg/apache/pdfbox/io/RandomAccessStreamCache$StreamCacheCreateFunction;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#createTempFileOnlyStreamCache--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></returns>
        public static Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction CreateTempFileOnlyStreamCache()
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction>(LocalBridgeClazz, "createTempFileOnlyStreamCache", "()Lorg/apache/pdfbox/io/RandomAccessStreamCache$StreamCacheCreateFunction;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#closeQuietly-java.io.Closeable-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.Closeable"/></param>
        public static void CloseQuietly(Java.Io.Closeable arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "closeQuietly", "(Ljava/io/Closeable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox-io/3.0.4/org/apache/pdfbox/io/IOUtils.html#unmap-java.nio.ByteBuffer-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        public static void Unmap(Java.Nio.ByteBuffer arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "unmap", "(Ljava/nio/ByteBuffer;)V", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}