/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Printing
{
    #region PDFPrintable declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html"/>
    /// </summary>
    public partial class PDFPrintable : Java.Awt.Print.Printable
    {
        const string _bridgeClassName = "org.apache.pdfbox.printing.PDFPrintable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDFPrintable() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDFPrintable(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDFPrintable implementation
    public partial class PDFPrintable
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean,org.apache.pdfbox.rendering.PDFRenderer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Printing.Scaling"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Pdfbox.Rendering.PDFRenderer"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Printing.Scaling arg1, bool arg2, float arg3, bool arg4, Org.Apache.Pdfbox.Rendering.PDFRenderer arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Printing.Scaling"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Printing.Scaling arg1, bool arg2, float arg3, bool arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Printing.Scaling"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Printing.Scaling arg1, bool arg2, float arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Printing.Scaling"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Printing.Scaling arg1, bool arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.printing.Scaling)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Printing.Scaling"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Printing.Scaling arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#org.apache.pdfbox.printing.PDFPrintable(org.apache.pdfbox.pdmodel.PDDocument)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        public PDFPrintable(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#RASTERIZE_DPI_AUTO"/>
        /// </summary>
        public static float RASTERIZE_DPI_AUTO { get { if (!_RASTERIZE_DPI_AUTOReady) { _RASTERIZE_DPI_AUTOContent = SGetField<float>(LocalBridgeClazz, "RASTERIZE_DPI_AUTO"); _RASTERIZE_DPI_AUTOReady = true; } return _RASTERIZE_DPI_AUTOContent; } }
        private static float _RASTERIZE_DPI_AUTOContent = default;
        private static bool _RASTERIZE_DPI_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#RASTERIZE_OFF"/>
        /// </summary>
        public static float RASTERIZE_OFF { get { if (!_RASTERIZE_OFFReady) { _RASTERIZE_OFFContent = SGetField<float>(LocalBridgeClazz, "RASTERIZE_OFF"); _RASTERIZE_OFFReady = true; } return _RASTERIZE_OFFContent; } }
        private static float _RASTERIZE_OFFContent = default;
        private static bool _RASTERIZE_OFFReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#getRenderingHints--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#setRenderingHints-java.awt.RenderingHints-"/>
        /// </summary>
        public Java.Awt.RenderingHints RenderingHints
        {
            get { return IExecuteWithSignature<Java.Awt.RenderingHints>("getRenderingHints", "()Ljava/awt/RenderingHints;"); } set { IExecuteWithSignature("setRenderingHints", "(Ljava/awt/RenderingHints;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#isSubsamplingAllowed--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubsamplingAllowed()
        {
            return IExecuteWithSignature<bool>("isSubsamplingAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#print-java.awt.Graphics-java.awt.print.PageFormat-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Graphics"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Print.PageFormat"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Awt.Print.PrinterException"/>
        public int Print(Java.Awt.Graphics arg0, Java.Awt.Print.PageFormat arg1, int arg2)
        {
            return IExecuteWithSignature<int>("print", "(Ljava/awt/Graphics;Ljava/awt/print/PageFormat;I)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/printing/PDFPrintable.html#setSubsamplingAllowed-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSubsamplingAllowed(bool arg0)
        {
            IExecuteWithSignature("setSubsamplingAllowed", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}