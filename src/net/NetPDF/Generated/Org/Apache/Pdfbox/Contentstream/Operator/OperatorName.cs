/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Contentstream.Operator
{
    #region OperatorName declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html"/>
    /// </summary>
    public partial class OperatorName : MASES.JCOBridge.C2JBridge.JVMBridgeBase<OperatorName>
    {
        const string _bridgeClassName = "org.apache.pdfbox.contentstream.operator.OperatorName";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public OperatorName() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public OperatorName(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region OperatorName implementation
    public partial class OperatorName
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#APPEND_RECT"/>
        /// </summary>
        public static Java.Lang.String APPEND_RECT { get { if (!_APPEND_RECTReady) { _APPEND_RECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "APPEND_RECT"); _APPEND_RECTReady = true; } return _APPEND_RECTContent; } }
        private static Java.Lang.String _APPEND_RECTContent = default;
        private static bool _APPEND_RECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_COMPATIBILITY_SECTION"/>
        /// </summary>
        public static Java.Lang.String BEGIN_COMPATIBILITY_SECTION { get { if (!_BEGIN_COMPATIBILITY_SECTIONReady) { _BEGIN_COMPATIBILITY_SECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_COMPATIBILITY_SECTION"); _BEGIN_COMPATIBILITY_SECTIONReady = true; } return _BEGIN_COMPATIBILITY_SECTIONContent; } }
        private static Java.Lang.String _BEGIN_COMPATIBILITY_SECTIONContent = default;
        private static bool _BEGIN_COMPATIBILITY_SECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_INLINE_IMAGE"/>
        /// </summary>
        public static Java.Lang.String BEGIN_INLINE_IMAGE { get { if (!_BEGIN_INLINE_IMAGEReady) { _BEGIN_INLINE_IMAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_INLINE_IMAGE"); _BEGIN_INLINE_IMAGEReady = true; } return _BEGIN_INLINE_IMAGEContent; } }
        private static Java.Lang.String _BEGIN_INLINE_IMAGEContent = default;
        private static bool _BEGIN_INLINE_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_INLINE_IMAGE_DATA"/>
        /// </summary>
        public static Java.Lang.String BEGIN_INLINE_IMAGE_DATA { get { if (!_BEGIN_INLINE_IMAGE_DATAReady) { _BEGIN_INLINE_IMAGE_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_INLINE_IMAGE_DATA"); _BEGIN_INLINE_IMAGE_DATAReady = true; } return _BEGIN_INLINE_IMAGE_DATAContent; } }
        private static Java.Lang.String _BEGIN_INLINE_IMAGE_DATAContent = default;
        private static bool _BEGIN_INLINE_IMAGE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_MARKED_CONTENT"/>
        /// </summary>
        public static Java.Lang.String BEGIN_MARKED_CONTENT { get { if (!_BEGIN_MARKED_CONTENTReady) { _BEGIN_MARKED_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_MARKED_CONTENT"); _BEGIN_MARKED_CONTENTReady = true; } return _BEGIN_MARKED_CONTENTContent; } }
        private static Java.Lang.String _BEGIN_MARKED_CONTENTContent = default;
        private static bool _BEGIN_MARKED_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_MARKED_CONTENT_SEQ"/>
        /// </summary>
        public static Java.Lang.String BEGIN_MARKED_CONTENT_SEQ { get { if (!_BEGIN_MARKED_CONTENT_SEQReady) { _BEGIN_MARKED_CONTENT_SEQContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_MARKED_CONTENT_SEQ"); _BEGIN_MARKED_CONTENT_SEQReady = true; } return _BEGIN_MARKED_CONTENT_SEQContent; } }
        private static Java.Lang.String _BEGIN_MARKED_CONTENT_SEQContent = default;
        private static bool _BEGIN_MARKED_CONTENT_SEQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#BEGIN_TEXT"/>
        /// </summary>
        public static Java.Lang.String BEGIN_TEXT { get { if (!_BEGIN_TEXTReady) { _BEGIN_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BEGIN_TEXT"); _BEGIN_TEXTReady = true; } return _BEGIN_TEXTContent; } }
        private static Java.Lang.String _BEGIN_TEXTContent = default;
        private static bool _BEGIN_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLIP_EVEN_ODD"/>
        /// </summary>
        public static Java.Lang.String CLIP_EVEN_ODD { get { if (!_CLIP_EVEN_ODDReady) { _CLIP_EVEN_ODDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIP_EVEN_ODD"); _CLIP_EVEN_ODDReady = true; } return _CLIP_EVEN_ODDContent; } }
        private static Java.Lang.String _CLIP_EVEN_ODDContent = default;
        private static bool _CLIP_EVEN_ODDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLIP_NON_ZERO"/>
        /// </summary>
        public static Java.Lang.String CLIP_NON_ZERO { get { if (!_CLIP_NON_ZEROReady) { _CLIP_NON_ZEROContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIP_NON_ZERO"); _CLIP_NON_ZEROReady = true; } return _CLIP_NON_ZEROContent; } }
        private static Java.Lang.String _CLIP_NON_ZEROContent = default;
        private static bool _CLIP_NON_ZEROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLOSE_AND_STROKE"/>
        /// </summary>
        public static Java.Lang.String CLOSE_AND_STROKE { get { if (!_CLOSE_AND_STROKEReady) { _CLOSE_AND_STROKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_AND_STROKE"); _CLOSE_AND_STROKEReady = true; } return _CLOSE_AND_STROKEContent; } }
        private static Java.Lang.String _CLOSE_AND_STROKEContent = default;
        private static bool _CLOSE_AND_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLOSE_FILL_EVEN_ODD_AND_STROKE"/>
        /// </summary>
        public static Java.Lang.String CLOSE_FILL_EVEN_ODD_AND_STROKE { get { if (!_CLOSE_FILL_EVEN_ODD_AND_STROKEReady) { _CLOSE_FILL_EVEN_ODD_AND_STROKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_FILL_EVEN_ODD_AND_STROKE"); _CLOSE_FILL_EVEN_ODD_AND_STROKEReady = true; } return _CLOSE_FILL_EVEN_ODD_AND_STROKEContent; } }
        private static Java.Lang.String _CLOSE_FILL_EVEN_ODD_AND_STROKEContent = default;
        private static bool _CLOSE_FILL_EVEN_ODD_AND_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLOSE_FILL_NON_ZERO_AND_STROKE"/>
        /// </summary>
        public static Java.Lang.String CLOSE_FILL_NON_ZERO_AND_STROKE { get { if (!_CLOSE_FILL_NON_ZERO_AND_STROKEReady) { _CLOSE_FILL_NON_ZERO_AND_STROKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_FILL_NON_ZERO_AND_STROKE"); _CLOSE_FILL_NON_ZERO_AND_STROKEReady = true; } return _CLOSE_FILL_NON_ZERO_AND_STROKEContent; } }
        private static Java.Lang.String _CLOSE_FILL_NON_ZERO_AND_STROKEContent = default;
        private static bool _CLOSE_FILL_NON_ZERO_AND_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CLOSE_PATH"/>
        /// </summary>
        public static Java.Lang.String CLOSE_PATH { get { if (!_CLOSE_PATHReady) { _CLOSE_PATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSE_PATH"); _CLOSE_PATHReady = true; } return _CLOSE_PATHContent; } }
        private static Java.Lang.String _CLOSE_PATHContent = default;
        private static bool _CLOSE_PATHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CONCAT"/>
        /// </summary>
        public static Java.Lang.String CONCAT { get { if (!_CONCATReady) { _CONCATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONCAT"); _CONCATReady = true; } return _CONCATContent; } }
        private static Java.Lang.String _CONCATContent = default;
        private static bool _CONCATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CURVE_TO"/>
        /// </summary>
        public static Java.Lang.String CURVE_TO { get { if (!_CURVE_TOReady) { _CURVE_TOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CURVE_TO"); _CURVE_TOReady = true; } return _CURVE_TOContent; } }
        private static Java.Lang.String _CURVE_TOContent = default;
        private static bool _CURVE_TOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CURVE_TO_REPLICATE_FINAL_POINT"/>
        /// </summary>
        public static Java.Lang.String CURVE_TO_REPLICATE_FINAL_POINT { get { if (!_CURVE_TO_REPLICATE_FINAL_POINTReady) { _CURVE_TO_REPLICATE_FINAL_POINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CURVE_TO_REPLICATE_FINAL_POINT"); _CURVE_TO_REPLICATE_FINAL_POINTReady = true; } return _CURVE_TO_REPLICATE_FINAL_POINTContent; } }
        private static Java.Lang.String _CURVE_TO_REPLICATE_FINAL_POINTContent = default;
        private static bool _CURVE_TO_REPLICATE_FINAL_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#CURVE_TO_REPLICATE_INITIAL_POINT"/>
        /// </summary>
        public static Java.Lang.String CURVE_TO_REPLICATE_INITIAL_POINT { get { if (!_CURVE_TO_REPLICATE_INITIAL_POINTReady) { _CURVE_TO_REPLICATE_INITIAL_POINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CURVE_TO_REPLICATE_INITIAL_POINT"); _CURVE_TO_REPLICATE_INITIAL_POINTReady = true; } return _CURVE_TO_REPLICATE_INITIAL_POINTContent; } }
        private static Java.Lang.String _CURVE_TO_REPLICATE_INITIAL_POINTContent = default;
        private static bool _CURVE_TO_REPLICATE_INITIAL_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#DRAW_OBJECT"/>
        /// </summary>
        public static Java.Lang.String DRAW_OBJECT { get { if (!_DRAW_OBJECTReady) { _DRAW_OBJECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DRAW_OBJECT"); _DRAW_OBJECTReady = true; } return _DRAW_OBJECTContent; } }
        private static Java.Lang.String _DRAW_OBJECTContent = default;
        private static bool _DRAW_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#END_COMPATIBILITY_SECTION"/>
        /// </summary>
        public static Java.Lang.String END_COMPATIBILITY_SECTION { get { if (!_END_COMPATIBILITY_SECTIONReady) { _END_COMPATIBILITY_SECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_COMPATIBILITY_SECTION"); _END_COMPATIBILITY_SECTIONReady = true; } return _END_COMPATIBILITY_SECTIONContent; } }
        private static Java.Lang.String _END_COMPATIBILITY_SECTIONContent = default;
        private static bool _END_COMPATIBILITY_SECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#END_INLINE_IMAGE"/>
        /// </summary>
        public static Java.Lang.String END_INLINE_IMAGE { get { if (!_END_INLINE_IMAGEReady) { _END_INLINE_IMAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_INLINE_IMAGE"); _END_INLINE_IMAGEReady = true; } return _END_INLINE_IMAGEContent; } }
        private static Java.Lang.String _END_INLINE_IMAGEContent = default;
        private static bool _END_INLINE_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#END_MARKED_CONTENT"/>
        /// </summary>
        public static Java.Lang.String END_MARKED_CONTENT { get { if (!_END_MARKED_CONTENTReady) { _END_MARKED_CONTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_MARKED_CONTENT"); _END_MARKED_CONTENTReady = true; } return _END_MARKED_CONTENTContent; } }
        private static Java.Lang.String _END_MARKED_CONTENTContent = default;
        private static bool _END_MARKED_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#END_TEXT"/>
        /// </summary>
        public static Java.Lang.String END_TEXT { get { if (!_END_TEXTReady) { _END_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_TEXT"); _END_TEXTReady = true; } return _END_TEXTContent; } }
        private static Java.Lang.String _END_TEXTContent = default;
        private static bool _END_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#ENDPATH"/>
        /// </summary>
        public static Java.Lang.String ENDPATH { get { if (!_ENDPATHReady) { _ENDPATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENDPATH"); _ENDPATHReady = true; } return _ENDPATHContent; } }
        private static Java.Lang.String _ENDPATHContent = default;
        private static bool _ENDPATHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#FILL_EVEN_ODD"/>
        /// </summary>
        public static Java.Lang.String FILL_EVEN_ODD { get { if (!_FILL_EVEN_ODDReady) { _FILL_EVEN_ODDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FILL_EVEN_ODD"); _FILL_EVEN_ODDReady = true; } return _FILL_EVEN_ODDContent; } }
        private static Java.Lang.String _FILL_EVEN_ODDContent = default;
        private static bool _FILL_EVEN_ODDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#FILL_EVEN_ODD_AND_STROKE"/>
        /// </summary>
        public static Java.Lang.String FILL_EVEN_ODD_AND_STROKE { get { if (!_FILL_EVEN_ODD_AND_STROKEReady) { _FILL_EVEN_ODD_AND_STROKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FILL_EVEN_ODD_AND_STROKE"); _FILL_EVEN_ODD_AND_STROKEReady = true; } return _FILL_EVEN_ODD_AND_STROKEContent; } }
        private static Java.Lang.String _FILL_EVEN_ODD_AND_STROKEContent = default;
        private static bool _FILL_EVEN_ODD_AND_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#FILL_NON_ZERO"/>
        /// </summary>
        public static Java.Lang.String FILL_NON_ZERO { get { if (!_FILL_NON_ZEROReady) { _FILL_NON_ZEROContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FILL_NON_ZERO"); _FILL_NON_ZEROReady = true; } return _FILL_NON_ZEROContent; } }
        private static Java.Lang.String _FILL_NON_ZEROContent = default;
        private static bool _FILL_NON_ZEROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#FILL_NON_ZERO_AND_STROKE"/>
        /// </summary>
        public static Java.Lang.String FILL_NON_ZERO_AND_STROKE { get { if (!_FILL_NON_ZERO_AND_STROKEReady) { _FILL_NON_ZERO_AND_STROKEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FILL_NON_ZERO_AND_STROKE"); _FILL_NON_ZERO_AND_STROKEReady = true; } return _FILL_NON_ZERO_AND_STROKEContent; } }
        private static Java.Lang.String _FILL_NON_ZERO_AND_STROKEContent = default;
        private static bool _FILL_NON_ZERO_AND_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#LEGACY_FILL_NON_ZERO"/>
        /// </summary>
        public static Java.Lang.String LEGACY_FILL_NON_ZERO { get { if (!_LEGACY_FILL_NON_ZEROReady) { _LEGACY_FILL_NON_ZEROContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LEGACY_FILL_NON_ZERO"); _LEGACY_FILL_NON_ZEROReady = true; } return _LEGACY_FILL_NON_ZEROContent; } }
        private static Java.Lang.String _LEGACY_FILL_NON_ZEROContent = default;
        private static bool _LEGACY_FILL_NON_ZEROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#LINE_TO"/>
        /// </summary>
        public static Java.Lang.String LINE_TO { get { if (!_LINE_TOReady) { _LINE_TOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LINE_TO"); _LINE_TOReady = true; } return _LINE_TOContent; } }
        private static Java.Lang.String _LINE_TOContent = default;
        private static bool _LINE_TOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#MARKED_CONTENT_POINT"/>
        /// </summary>
        public static Java.Lang.String MARKED_CONTENT_POINT { get { if (!_MARKED_CONTENT_POINTReady) { _MARKED_CONTENT_POINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MARKED_CONTENT_POINT"); _MARKED_CONTENT_POINTReady = true; } return _MARKED_CONTENT_POINTContent; } }
        private static Java.Lang.String _MARKED_CONTENT_POINTContent = default;
        private static bool _MARKED_CONTENT_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#MARKED_CONTENT_POINT_WITH_PROPS"/>
        /// </summary>
        public static Java.Lang.String MARKED_CONTENT_POINT_WITH_PROPS { get { if (!_MARKED_CONTENT_POINT_WITH_PROPSReady) { _MARKED_CONTENT_POINT_WITH_PROPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MARKED_CONTENT_POINT_WITH_PROPS"); _MARKED_CONTENT_POINT_WITH_PROPSReady = true; } return _MARKED_CONTENT_POINT_WITH_PROPSContent; } }
        private static Java.Lang.String _MARKED_CONTENT_POINT_WITH_PROPSContent = default;
        private static bool _MARKED_CONTENT_POINT_WITH_PROPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#MOVE_TEXT"/>
        /// </summary>
        public static Java.Lang.String MOVE_TEXT { get { if (!_MOVE_TEXTReady) { _MOVE_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOVE_TEXT"); _MOVE_TEXTReady = true; } return _MOVE_TEXTContent; } }
        private static Java.Lang.String _MOVE_TEXTContent = default;
        private static bool _MOVE_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#MOVE_TEXT_SET_LEADING"/>
        /// </summary>
        public static Java.Lang.String MOVE_TEXT_SET_LEADING { get { if (!_MOVE_TEXT_SET_LEADINGReady) { _MOVE_TEXT_SET_LEADINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOVE_TEXT_SET_LEADING"); _MOVE_TEXT_SET_LEADINGReady = true; } return _MOVE_TEXT_SET_LEADINGContent; } }
        private static Java.Lang.String _MOVE_TEXT_SET_LEADINGContent = default;
        private static bool _MOVE_TEXT_SET_LEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#MOVE_TO"/>
        /// </summary>
        public static Java.Lang.String MOVE_TO { get { if (!_MOVE_TOReady) { _MOVE_TOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MOVE_TO"); _MOVE_TOReady = true; } return _MOVE_TOContent; } }
        private static Java.Lang.String _MOVE_TOContent = default;
        private static bool _MOVE_TOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NEXT_LINE"/>
        /// </summary>
        public static Java.Lang.String NEXT_LINE { get { if (!_NEXT_LINEReady) { _NEXT_LINEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NEXT_LINE"); _NEXT_LINEReady = true; } return _NEXT_LINEContent; } }
        private static Java.Lang.String _NEXT_LINEContent = default;
        private static bool _NEXT_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_CMYK"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_CMYK { get { if (!_NON_STROKING_CMYKReady) { _NON_STROKING_CMYKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_CMYK"); _NON_STROKING_CMYKReady = true; } return _NON_STROKING_CMYKContent; } }
        private static Java.Lang.String _NON_STROKING_CMYKContent = default;
        private static bool _NON_STROKING_CMYKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_COLOR"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_COLOR { get { if (!_NON_STROKING_COLORReady) { _NON_STROKING_COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_COLOR"); _NON_STROKING_COLORReady = true; } return _NON_STROKING_COLORContent; } }
        private static Java.Lang.String _NON_STROKING_COLORContent = default;
        private static bool _NON_STROKING_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_COLOR_N"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_COLOR_N { get { if (!_NON_STROKING_COLOR_NReady) { _NON_STROKING_COLOR_NContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_COLOR_N"); _NON_STROKING_COLOR_NReady = true; } return _NON_STROKING_COLOR_NContent; } }
        private static Java.Lang.String _NON_STROKING_COLOR_NContent = default;
        private static bool _NON_STROKING_COLOR_NReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_COLORSPACE"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_COLORSPACE { get { if (!_NON_STROKING_COLORSPACEReady) { _NON_STROKING_COLORSPACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_COLORSPACE"); _NON_STROKING_COLORSPACEReady = true; } return _NON_STROKING_COLORSPACEContent; } }
        private static Java.Lang.String _NON_STROKING_COLORSPACEContent = default;
        private static bool _NON_STROKING_COLORSPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_GRAY"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_GRAY { get { if (!_NON_STROKING_GRAYReady) { _NON_STROKING_GRAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_GRAY"); _NON_STROKING_GRAYReady = true; } return _NON_STROKING_GRAYContent; } }
        private static Java.Lang.String _NON_STROKING_GRAYContent = default;
        private static bool _NON_STROKING_GRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#NON_STROKING_RGB"/>
        /// </summary>
        public static Java.Lang.String NON_STROKING_RGB { get { if (!_NON_STROKING_RGBReady) { _NON_STROKING_RGBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NON_STROKING_RGB"); _NON_STROKING_RGBReady = true; } return _NON_STROKING_RGBContent; } }
        private static Java.Lang.String _NON_STROKING_RGBContent = default;
        private static bool _NON_STROKING_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#RESTORE"/>
        /// </summary>
        public static Java.Lang.String RESTORE { get { if (!_RESTOREReady) { _RESTOREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESTORE"); _RESTOREReady = true; } return _RESTOREContent; } }
        private static Java.Lang.String _RESTOREContent = default;
        private static bool _RESTOREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SAVE"/>
        /// </summary>
        public static Java.Lang.String SAVE { get { if (!_SAVEReady) { _SAVEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SAVE"); _SAVEReady = true; } return _SAVEContent; } }
        private static Java.Lang.String _SAVEContent = default;
        private static bool _SAVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_CHAR_SPACING"/>
        /// </summary>
        public static Java.Lang.String SET_CHAR_SPACING { get { if (!_SET_CHAR_SPACINGReady) { _SET_CHAR_SPACINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_CHAR_SPACING"); _SET_CHAR_SPACINGReady = true; } return _SET_CHAR_SPACINGContent; } }
        private static Java.Lang.String _SET_CHAR_SPACINGContent = default;
        private static bool _SET_CHAR_SPACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_FLATNESS"/>
        /// </summary>
        public static Java.Lang.String SET_FLATNESS { get { if (!_SET_FLATNESSReady) { _SET_FLATNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_FLATNESS"); _SET_FLATNESSReady = true; } return _SET_FLATNESSContent; } }
        private static Java.Lang.String _SET_FLATNESSContent = default;
        private static bool _SET_FLATNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_FONT_AND_SIZE"/>
        /// </summary>
        public static Java.Lang.String SET_FONT_AND_SIZE { get { if (!_SET_FONT_AND_SIZEReady) { _SET_FONT_AND_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_FONT_AND_SIZE"); _SET_FONT_AND_SIZEReady = true; } return _SET_FONT_AND_SIZEContent; } }
        private static Java.Lang.String _SET_FONT_AND_SIZEContent = default;
        private static bool _SET_FONT_AND_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_GRAPHICS_STATE_PARAMS"/>
        /// </summary>
        public static Java.Lang.String SET_GRAPHICS_STATE_PARAMS { get { if (!_SET_GRAPHICS_STATE_PARAMSReady) { _SET_GRAPHICS_STATE_PARAMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_GRAPHICS_STATE_PARAMS"); _SET_GRAPHICS_STATE_PARAMSReady = true; } return _SET_GRAPHICS_STATE_PARAMSContent; } }
        private static Java.Lang.String _SET_GRAPHICS_STATE_PARAMSContent = default;
        private static bool _SET_GRAPHICS_STATE_PARAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_LINE_CAPSTYLE"/>
        /// </summary>
        public static Java.Lang.String SET_LINE_CAPSTYLE { get { if (!_SET_LINE_CAPSTYLEReady) { _SET_LINE_CAPSTYLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_LINE_CAPSTYLE"); _SET_LINE_CAPSTYLEReady = true; } return _SET_LINE_CAPSTYLEContent; } }
        private static Java.Lang.String _SET_LINE_CAPSTYLEContent = default;
        private static bool _SET_LINE_CAPSTYLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_LINE_DASHPATTERN"/>
        /// </summary>
        public static Java.Lang.String SET_LINE_DASHPATTERN { get { if (!_SET_LINE_DASHPATTERNReady) { _SET_LINE_DASHPATTERNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_LINE_DASHPATTERN"); _SET_LINE_DASHPATTERNReady = true; } return _SET_LINE_DASHPATTERNContent; } }
        private static Java.Lang.String _SET_LINE_DASHPATTERNContent = default;
        private static bool _SET_LINE_DASHPATTERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_LINE_JOINSTYLE"/>
        /// </summary>
        public static Java.Lang.String SET_LINE_JOINSTYLE { get { if (!_SET_LINE_JOINSTYLEReady) { _SET_LINE_JOINSTYLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_LINE_JOINSTYLE"); _SET_LINE_JOINSTYLEReady = true; } return _SET_LINE_JOINSTYLEContent; } }
        private static Java.Lang.String _SET_LINE_JOINSTYLEContent = default;
        private static bool _SET_LINE_JOINSTYLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_LINE_MITERLIMIT"/>
        /// </summary>
        public static Java.Lang.String SET_LINE_MITERLIMIT { get { if (!_SET_LINE_MITERLIMITReady) { _SET_LINE_MITERLIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_LINE_MITERLIMIT"); _SET_LINE_MITERLIMITReady = true; } return _SET_LINE_MITERLIMITContent; } }
        private static Java.Lang.String _SET_LINE_MITERLIMITContent = default;
        private static bool _SET_LINE_MITERLIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_LINE_WIDTH"/>
        /// </summary>
        public static Java.Lang.String SET_LINE_WIDTH { get { if (!_SET_LINE_WIDTHReady) { _SET_LINE_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_LINE_WIDTH"); _SET_LINE_WIDTHReady = true; } return _SET_LINE_WIDTHContent; } }
        private static Java.Lang.String _SET_LINE_WIDTHContent = default;
        private static bool _SET_LINE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_MATRIX"/>
        /// </summary>
        public static Java.Lang.String SET_MATRIX { get { if (!_SET_MATRIXReady) { _SET_MATRIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_MATRIX"); _SET_MATRIXReady = true; } return _SET_MATRIXContent; } }
        private static Java.Lang.String _SET_MATRIXContent = default;
        private static bool _SET_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_RENDERINGINTENT"/>
        /// </summary>
        public static Java.Lang.String SET_RENDERINGINTENT { get { if (!_SET_RENDERINGINTENTReady) { _SET_RENDERINGINTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_RENDERINGINTENT"); _SET_RENDERINGINTENTReady = true; } return _SET_RENDERINGINTENTContent; } }
        private static Java.Lang.String _SET_RENDERINGINTENTContent = default;
        private static bool _SET_RENDERINGINTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_TEXT_HORIZONTAL_SCALING"/>
        /// </summary>
        public static Java.Lang.String SET_TEXT_HORIZONTAL_SCALING { get { if (!_SET_TEXT_HORIZONTAL_SCALINGReady) { _SET_TEXT_HORIZONTAL_SCALINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TEXT_HORIZONTAL_SCALING"); _SET_TEXT_HORIZONTAL_SCALINGReady = true; } return _SET_TEXT_HORIZONTAL_SCALINGContent; } }
        private static Java.Lang.String _SET_TEXT_HORIZONTAL_SCALINGContent = default;
        private static bool _SET_TEXT_HORIZONTAL_SCALINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_TEXT_LEADING"/>
        /// </summary>
        public static Java.Lang.String SET_TEXT_LEADING { get { if (!_SET_TEXT_LEADINGReady) { _SET_TEXT_LEADINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TEXT_LEADING"); _SET_TEXT_LEADINGReady = true; } return _SET_TEXT_LEADINGContent; } }
        private static Java.Lang.String _SET_TEXT_LEADINGContent = default;
        private static bool _SET_TEXT_LEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_TEXT_RENDERINGMODE"/>
        /// </summary>
        public static Java.Lang.String SET_TEXT_RENDERINGMODE { get { if (!_SET_TEXT_RENDERINGMODEReady) { _SET_TEXT_RENDERINGMODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TEXT_RENDERINGMODE"); _SET_TEXT_RENDERINGMODEReady = true; } return _SET_TEXT_RENDERINGMODEContent; } }
        private static Java.Lang.String _SET_TEXT_RENDERINGMODEContent = default;
        private static bool _SET_TEXT_RENDERINGMODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_TEXT_RISE"/>
        /// </summary>
        public static Java.Lang.String SET_TEXT_RISE { get { if (!_SET_TEXT_RISEReady) { _SET_TEXT_RISEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_TEXT_RISE"); _SET_TEXT_RISEReady = true; } return _SET_TEXT_RISEContent; } }
        private static Java.Lang.String _SET_TEXT_RISEContent = default;
        private static bool _SET_TEXT_RISEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SET_WORD_SPACING"/>
        /// </summary>
        public static Java.Lang.String SET_WORD_SPACING { get { if (!_SET_WORD_SPACINGReady) { _SET_WORD_SPACINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SET_WORD_SPACING"); _SET_WORD_SPACINGReady = true; } return _SET_WORD_SPACINGContent; } }
        private static Java.Lang.String _SET_WORD_SPACINGContent = default;
        private static bool _SET_WORD_SPACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SHADING_FILL"/>
        /// </summary>
        public static Java.Lang.String SHADING_FILL { get { if (!_SHADING_FILLReady) { _SHADING_FILLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHADING_FILL"); _SHADING_FILLReady = true; } return _SHADING_FILLContent; } }
        private static Java.Lang.String _SHADING_FILLContent = default;
        private static bool _SHADING_FILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SHOW_TEXT"/>
        /// </summary>
        public static Java.Lang.String SHOW_TEXT { get { if (!_SHOW_TEXTReady) { _SHOW_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_TEXT"); _SHOW_TEXTReady = true; } return _SHOW_TEXTContent; } }
        private static Java.Lang.String _SHOW_TEXTContent = default;
        private static bool _SHOW_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SHOW_TEXT_ADJUSTED"/>
        /// </summary>
        public static Java.Lang.String SHOW_TEXT_ADJUSTED { get { if (!_SHOW_TEXT_ADJUSTEDReady) { _SHOW_TEXT_ADJUSTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_TEXT_ADJUSTED"); _SHOW_TEXT_ADJUSTEDReady = true; } return _SHOW_TEXT_ADJUSTEDContent; } }
        private static Java.Lang.String _SHOW_TEXT_ADJUSTEDContent = default;
        private static bool _SHOW_TEXT_ADJUSTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SHOW_TEXT_LINE"/>
        /// </summary>
        public static Java.Lang.String SHOW_TEXT_LINE { get { if (!_SHOW_TEXT_LINEReady) { _SHOW_TEXT_LINEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_TEXT_LINE"); _SHOW_TEXT_LINEReady = true; } return _SHOW_TEXT_LINEContent; } }
        private static Java.Lang.String _SHOW_TEXT_LINEContent = default;
        private static bool _SHOW_TEXT_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#SHOW_TEXT_LINE_AND_SPACE"/>
        /// </summary>
        public static Java.Lang.String SHOW_TEXT_LINE_AND_SPACE { get { if (!_SHOW_TEXT_LINE_AND_SPACEReady) { _SHOW_TEXT_LINE_AND_SPACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_TEXT_LINE_AND_SPACE"); _SHOW_TEXT_LINE_AND_SPACEReady = true; } return _SHOW_TEXT_LINE_AND_SPACEContent; } }
        private static Java.Lang.String _SHOW_TEXT_LINE_AND_SPACEContent = default;
        private static bool _SHOW_TEXT_LINE_AND_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKE_PATH"/>
        /// </summary>
        public static Java.Lang.String STROKE_PATH { get { if (!_STROKE_PATHReady) { _STROKE_PATHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKE_PATH"); _STROKE_PATHReady = true; } return _STROKE_PATHContent; } }
        private static Java.Lang.String _STROKE_PATHContent = default;
        private static bool _STROKE_PATHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLOR"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLOR { get { if (!_STROKING_COLORReady) { _STROKING_COLORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLOR"); _STROKING_COLORReady = true; } return _STROKING_COLORContent; } }
        private static Java.Lang.String _STROKING_COLORContent = default;
        private static bool _STROKING_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLOR_CMYK"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLOR_CMYK { get { if (!_STROKING_COLOR_CMYKReady) { _STROKING_COLOR_CMYKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLOR_CMYK"); _STROKING_COLOR_CMYKReady = true; } return _STROKING_COLOR_CMYKContent; } }
        private static Java.Lang.String _STROKING_COLOR_CMYKContent = default;
        private static bool _STROKING_COLOR_CMYKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLOR_GRAY"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLOR_GRAY { get { if (!_STROKING_COLOR_GRAYReady) { _STROKING_COLOR_GRAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLOR_GRAY"); _STROKING_COLOR_GRAYReady = true; } return _STROKING_COLOR_GRAYContent; } }
        private static Java.Lang.String _STROKING_COLOR_GRAYContent = default;
        private static bool _STROKING_COLOR_GRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLOR_N"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLOR_N { get { if (!_STROKING_COLOR_NReady) { _STROKING_COLOR_NContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLOR_N"); _STROKING_COLOR_NReady = true; } return _STROKING_COLOR_NContent; } }
        private static Java.Lang.String _STROKING_COLOR_NContent = default;
        private static bool _STROKING_COLOR_NReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLOR_RGB"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLOR_RGB { get { if (!_STROKING_COLOR_RGBReady) { _STROKING_COLOR_RGBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLOR_RGB"); _STROKING_COLOR_RGBReady = true; } return _STROKING_COLOR_RGBContent; } }
        private static Java.Lang.String _STROKING_COLOR_RGBContent = default;
        private static bool _STROKING_COLOR_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#STROKING_COLORSPACE"/>
        /// </summary>
        public static Java.Lang.String STROKING_COLORSPACE { get { if (!_STROKING_COLORSPACEReady) { _STROKING_COLORSPACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STROKING_COLORSPACE"); _STROKING_COLORSPACEReady = true; } return _STROKING_COLORSPACEContent; } }
        private static Java.Lang.String _STROKING_COLORSPACEContent = default;
        private static bool _STROKING_COLORSPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#TYPE3_D0"/>
        /// </summary>
        public static Java.Lang.String TYPE3_D0 { get { if (!_TYPE3_D0Ready) { _TYPE3_D0Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE3_D0"); _TYPE3_D0Ready = true; } return _TYPE3_D0Content; } }
        private static Java.Lang.String _TYPE3_D0Content = default;
        private static bool _TYPE3_D0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/contentstream/operator/OperatorName.html#TYPE3_D1"/>
        /// </summary>
        public static Java.Lang.String TYPE3_D1 { get { if (!_TYPE3_D1Ready) { _TYPE3_D1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE3_D1"); _TYPE3_D1Ready = true; } return _TYPE3_D1Content; } }
        private static Java.Lang.String _TYPE3_D1Content = default;
        private static bool _TYPE3_D1Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}