/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Util.Filetypedetector
{
    #region FileType declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html"/>
    /// </summary>
    public partial class FileType : Java.Lang.Enum<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>
    {
        const string _bridgeClassName = "org.apache.pdfbox.util.filetypedetector.FileType";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FileType() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FileType(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region FileType implementation
    public partial class FileType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#ARW"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType ARW { get { if (!_ARWReady) { _ARWContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "ARW"); _ARWReady = true; } return _ARWContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _ARWContent = default;
        private static bool _ARWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#BMP"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType BMP { get { if (!_BMPReady) { _BMPContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "BMP"); _BMPReady = true; } return _BMPContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _BMPContent = default;
        private static bool _BMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#CR2"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType CR2 { get { if (!_CR2Ready) { _CR2Content = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "CR2"); _CR2Ready = true; } return _CR2Content; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _CR2Content = default;
        private static bool _CR2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#CRW"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType CRW { get { if (!_CRWReady) { _CRWContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "CRW"); _CRWReady = true; } return _CRWContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _CRWContent = default;
        private static bool _CRWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#GIF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType GIF { get { if (!_GIFReady) { _GIFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "GIF"); _GIFReady = true; } return _GIFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _GIFContent = default;
        private static bool _GIFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#ICO"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType ICO { get { if (!_ICOReady) { _ICOContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "ICO"); _ICOReady = true; } return _ICOContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _ICOContent = default;
        private static bool _ICOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#JPEG"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType JPEG { get { if (!_JPEGReady) { _JPEGContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "JPEG"); _JPEGReady = true; } return _JPEGContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _JPEGContent = default;
        private static bool _JPEGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#NEF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType NEF { get { if (!_NEFReady) { _NEFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "NEF"); _NEFReady = true; } return _NEFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _NEFContent = default;
        private static bool _NEFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#ORF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType ORF { get { if (!_ORFReady) { _ORFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "ORF"); _ORFReady = true; } return _ORFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _ORFContent = default;
        private static bool _ORFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#PCX"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType PCX { get { if (!_PCXReady) { _PCXContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "PCX"); _PCXReady = true; } return _PCXContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _PCXContent = default;
        private static bool _PCXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#PNG"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType PNG { get { if (!_PNGReady) { _PNGContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "PNG"); _PNGReady = true; } return _PNGContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _PNGContent = default;
        private static bool _PNGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#PSD"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType PSD { get { if (!_PSDReady) { _PSDContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "PSD"); _PSDReady = true; } return _PSDContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _PSDContent = default;
        private static bool _PSDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#RAF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType RAF { get { if (!_RAFReady) { _RAFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "RAF"); _RAFReady = true; } return _RAFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _RAFContent = default;
        private static bool _RAFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#RIFF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType RIFF { get { if (!_RIFFReady) { _RIFFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "RIFF"); _RIFFReady = true; } return _RIFFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _RIFFContent = default;
        private static bool _RIFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#RW2"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType RW2 { get { if (!_RW2Ready) { _RW2Content = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "RW2"); _RW2Ready = true; } return _RW2Content; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _RW2Content = default;
        private static bool _RW2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#TIFF"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType TIFF { get { if (!_TIFFReady) { _TIFFContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "TIFF"); _TIFFReady = true; } return _TIFFContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _TIFFContent = default;
        private static bool _TIFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#UNKNOWN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
        private static Org.Apache.Pdfbox.Util.Filetypedetector.FileType _UNKNOWNContent = default;
        private static bool _UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#valueOf-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Filetypedetector.FileType"/></returns>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/util/filetypedetector/FileType;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/util/filetypedetector/FileType.html#values--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Filetypedetector.FileType"/></returns>
        public static Org.Apache.Pdfbox.Util.Filetypedetector.FileType[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Util.Filetypedetector.FileType>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/util/filetypedetector/FileType;");
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}