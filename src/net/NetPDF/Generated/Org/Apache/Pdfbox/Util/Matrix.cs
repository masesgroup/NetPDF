/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Util
{
    #region Matrix declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html"/>
    /// </summary>
    public partial class Matrix : Java.Lang.Cloneable
    {
        const string _bridgeClassName = "org.apache.pdfbox.util.Matrix";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Matrix() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Matrix(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Matrix implementation
    public partial class Matrix
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#org.apache.pdfbox.util.Matrix(float,float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        public Matrix(float arg0, float arg1, float arg2, float arg3, float arg4, float arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#org.apache.pdfbox.util.Matrix(java.awt.geom.AffineTransform)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Geom.AffineTransform"/></param>
        public Matrix(Java.Awt.Geom.AffineTransform arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#SIZE"/>
        /// </summary>
        public static int SIZE { get { if (!_SIZEReady) { _SIZEContent = SGetField<int>(LocalBridgeClazz, "SIZE"); _SIZEReady = true; } return _SIZEContent; } }
        private static int _SIZEContent = default;
        private static bool _SIZEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#concatenate-org.apache.pdfbox.util.Matrix-org.apache.pdfbox.util.Matrix-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Util.Matrix"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Util.Matrix"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public static Org.Apache.Pdfbox.Util.Matrix Concatenate(Org.Apache.Pdfbox.Util.Matrix arg0, Org.Apache.Pdfbox.Util.Matrix arg1)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>(LocalBridgeClazz, "concatenate", "(Lorg/apache/pdfbox/util/Matrix;Lorg/apache/pdfbox/util/Matrix;)Lorg/apache/pdfbox/util/Matrix;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#createMatrix-org.apache.pdfbox.cos.COSBase-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public static Org.Apache.Pdfbox.Util.Matrix CreateMatrix(Org.Apache.Pdfbox.Cos.COSBase arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>(LocalBridgeClazz, "createMatrix", "(Lorg/apache/pdfbox/cos/COSBase;)Lorg/apache/pdfbox/util/Matrix;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getRotateInstance-double-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public static Org.Apache.Pdfbox.Util.Matrix GetRotateInstance(double arg0, float arg1, float arg2)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>(LocalBridgeClazz, "getRotateInstance", "(DFF)Lorg/apache/pdfbox/util/Matrix;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getScaleInstance-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public static Org.Apache.Pdfbox.Util.Matrix GetScaleInstance(float arg0, float arg1)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>(LocalBridgeClazz, "getScaleInstance", "(FF)Lorg/apache/pdfbox/util/Matrix;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getTranslateInstance-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public static Org.Apache.Pdfbox.Util.Matrix GetTranslateInstance(float arg0, float arg1)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>(LocalBridgeClazz, "getTranslateInstance", "(FF)Lorg/apache/pdfbox/util/Matrix;", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getScaleX--"/> 
        /// </summary>
        public float ScaleX
        {
            get { return IExecuteWithSignature<float>("getScaleX", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getScaleY--"/> 
        /// </summary>
        public float ScaleY
        {
            get { return IExecuteWithSignature<float>("getScaleY", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getScalingFactorX--"/> 
        /// </summary>
        public float ScalingFactorX
        {
            get { return IExecuteWithSignature<float>("getScalingFactorX", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getScalingFactorY--"/> 
        /// </summary>
        public float ScalingFactorY
        {
            get { return IExecuteWithSignature<float>("getScalingFactorY", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getShearX--"/> 
        /// </summary>
        public float ShearX
        {
            get { return IExecuteWithSignature<float>("getShearX", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getShearY--"/> 
        /// </summary>
        public float ShearY
        {
            get { return IExecuteWithSignature<float>("getShearY", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getTranslateX--"/> 
        /// </summary>
        public float TranslateX
        {
            get { return IExecuteWithSignature<float>("getTranslateX", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getTranslateY--"/> 
        /// </summary>
        public float TranslateY
        {
            get { return IExecuteWithSignature<float>("getTranslateY", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getValues--"/> 
        /// </summary>
        public float[] Values
        {
            get { return IExecuteWithSignatureArray<float>("getValues", "()[[F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#getValue-int-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetValue(int arg0, int arg1)
        {
            return IExecuteWithSignature<float>("getValue", "(II)F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#createAffineTransform--"/>
        /// </summary>
        /// <returns><see cref="Java.Awt.Geom.AffineTransform"/></returns>
        public Java.Awt.Geom.AffineTransform CreateAffineTransform()
        {
            return IExecuteWithSignature<Java.Awt.Geom.AffineTransform>("createAffineTransform", "()Ljava/awt/geom/AffineTransform;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#transformPoint-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Java.Awt.Geom.Point2D.Float"/></returns>
        public Java.Awt.Geom.Point2D.Float TransformPoint(float arg0, float arg1)
        {
            return IExecuteWithSignature<Java.Awt.Geom.Point2D.Float>("transformPoint", "(FF)Ljava/awt/geom/Point2D$Float;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#toCOSArray--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSArray"/></returns>
        public Org.Apache.Pdfbox.Cos.COSArray ToCOSArray()
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSArray>("toCOSArray", "()Lorg/apache/pdfbox/cos/COSArray;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#clone--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public Org.Apache.Pdfbox.Util.Matrix Clone()
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>("clone", "()Lorg/apache/pdfbox/util/Matrix;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#multiply-org.apache.pdfbox.util.Matrix-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Util.Matrix"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Matrix"/></returns>
        public Org.Apache.Pdfbox.Util.Matrix Multiply(Org.Apache.Pdfbox.Util.Matrix arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>("multiply", "(Lorg/apache/pdfbox/util/Matrix;)Lorg/apache/pdfbox/util/Matrix;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#transform-org.apache.pdfbox.util.Vector-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Util.Vector"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Vector"/></returns>
        public Org.Apache.Pdfbox.Util.Vector Transform(Org.Apache.Pdfbox.Util.Vector arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Vector>("transform", "(Lorg/apache/pdfbox/util/Vector;)Lorg/apache/pdfbox/util/Vector;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#concatenate-org.apache.pdfbox.util.Matrix-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Util.Matrix"/></param>
        public void Concatenate(Org.Apache.Pdfbox.Util.Matrix arg0)
        {
            IExecuteWithSignature("concatenate", "(Lorg/apache/pdfbox/util/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#rotate-double-"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        public void Rotate(double arg0)
        {
            IExecuteWithSignature("rotate", "(D)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#scale-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void Scale(float arg0, float arg1)
        {
            IExecuteWithSignature("scale", "(FF)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#setValue-int-int-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public void SetValue(int arg0, int arg1, float arg2)
        {
            IExecuteWithSignature("setValue", "(IIF)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#transform-java.awt.geom.Point2D-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Geom.Point2D"/></param>
        public void Transform(Java.Awt.Geom.Point2D arg0)
        {
            IExecuteWithSignature("transform", "(Ljava/awt/geom/Point2D;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#translate-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void Translate(float arg0, float arg1)
        {
            IExecuteWithSignature("translate", "(FF)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/util/Matrix.html#translate-org.apache.pdfbox.util.Vector-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Util.Vector"/></param>
        public void Translate(Org.Apache.Pdfbox.Util.Vector arg0)
        {
            IExecuteWithSignature("translate", "(Lorg/apache/pdfbox/util/Vector;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}