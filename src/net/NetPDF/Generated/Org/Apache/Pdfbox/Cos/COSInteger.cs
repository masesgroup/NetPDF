/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Cos
{
    #region COSInteger declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html"/>
    /// </summary>
    public partial class COSInteger : Org.Apache.Pdfbox.Cos.COSNumber
    {
        const string _bridgeClassName = "org.apache.pdfbox.cos.COSInteger";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public COSInteger() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public COSInteger(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region COSInteger implementation
    public partial class COSInteger
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#ONE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Cos.COSInteger ONE { get { if (!_ONEReady) { _ONEContent = SGetField<Org.Apache.Pdfbox.Cos.COSInteger>(LocalBridgeClazz, "ONE"); _ONEReady = true; } return _ONEContent; } }
        private static Org.Apache.Pdfbox.Cos.COSInteger _ONEContent = default;
        private static bool _ONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#THREE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Cos.COSInteger THREE { get { if (!_THREEReady) { _THREEContent = SGetField<Org.Apache.Pdfbox.Cos.COSInteger>(LocalBridgeClazz, "THREE"); _THREEReady = true; } return _THREEContent; } }
        private static Org.Apache.Pdfbox.Cos.COSInteger _THREEContent = default;
        private static bool _THREEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#TWO"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Cos.COSInteger TWO { get { if (!_TWOReady) { _TWOContent = SGetField<Org.Apache.Pdfbox.Cos.COSInteger>(LocalBridgeClazz, "TWO"); _TWOReady = true; } return _TWOContent; } }
        private static Org.Apache.Pdfbox.Cos.COSInteger _TWOContent = default;
        private static bool _TWOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#ZERO"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Cos.COSInteger ZERO { get { if (!_ZEROReady) { _ZEROContent = SGetField<Org.Apache.Pdfbox.Cos.COSInteger>(LocalBridgeClazz, "ZERO"); _ZEROReady = true; } return _ZEROContent; } }
        private static Org.Apache.Pdfbox.Cos.COSInteger _ZEROContent = default;
        private static bool _ZEROReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#get-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSInteger"/></returns>
        public static Org.Apache.Pdfbox.Cos.COSInteger Get(long arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSInteger>(LocalBridgeClazz, "get", "(J)Lorg/apache/pdfbox/cos/COSInteger;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#isValid--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsValid()
        {
            return IExecuteWithSignature<bool>("isValid", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/cos/COSInteger.html#writePDF-java.io.OutputStream-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void WritePDF(Java.Io.OutputStream arg0)
        {
            IExecuteWithSignature("writePDF", "(Ljava/io/OutputStream;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}