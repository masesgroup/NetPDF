/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Cos
{
    #region COSDocument declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html"/>
    /// </summary>
    public partial class COSDocument : Org.Apache.Pdfbox.Cos.COSBase
    {
        const string _bridgeClassName = "org.apache.pdfbox.cos.COSDocument";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public COSDocument() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public COSDocument(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region COSDocument implementation
    public partial class COSDocument
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#org.apache.pdfbox.cos.COSDocument(org.apache.pdfbox.cos.ICOSParser)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.ICOSParser"/></param>
        public COSDocument(Org.Apache.Pdfbox.Cos.ICOSParser arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#org.apache.pdfbox.cos.COSDocument(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction,org.apache.pdfbox.cos.ICOSParser)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Cos.ICOSParser"/></param>
        public COSDocument(Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction arg0, Org.Apache.Pdfbox.Cos.ICOSParser arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#org.apache.pdfbox.cos.COSDocument(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction"/></param>
        public COSDocument(Org.Apache.Pdfbox.Io.RandomAccessStreamCache.StreamCacheCreateFunction arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Cos.COSDocument"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Pdfbox.Cos.COSDocument t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getDocumentID--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setDocumentID-org.apache.pdfbox.cos.COSArray-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSArray DocumentID
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSArray>("getDocumentID", "()Lorg/apache/pdfbox/cos/COSArray;"); } set { IExecuteWithSignature("setDocumentID", "(Lorg/apache/pdfbox/cos/COSArray;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getDocumentState--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDocumentState DocumentState
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDocumentState>("getDocumentState", "()Lorg/apache/pdfbox/cos/COSDocumentState;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getEncryptionDictionary--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setEncryptionDictionary-org.apache.pdfbox.cos.COSDictionary-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary EncryptionDictionary
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getEncryptionDictionary", "()Lorg/apache/pdfbox/cos/COSDictionary;"); } set { IExecuteWithSignature("setEncryptionDictionary", "(Lorg/apache/pdfbox/cos/COSDictionary;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getHighestXRefObjectNumber--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setHighestXRefObjectNumber-long-"/>
        /// </summary>
        public long HighestXRefObjectNumber
        {
            get { return IExecuteWithSignature<long>("getHighestXRefObjectNumber", "()J"); } set { IExecuteWithSignature("setHighestXRefObjectNumber", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getLinearizedDictionary--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary LinearizedDictionary
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getLinearizedDictionary", "()Lorg/apache/pdfbox/cos/COSDictionary;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getStartXref--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setStartXref-long-"/>
        /// </summary>
        public long StartXref
        {
            get { return IExecuteWithSignature<long>("getStartXref", "()J"); } set { IExecuteWithSignature("setStartXref", "(J)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getTrailer--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setTrailer-org.apache.pdfbox.cos.COSDictionary-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSDictionary Trailer
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSDictionary>("getTrailer", "()Lorg/apache/pdfbox/cos/COSDictionary;"); } set { IExecuteWithSignature("setTrailer", "(Lorg/apache/pdfbox/cos/COSDictionary;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getVersion--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setVersion-float-"/>
        /// </summary>
        public float Version
        {
            get { return IExecuteWithSignature<float>("getVersion", "()F"); } set { IExecuteWithSignature("setVersion", "(F)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getXrefTable--"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Pdfbox.Cos.COSObjectKey, Java.Lang.Long> XrefTable
        {
            get { return IExecuteWithSignature<Java.Util.Map<Org.Apache.Pdfbox.Cos.COSObjectKey, Java.Lang.Long>>("getXrefTable", "()Ljava/util/Map;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#hasHybridXRef--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasHybridXRef()
        {
            return IExecuteWithSignature<bool>("hasHybridXRef", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#isClosed--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClosed()
        {
            return IExecuteWithSignature<bool>("isClosed", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#isDecrypted--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDecrypted()
        {
            return IExecuteWithSignature<bool>("isDecrypted", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#isEncrypted--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEncrypted()
        {
            return IExecuteWithSignature<bool>("isEncrypted", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#isXRefStream--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsXRefStream()
        {
            return IExecuteWithSignature<bool>("isXRefStream", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getObjectsByType-org.apache.pdfbox.cos.COSName-org.apache.pdfbox.cos.COSName-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSName"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Cos.COSName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Pdfbox.Cos.COSObject> GetObjectsByType(Org.Apache.Pdfbox.Cos.COSName arg0, Org.Apache.Pdfbox.Cos.COSName arg1)
        {
            return IExecuteWithSignature<Java.Util.List<Org.Apache.Pdfbox.Cos.COSObject>>("getObjectsByType", "(Lorg/apache/pdfbox/cos/COSName;Lorg/apache/pdfbox/cos/COSName;)Ljava/util/List;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getObjectsByType-org.apache.pdfbox.cos.COSName-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSName"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Pdfbox.Cos.COSObject> GetObjectsByType(Org.Apache.Pdfbox.Cos.COSName arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Org.Apache.Pdfbox.Cos.COSObject>>("getObjectsByType", "(Lorg/apache/pdfbox/cos/COSName;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#getObjectFromPool-org.apache.pdfbox.cos.COSObjectKey-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSObjectKey"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSObject"/></returns>
        public Org.Apache.Pdfbox.Cos.COSObject GetObjectFromPool(Org.Apache.Pdfbox.Cos.COSObjectKey arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSObject>("getObjectFromPool", "(Lorg/apache/pdfbox/cos/COSObjectKey;)Lorg/apache/pdfbox/cos/COSObject;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#createCOSStream--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></returns>
        public Org.Apache.Pdfbox.Cos.COSStream CreateCOSStream()
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSStream>("createCOSStream", "()Lorg/apache/pdfbox/cos/COSStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#createCOSStream-org.apache.pdfbox.cos.COSDictionary-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Cos.COSStream CreateCOSStream(Org.Apache.Pdfbox.Cos.COSDictionary arg0, long arg1, long arg2)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSStream>("createCOSStream", "(Lorg/apache/pdfbox/cos/COSDictionary;JJ)Lorg/apache/pdfbox/cos/COSStream;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#addXRefTable-java.util.Map-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public void AddXRefTable(Java.Util.Map<Org.Apache.Pdfbox.Cos.COSObjectKey, Java.Lang.Long> arg0)
        {
            IExecuteWithSignature("addXRefTable", "(Ljava/util/Map;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#close--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setDecrypted--"/>
        /// </summary>
        public void SetDecrypted()
        {
            IExecuteWithSignature("setDecrypted", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setHasHybridXRef--"/>
        /// </summary>
        public void SetHasHybridXRef()
        {
            IExecuteWithSignature("setHasHybridXRef", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/cos/COSDocument.html#setIsXRefStream-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsXRefStream(bool arg0)
        {
            IExecuteWithSignature("setIsXRefStream", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}