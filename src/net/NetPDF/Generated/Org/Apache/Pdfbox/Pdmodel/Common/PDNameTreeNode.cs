/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Common
{
    #region PDNameTreeNode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html"/>
    /// </summary>
    public partial class PDNameTreeNode : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.common.PDNameTreeNode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDNameTreeNode class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDNameTreeNode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDNameTreeNode class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDNameTreeNode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDNameTreeNode<T> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html"/>
    /// </summary>
    /// <typeparam name="T"><see cref="Org.Apache.Pdfbox.Pdmodel.Common.ICOSObjectable"/></typeparam>
    public partial class PDNameTreeNode<T> : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable where T : Org.Apache.Pdfbox.Pdmodel.Common.ICOSObjectable, new()
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.common.PDNameTreeNode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDNameTreeNode class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDNameTreeNode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDNameTreeNode class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDNameTreeNode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region PDNameTreeNode implementation
    public partial class PDNameTreeNode
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getKids--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setKids-java.util.List-"/>
        /// </summary>
        public Java.Util.List Kids
        {
            get { return IExecuteWithSignature<Java.Util.List>("getKids", "()Ljava/util/List;"); } set { IExecuteWithSignature("setKids", "(Ljava/util/List;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getLowerLimit--"/> 
        /// </summary>
        public Java.Lang.String LowerLimit
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getLowerLimit", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getNames--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setNames-java.util.Map-"/>
        /// </summary>
        public Java.Util.Map Names
        {
            get { return IExecuteWithSignature<Java.Util.Map>("getNames", "()Ljava/util/Map;"); } set { IExecuteWithSignature("setNames", "(Ljava/util/Map;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getParent--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setParent-org.apache.pdfbox.pdmodel.common.PDNameTreeNode-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode Parent
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode>("getParent", "()Lorg/apache/pdfbox/pdmodel/common/PDNameTreeNode;"); } set { IExecuteWithSignature("setParent", "(Lorg/apache/pdfbox/pdmodel/common/PDNameTreeNode;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getUpperLimit--"/> 
        /// </summary>
        public Java.Lang.String UpperLimit
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getUpperLimit", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#isRootNode--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRootNode()
        {
            return IExecuteWithSignature<bool>("isRootNode", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getValue-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable GetValue(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable>("getValue", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/common/COSObjectable;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PDNameTreeNode<T> implementation
    public partial class PDNameTreeNode<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode{T}"/> to <see cref="Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode(Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode<T> t) => t.Cast<Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getKids--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setKids-java.util.List-"/>
        /// </summary>
        public Java.Util.List<Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode<T>> Kids
        {
            get { return IExecuteWithSignature<Java.Util.List<Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode<T>>>("getKids", "()Ljava/util/List;"); } set { IExecuteWithSignature("setKids", "(Ljava/util/List;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getLowerLimit--"/> 
        /// </summary>
        public Java.Lang.String LowerLimit
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getLowerLimit", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getNames--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setNames-java.util.Map-"/>
        /// </summary>
        public Java.Util.Map<Java.Lang.String, T> Names
        {
            get { return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, T>>("getNames", "()Ljava/util/Map;"); } set { IExecuteWithSignature("setNames", "(Ljava/util/Map;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getParent--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#setParent-org.apache.pdfbox.pdmodel.common.PDNameTreeNode-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode<T> Parent
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.PDNameTreeNode<T>>("getParent", "()Lorg/apache/pdfbox/pdmodel/common/PDNameTreeNode;"); } set { IExecuteWithSignature("setParent", "(Lorg/apache/pdfbox/pdmodel/common/PDNameTreeNode;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getUpperLimit--"/> 
        /// </summary>
        public Java.Lang.String UpperLimit
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getUpperLimit", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#isRootNode--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRootNode()
        {
            return IExecuteWithSignature<bool>("isRootNode", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.html#getValue-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><typeparamref name="T"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public T GetValue(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<T>("getValue", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/common/COSObjectable;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}