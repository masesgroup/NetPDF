/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Font
{
    #region PDFont declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html"/>
    /// </summary>
    public partial class PDFont : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PDFont>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.font.PDFont";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDFont class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDFont() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDFont class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDFont(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDFont implementation
    public partial class PDFont : Org.Apache.Pdfbox.Pdmodel.Common.ICOSObjectable, Org.Apache.Pdfbox.Pdmodel.Font.IPDFontLike
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDFont"/> to <see cref="Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable(Org.Apache.Pdfbox.Pdmodel.Font.PDFont t) => t.Cast<Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDFont"/> to <see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDFontLike"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Pdmodel.Font.PDFontLike(Org.Apache.Pdfbox.Pdmodel.Font.PDFont t) => t.Cast<Org.Apache.Pdfbox.Pdmodel.Font.PDFontLike>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getAverageFontWidth--"/> 
        /// </summary>
        public float AverageFontWidth
        {
            get { return IExecuteWithSignature<float>("getAverageFontWidth", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getFontDescriptor--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Font.PDFontDescriptor FontDescriptor
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDFontDescriptor>("getFontDescriptor", "()Lorg/apache/pdfbox/pdmodel/font/PDFontDescriptor;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getFontMatrix--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Util.Matrix FontMatrix
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>("getFontMatrix", "()Lorg/apache/pdfbox/util/Matrix;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getSpaceWidth--"/> 
        /// </summary>
        public float SpaceWidth
        {
            get { return IExecuteWithSignature<float>("getSpaceWidth", "()F"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getSubType--"/> 
        /// </summary>
        public Java.Lang.String SubType
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSubType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getType--"/> 
        /// </summary>
        public Java.Lang.String Type
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#isVertical--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVertical()
        {
            return IExecuteWithSignature<bool>("isVertical", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#willBeSubset--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool WillBeSubset()
        {
            return IExecuteWithSignature<bool>("willBeSubset", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#readCode-java.io.InputStream-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int ReadCode(Java.Io.InputStream arg0)
        {
            return IExecuteWithSignature<int>("readCode", "(Ljava/io/InputStream;)I", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#addToSubset-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AddToSubset(int arg0)
        {
            IExecuteWithSignature("addToSubset", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#subset--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Subset()
        {
            IExecuteWithSignature("subset", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#isStandard14--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStandard14()
        {
            return IExecuteWithSignature<bool>("isStandard14", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#encode-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public byte[] Encode(Java.Lang.String arg0)
        {
            return IExecuteWithSignatureArray<byte>("encode", "(Ljava/lang/String;)[B", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getStringWidth-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="float"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public float GetStringWidth(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<float>("getStringWidth", "(Ljava/lang/String;)F", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getWidth-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public float GetWidth(int arg0)
        {
            return IExecuteWithSignature<float>("getWidth", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#toUnicode-int-org.apache.pdfbox.pdmodel.font.encoding.GlyphList-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Encoding.GlyphList"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToUnicode(int arg0, Org.Apache.Pdfbox.Pdmodel.Font.Encoding.GlyphList arg1)
        {
            return IExecuteWithSignature<Java.Lang.String>("toUnicode", "(ILorg/apache/pdfbox/pdmodel/font/encoding/GlyphList;)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#toUnicode-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToUnicode(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("toUnicode", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getDisplacement-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Vector"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Pdfbox.Util.Vector GetDisplacement(int arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Vector>("getDisplacement", "(I)Lorg/apache/pdfbox/util/Vector;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/font/PDFont.html#getPositionVector-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Util.Vector"/></returns>
        public Org.Apache.Pdfbox.Util.Vector GetPositionVector(int arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Vector>("getPositionVector", "(I)Lorg/apache/pdfbox/util/Vector;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}