/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern
{
    #region PDTilingPattern declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html"/>
    /// </summary>
    public partial class PDTilingPattern : Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDAbstractPattern
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDTilingPattern() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDTilingPattern(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDTilingPattern implementation
    public partial class PDTilingPattern
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.ResourceCache"/></param>
        public PDTilingPattern(Org.Apache.Pdfbox.Cos.COSDictionary arg0, Org.Apache.Pdfbox.Pdmodel.ResourceCache arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDTilingPattern(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDTilingPattern"/> to <see cref="Org.Apache.Pdfbox.Contentstream.PDContentStream"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Contentstream.PDContentStream(Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDTilingPattern t) => t.Cast<Org.Apache.Pdfbox.Contentstream.PDContentStream>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#PAINT_COLORED"/>
        /// </summary>
        public static int PAINT_COLORED { get { if (!_PAINT_COLOREDReady) { _PAINT_COLOREDContent = SGetField<int>(LocalBridgeClazz, "PAINT_COLORED"); _PAINT_COLOREDReady = true; } return _PAINT_COLOREDContent; } }
        private static int _PAINT_COLOREDContent = default;
        private static bool _PAINT_COLOREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#PAINT_UNCOLORED"/>
        /// </summary>
        public static int PAINT_UNCOLORED { get { if (!_PAINT_UNCOLOREDReady) { _PAINT_UNCOLOREDContent = SGetField<int>(LocalBridgeClazz, "PAINT_UNCOLORED"); _PAINT_UNCOLOREDReady = true; } return _PAINT_UNCOLOREDContent; } }
        private static int _PAINT_UNCOLOREDContent = default;
        private static bool _PAINT_UNCOLOREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#TILING_CONSTANT_SPACING"/>
        /// </summary>
        public static int TILING_CONSTANT_SPACING { get { if (!_TILING_CONSTANT_SPACINGReady) { _TILING_CONSTANT_SPACINGContent = SGetField<int>(LocalBridgeClazz, "TILING_CONSTANT_SPACING"); _TILING_CONSTANT_SPACINGReady = true; } return _TILING_CONSTANT_SPACINGContent; } }
        private static int _TILING_CONSTANT_SPACINGContent = default;
        private static bool _TILING_CONSTANT_SPACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#TILING_CONSTANT_SPACING_FASTER_TILING"/>
        /// </summary>
        public static int TILING_CONSTANT_SPACING_FASTER_TILING { get { if (!_TILING_CONSTANT_SPACING_FASTER_TILINGReady) { _TILING_CONSTANT_SPACING_FASTER_TILINGContent = SGetField<int>(LocalBridgeClazz, "TILING_CONSTANT_SPACING_FASTER_TILING"); _TILING_CONSTANT_SPACING_FASTER_TILINGReady = true; } return _TILING_CONSTANT_SPACING_FASTER_TILINGContent; } }
        private static int _TILING_CONSTANT_SPACING_FASTER_TILINGContent = default;
        private static bool _TILING_CONSTANT_SPACING_FASTER_TILINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#TILING_NO_DISTORTION"/>
        /// </summary>
        public static int TILING_NO_DISTORTION { get { if (!_TILING_NO_DISTORTIONReady) { _TILING_NO_DISTORTIONContent = SGetField<int>(LocalBridgeClazz, "TILING_NO_DISTORTION"); _TILING_NO_DISTORTIONReady = true; } return _TILING_NO_DISTORTIONContent; } }
        private static int _TILING_NO_DISTORTIONContent = default;
        private static bool _TILING_NO_DISTORTIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getBBox--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#setBBox-org.apache.pdfbox.pdmodel.common.PDRectangle-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Common.PDRectangle BBox
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.PDRectangle>("getBBox", "()Lorg/apache/pdfbox/pdmodel/common/PDRectangle;"); } set { IExecuteWithSignature("setBBox", "(Lorg/apache/pdfbox/pdmodel/common/PDRectangle;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getContents--"/> 
        /// </summary>
        public Java.Io.InputStream Contents
        {
            get { return IExecuteWithSignature<Java.Io.InputStream>("getContents", "()Ljava/io/InputStream;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getContentsForRandomAccess--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Io.RandomAccessRead ContentsForRandomAccess
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Io.RandomAccessRead>("getContentsForRandomAccess", "()Lorg/apache/pdfbox/io/RandomAccessRead;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getContentStream--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Common.PDStream ContentStream
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Common.PDStream>("getContentStream", "()Lorg/apache/pdfbox/pdmodel/common/PDStream;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getPaintType--"/> 
        /// </summary>
        public int PaintType
        {
            get { return IExecuteWithSignature<int>("getPaintType", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getResources--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#setResources-org.apache.pdfbox.pdmodel.PDResources-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.PDResources Resources
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.PDResources>("getResources", "()Lorg/apache/pdfbox/pdmodel/PDResources;"); } set { IExecuteWithSignature("setResources", "(Lorg/apache/pdfbox/pdmodel/PDResources;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getTilingType--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#setTilingType-int-"/>
        /// </summary>
        public int TilingType
        {
            get { return IExecuteWithSignature<int>("getTilingType", "()I"); } set { IExecuteWithSignature("setTilingType", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getXStep--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#setXStep-float-"/>
        /// </summary>
        public float XStep
        {
            get { return IExecuteWithSignature<float>("getXStep", "()F"); } set { IExecuteWithSignature("setXStep", "(F)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#getYStep--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/graphics/pattern/PDTilingPattern.html#setYStep-float-"/>
        /// </summary>
        public float YStep
        {
            get { return IExecuteWithSignature<float>("getYStep", "()F"); } set { IExecuteWithSignature("setYStep", "(F)V", value); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}