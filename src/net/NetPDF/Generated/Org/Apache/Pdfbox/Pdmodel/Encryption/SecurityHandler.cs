/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Encryption
{
    #region SecurityHandler declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html"/>
    /// </summary>
    public partial class SecurityHandler : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SecurityHandler>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.encryption.SecurityHandler";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("SecurityHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SecurityHandler() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("SecurityHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SecurityHandler(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region SecurityHandler<T_POLICY> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html"/>
    /// </summary>
    /// <typeparam name="T_POLICY"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.ProtectionPolicy"/></typeparam>
    public partial class SecurityHandler<T_POLICY> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SecurityHandler<T_POLICY>> where T_POLICY : Org.Apache.Pdfbox.Pdmodel.Encryption.ProtectionPolicy
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.encryption.SecurityHandler";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("SecurityHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SecurityHandler() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("SecurityHandler class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SecurityHandler(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region SecurityHandler implementation
    public partial class SecurityHandler
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getCurrentAccessPermission--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setCurrentAccessPermission-org.apache.pdfbox.pdmodel.encryption.AccessPermission-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.AccessPermission CurrentAccessPermission
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.AccessPermission>("getCurrentAccessPermission", "()Lorg/apache/pdfbox/pdmodel/encryption/AccessPermission;"); } set { IExecuteWithSignature("setCurrentAccessPermission", "(Lorg/apache/pdfbox/pdmodel/encryption/AccessPermission;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getEncryptionKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setEncryptionKey-byte[]-"/>
        /// </summary>
        public byte[] EncryptionKey
        {
            get { return IExecuteWithSignatureArray<byte>("getEncryptionKey", "()[B"); } set { IExecuteWithSignature("setEncryptionKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getKeyLength--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setKeyLength-int-"/>
        /// </summary>
        public int KeyLength
        {
            get { return IExecuteWithSignature<int>("getKeyLength", "()I"); } set { IExecuteWithSignature("setKeyLength", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#prepareDocumentForEncryption-org.apache.pdfbox.pdmodel.PDDocument-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void PrepareDocumentForEncryption(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0)
        {
            IExecuteWithSignature("prepareDocumentForEncryption", "(Lorg/apache/pdfbox/pdmodel/PDDocument;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#prepareForDecryption-org.apache.pdfbox.pdmodel.encryption.PDEncryption-org.apache.pdfbox.cos.COSArray-org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.PDEncryption"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Cos.COSArray"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.DecryptionMaterial"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void PrepareForDecryption(Org.Apache.Pdfbox.Pdmodel.Encryption.PDEncryption arg0, Org.Apache.Pdfbox.Cos.COSArray arg1, Org.Apache.Pdfbox.Pdmodel.Encryption.DecryptionMaterial arg2)
        {
            IExecuteWithSignature("prepareForDecryption", "(Lorg/apache/pdfbox/pdmodel/encryption/PDEncryption;Lorg/apache/pdfbox/cos/COSArray;Lorg/apache/pdfbox/pdmodel/encryption/DecryptionMaterial;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#hasProtectionPolicy--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasProtectionPolicy()
        {
            return IExecuteWithSignature<bool>("hasProtectionPolicy", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#isAES--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAES()
        {
            return IExecuteWithSignature<bool>("isAES", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#isDecryptMetadata--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDecryptMetadata()
        {
            return IExecuteWithSignature<bool>("isDecryptMetadata", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#decrypt-org.apache.pdfbox.cos.COSBase-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Decrypt(Org.Apache.Pdfbox.Cos.COSBase arg0, long arg1, long arg2)
        {
            IExecuteWithSignature("decrypt", "(Lorg/apache/pdfbox/cos/COSBase;JJ)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#decryptStream-org.apache.pdfbox.cos.COSStream-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void DecryptStream(Org.Apache.Pdfbox.Cos.COSStream arg0, long arg1, long arg2)
        {
            IExecuteWithSignature("decryptStream", "(Lorg/apache/pdfbox/cos/COSStream;JJ)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#encryptStream-org.apache.pdfbox.cos.COSStream-long-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void EncryptStream(Org.Apache.Pdfbox.Cos.COSStream arg0, long arg1, int arg2)
        {
            IExecuteWithSignature("encryptStream", "(Lorg/apache/pdfbox/cos/COSStream;JI)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#encryptString-org.apache.pdfbox.cos.COSString-long-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSString"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void EncryptString(Org.Apache.Pdfbox.Cos.COSString arg0, long arg1, int arg2)
        {
            IExecuteWithSignature("encryptString", "(Lorg/apache/pdfbox/cos/COSString;JI)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setAES-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAES(bool arg0)
        {
            IExecuteWithSignature("setAES", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setCustomSecureRandom-java.security.SecureRandom-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.SecureRandom"/></param>
        public void SetCustomSecureRandom(Java.Security.SecureRandom arg0)
        {
            IExecuteWithSignature("setCustomSecureRandom", "(Ljava/security/SecureRandom;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region SecurityHandler<T_POLICY> implementation
    public partial class SecurityHandler<T_POLICY>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler{T_POLICY}"/> to <see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler(Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler<T_POLICY> t) => t.Cast<Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getCurrentAccessPermission--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setCurrentAccessPermission-org.apache.pdfbox.pdmodel.encryption.AccessPermission-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.AccessPermission CurrentAccessPermission
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.AccessPermission>("getCurrentAccessPermission", "()Lorg/apache/pdfbox/pdmodel/encryption/AccessPermission;"); } set { IExecuteWithSignature("setCurrentAccessPermission", "(Lorg/apache/pdfbox/pdmodel/encryption/AccessPermission;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getEncryptionKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setEncryptionKey-byte[]-"/>
        /// </summary>
        public byte[] EncryptionKey
        {
            get { return IExecuteWithSignatureArray<byte>("getEncryptionKey", "()[B"); } set { IExecuteWithSignature("setEncryptionKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#getKeyLength--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setKeyLength-int-"/>
        /// </summary>
        public int KeyLength
        {
            get { return IExecuteWithSignature<int>("getKeyLength", "()I"); } set { IExecuteWithSignature("setKeyLength", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#prepareDocumentForEncryption-org.apache.pdfbox.pdmodel.PDDocument-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void PrepareDocumentForEncryption(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0)
        {
            IExecuteWithSignature("prepareDocumentForEncryption", "(Lorg/apache/pdfbox/pdmodel/PDDocument;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#prepareForDecryption-org.apache.pdfbox.pdmodel.encryption.PDEncryption-org.apache.pdfbox.cos.COSArray-org.apache.pdfbox.pdmodel.encryption.DecryptionMaterial-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.PDEncryption"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Cos.COSArray"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.DecryptionMaterial"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void PrepareForDecryption(Org.Apache.Pdfbox.Pdmodel.Encryption.PDEncryption arg0, Org.Apache.Pdfbox.Cos.COSArray arg1, Org.Apache.Pdfbox.Pdmodel.Encryption.DecryptionMaterial arg2)
        {
            IExecuteWithSignature("prepareForDecryption", "(Lorg/apache/pdfbox/pdmodel/encryption/PDEncryption;Lorg/apache/pdfbox/cos/COSArray;Lorg/apache/pdfbox/pdmodel/encryption/DecryptionMaterial;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#hasProtectionPolicy--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasProtectionPolicy()
        {
            return IExecuteWithSignature<bool>("hasProtectionPolicy", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#isAES--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAES()
        {
            return IExecuteWithSignature<bool>("isAES", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#isDecryptMetadata--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDecryptMetadata()
        {
            return IExecuteWithSignature<bool>("isDecryptMetadata", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#decrypt-org.apache.pdfbox.cos.COSBase-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Decrypt(Org.Apache.Pdfbox.Cos.COSBase arg0, long arg1, long arg2)
        {
            IExecuteWithSignature("decrypt", "(Lorg/apache/pdfbox/cos/COSBase;JJ)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#decryptStream-org.apache.pdfbox.cos.COSStream-long-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void DecryptStream(Org.Apache.Pdfbox.Cos.COSStream arg0, long arg1, long arg2)
        {
            IExecuteWithSignature("decryptStream", "(Lorg/apache/pdfbox/cos/COSStream;JJ)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#encryptStream-org.apache.pdfbox.cos.COSStream-long-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSStream"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void EncryptStream(Org.Apache.Pdfbox.Cos.COSStream arg0, long arg1, int arg2)
        {
            IExecuteWithSignature("encryptStream", "(Lorg/apache/pdfbox/cos/COSStream;JI)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#encryptString-org.apache.pdfbox.cos.COSString-long-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSString"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void EncryptString(Org.Apache.Pdfbox.Cos.COSString arg0, long arg1, int arg2)
        {
            IExecuteWithSignature("encryptString", "(Lorg/apache/pdfbox/cos/COSString;JI)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setAES-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAES(bool arg0)
        {
            IExecuteWithSignature("setAES", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.html#setCustomSecureRandom-java.security.SecureRandom-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.SecureRandom"/></param>
        public void SetCustomSecureRandom(Java.Security.SecureRandom arg0)
        {
            IExecuteWithSignature("setCustomSecureRandom", "(Ljava/security/SecureRandom;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}