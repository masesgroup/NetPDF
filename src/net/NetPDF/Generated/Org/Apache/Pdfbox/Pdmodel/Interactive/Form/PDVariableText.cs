/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Interactive.Form
{
    #region PDVariableText declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html"/>
    /// </summary>
    public partial class PDVariableText : Org.Apache.Pdfbox.Pdmodel.Interactive.Form.PDTerminalField
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.interactive.form.PDVariableText";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDVariableText class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDVariableText() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDVariableText class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDVariableText(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDVariableText implementation
    public partial class PDVariableText
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#QUADDING_CENTERED"/>
        /// </summary>
        public static int QUADDING_CENTERED { get { if (!_QUADDING_CENTEREDReady) { _QUADDING_CENTEREDContent = SGetField<int>(LocalBridgeClazz, "QUADDING_CENTERED"); _QUADDING_CENTEREDReady = true; } return _QUADDING_CENTEREDContent; } }
        private static int _QUADDING_CENTEREDContent = default;
        private static bool _QUADDING_CENTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#QUADDING_LEFT"/>
        /// </summary>
        public static int QUADDING_LEFT { get { if (!_QUADDING_LEFTReady) { _QUADDING_LEFTContent = SGetField<int>(LocalBridgeClazz, "QUADDING_LEFT"); _QUADDING_LEFTReady = true; } return _QUADDING_LEFTContent; } }
        private static int _QUADDING_LEFTContent = default;
        private static bool _QUADDING_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#QUADDING_RIGHT"/>
        /// </summary>
        public static int QUADDING_RIGHT { get { if (!_QUADDING_RIGHTReady) { _QUADDING_RIGHTContent = SGetField<int>(LocalBridgeClazz, "QUADDING_RIGHT"); _QUADDING_RIGHTReady = true; } return _QUADDING_RIGHTContent; } }
        private static int _QUADDING_RIGHTContent = default;
        private static bool _QUADDING_RIGHTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#getDefaultAppearance--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#setDefaultAppearance-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String DefaultAppearance
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDefaultAppearance", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDefaultAppearance", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#getDefaultStyleString--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#setDefaultStyleString-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String DefaultStyleString
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDefaultStyleString", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDefaultStyleString", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#getQ--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#setQ-int-"/>
        /// </summary>
        public int Q
        {
            get { return IExecuteWithSignature<int>("getQ", "()I"); } set { IExecuteWithSignature("setQ", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#getRichTextValue--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/form/PDVariableText.html#setRichTextValue-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String RichTextValue
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getRichTextValue", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setRichTextValue", "(Ljava/lang/String;)V", value); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}