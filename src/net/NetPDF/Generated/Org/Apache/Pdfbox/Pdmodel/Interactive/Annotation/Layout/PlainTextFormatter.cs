/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout
{
    #region PlainTextFormatter declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.html"/>
    /// </summary>
    public partial class PlainTextFormatter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PlainTextFormatter>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainTextFormatter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PlainTextFormatter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PlainTextFormatter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainTextFormatter$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region PlainTextFormatter implementation
    public partial class PlainTextFormatter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.html#format--"/>
        /// </summary>
        /// <exception cref="Java.Io.IOException"/>
        public void Format()
        {
            IExecuteWithSignature("format", "()V");
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainTextFormatter$Builder(org.apache.pdfbox.pdmodel.PDAppearanceContentStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDAppearanceContentStream"/></param>
            public Builder(Org.Apache.Pdfbox.Pdmodel.PDAppearanceContentStream arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#build--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter Build()
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter>("build", "()Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#initialOffset-float-float-"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder InitialOffset(float arg0, float arg1)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("initialOffset", "(FF)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#style-org.apache.pdfbox.pdmodel.interactive.annotation.layout.AppearanceStyle-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.AppearanceStyle"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder Style(Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.AppearanceStyle arg0)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("style", "(Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/AppearanceStyle;)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#text-org.apache.pdfbox.pdmodel.interactive.annotation.layout.PlainText-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainText"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder Text(Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainText arg0)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("text", "(Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainText;)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#textAlign-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder TextAlignMethod(int arg0)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("textAlign", "(I)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#width-float-"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder Width(float arg0)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("width", "(F)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter.Builder.html#wrapLines-boolean-"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder"/></returns>
            public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder WrapLines(bool arg0)
            {
                return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Layout.PlainTextFormatter.Builder>("wrapLines", "(Z)Lorg/apache/pdfbox/pdmodel/interactive/annotation/layout/PlainTextFormatter$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}