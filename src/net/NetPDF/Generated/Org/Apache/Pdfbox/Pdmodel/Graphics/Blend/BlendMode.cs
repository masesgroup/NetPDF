/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Graphics.Blend
{
    #region BlendMode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html"/>
    /// </summary>
    public partial class BlendMode : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BlendMode>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BlendMode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BlendMode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region BlendChannelFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.BlendChannelFunction.html"/>
        /// </summary>
        public partial class BlendChannelFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BlendChannelFunction>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendChannelFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("BlendChannelFunction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public BlendChannelFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("BlendChannelFunction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public BlendChannelFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region BlendFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.BlendFunction.html"/>
        /// </summary>
        public partial class BlendFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BlendFunction>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.blend.BlendMode$BlendFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("BlendFunction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public BlendFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("BlendFunction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public BlendFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region BlendMode implementation
    public partial class BlendMode
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#COLOR"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode COLOR { get { if (!_COLORReady) { _COLORContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "COLOR"); _COLORReady = true; } return _COLORContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _COLORContent = default;
        private static bool _COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#COLOR_BURN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode COLOR_BURN { get { if (!_COLOR_BURNReady) { _COLOR_BURNContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "COLOR_BURN"); _COLOR_BURNReady = true; } return _COLOR_BURNContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _COLOR_BURNContent = default;
        private static bool _COLOR_BURNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#COLOR_DODGE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode COLOR_DODGE { get { if (!_COLOR_DODGEReady) { _COLOR_DODGEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "COLOR_DODGE"); _COLOR_DODGEReady = true; } return _COLOR_DODGEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _COLOR_DODGEContent = default;
        private static bool _COLOR_DODGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#COMPATIBLE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode COMPATIBLE { get { if (!_COMPATIBLEReady) { _COMPATIBLEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "COMPATIBLE"); _COMPATIBLEReady = true; } return _COMPATIBLEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _COMPATIBLEContent = default;
        private static bool _COMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#DARKEN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode DARKEN { get { if (!_DARKENReady) { _DARKENContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "DARKEN"); _DARKENReady = true; } return _DARKENContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _DARKENContent = default;
        private static bool _DARKENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#DIFFERENCE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode DIFFERENCE { get { if (!_DIFFERENCEReady) { _DIFFERENCEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "DIFFERENCE"); _DIFFERENCEReady = true; } return _DIFFERENCEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _DIFFERENCEContent = default;
        private static bool _DIFFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#EXCLUSION"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode EXCLUSION { get { if (!_EXCLUSIONReady) { _EXCLUSIONContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "EXCLUSION"); _EXCLUSIONReady = true; } return _EXCLUSIONContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _EXCLUSIONContent = default;
        private static bool _EXCLUSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#HARD_LIGHT"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode HARD_LIGHT { get { if (!_HARD_LIGHTReady) { _HARD_LIGHTContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "HARD_LIGHT"); _HARD_LIGHTReady = true; } return _HARD_LIGHTContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _HARD_LIGHTContent = default;
        private static bool _HARD_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#HUE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode HUE { get { if (!_HUEReady) { _HUEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "HUE"); _HUEReady = true; } return _HUEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _HUEContent = default;
        private static bool _HUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#LIGHTEN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode LIGHTEN { get { if (!_LIGHTENReady) { _LIGHTENContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "LIGHTEN"); _LIGHTENReady = true; } return _LIGHTENContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _LIGHTENContent = default;
        private static bool _LIGHTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#LUMINOSITY"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode LUMINOSITY { get { if (!_LUMINOSITYReady) { _LUMINOSITYContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "LUMINOSITY"); _LUMINOSITYReady = true; } return _LUMINOSITYContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _LUMINOSITYContent = default;
        private static bool _LUMINOSITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#MULTIPLY"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode MULTIPLY { get { if (!_MULTIPLYReady) { _MULTIPLYContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "MULTIPLY"); _MULTIPLYReady = true; } return _MULTIPLYContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _MULTIPLYContent = default;
        private static bool _MULTIPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#NORMAL"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _NORMALContent = default;
        private static bool _NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#OVERLAY"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode OVERLAY { get { if (!_OVERLAYReady) { _OVERLAYContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "OVERLAY"); _OVERLAYReady = true; } return _OVERLAYContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _OVERLAYContent = default;
        private static bool _OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#SATURATION"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode SATURATION { get { if (!_SATURATIONReady) { _SATURATIONContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "SATURATION"); _SATURATIONReady = true; } return _SATURATIONContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _SATURATIONContent = default;
        private static bool _SATURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#SCREEN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode SCREEN { get { if (!_SCREENReady) { _SCREENContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "SCREEN"); _SCREENReady = true; } return _SCREENContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _SCREENContent = default;
        private static bool _SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#SOFT_LIGHT"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode SOFT_LIGHT { get { if (!_SOFT_LIGHTReady) { _SOFT_LIGHTContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "SOFT_LIGHT"); _SOFT_LIGHTReady = true; } return _SOFT_LIGHTContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode _SOFT_LIGHTContent = default;
        private static bool _SOFT_LIGHTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#getInstance-org.apache.pdfbox.cos.COSBase-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSBase"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode GetInstance(Org.Apache.Pdfbox.Cos.COSBase arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode>(LocalBridgeClazz, "getInstance", "(Lorg/apache/pdfbox/cos/COSBase;)Lorg/apache/pdfbox/pdmodel/graphics/blend/BlendMode;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#getCOSName--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSName COSName
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSName>("getCOSName", "()Lorg/apache/pdfbox/cos/COSName;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#getBlendChannelFunction--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode.BlendChannelFunction GetBlendChannelFunction
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode.BlendChannelFunction>("getBlendChannelFunction", "()Lorg/apache/pdfbox/pdmodel/graphics/blend/BlendMode$BlendChannelFunction;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#getBlendFunction--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode.BlendFunction GetBlendFunction
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.Blend.BlendMode.BlendFunction>("getBlendFunction", "()Lorg/apache/pdfbox/pdmodel/graphics/blend/BlendMode$BlendFunction;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.html#isSeparableBlendMode--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSeparableBlendMode()
        {
            return IExecuteWithSignature<bool>("isSeparableBlendMode", "()Z");
        }

        #endregion

        #region Nested classes
        #region BlendChannelFunction implementation
        public partial class BlendChannelFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.BlendChannelFunction.html#blendChannel-float-float-"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public float BlendChannel(float arg0, float arg1)
            {
                return IExecuteWithSignature<float>("blendChannel", "(FF)F", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BlendFunction implementation
        public partial class BlendFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/blend/BlendMode.BlendFunction.html#blend-float[]-float[]-float[]-"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            public void Blend(float[] arg0, float[] arg1, float[] arg2)
            {
                IExecuteWithSignature("blend", "([F[F[F)V", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}