/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation
{
    #region PDAnnotationText declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html"/>
    /// </summary>
    public partial class PDAnnotationText : Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAnnotationMarkup
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDAnnotationText() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDAnnotationText(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDAnnotationText implementation
    public partial class PDAnnotationText
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationText(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDAnnotationText(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_CHECK"/>
        /// </summary>
        public static Java.Lang.String NAME_CHECK { get { if (!_NAME_CHECKReady) { _NAME_CHECKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_CHECK"); _NAME_CHECKReady = true; } return _NAME_CHECKContent; } }
        private static Java.Lang.String _NAME_CHECKContent = default;
        private static bool _NAME_CHECKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_CIRCLE"/>
        /// </summary>
        public static Java.Lang.String NAME_CIRCLE { get { if (!_NAME_CIRCLEReady) { _NAME_CIRCLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_CIRCLE"); _NAME_CIRCLEReady = true; } return _NAME_CIRCLEContent; } }
        private static Java.Lang.String _NAME_CIRCLEContent = default;
        private static bool _NAME_CIRCLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_COMMENT"/>
        /// </summary>
        public static Java.Lang.String NAME_COMMENT { get { if (!_NAME_COMMENTReady) { _NAME_COMMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_COMMENT"); _NAME_COMMENTReady = true; } return _NAME_COMMENTContent; } }
        private static Java.Lang.String _NAME_COMMENTContent = default;
        private static bool _NAME_COMMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_CROSS"/>
        /// </summary>
        public static Java.Lang.String NAME_CROSS { get { if (!_NAME_CROSSReady) { _NAME_CROSSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_CROSS"); _NAME_CROSSReady = true; } return _NAME_CROSSContent; } }
        private static Java.Lang.String _NAME_CROSSContent = default;
        private static bool _NAME_CROSSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_CROSS_HAIRS"/>
        /// </summary>
        public static Java.Lang.String NAME_CROSS_HAIRS { get { if (!_NAME_CROSS_HAIRSReady) { _NAME_CROSS_HAIRSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_CROSS_HAIRS"); _NAME_CROSS_HAIRSReady = true; } return _NAME_CROSS_HAIRSContent; } }
        private static Java.Lang.String _NAME_CROSS_HAIRSContent = default;
        private static bool _NAME_CROSS_HAIRSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_HELP"/>
        /// </summary>
        public static Java.Lang.String NAME_HELP { get { if (!_NAME_HELPReady) { _NAME_HELPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_HELP"); _NAME_HELPReady = true; } return _NAME_HELPContent; } }
        private static Java.Lang.String _NAME_HELPContent = default;
        private static bool _NAME_HELPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_INSERT"/>
        /// </summary>
        public static Java.Lang.String NAME_INSERT { get { if (!_NAME_INSERTReady) { _NAME_INSERTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_INSERT"); _NAME_INSERTReady = true; } return _NAME_INSERTContent; } }
        private static Java.Lang.String _NAME_INSERTContent = default;
        private static bool _NAME_INSERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_KEY"/>
        /// </summary>
        public static Java.Lang.String NAME_KEY { get { if (!_NAME_KEYReady) { _NAME_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_KEY"); _NAME_KEYReady = true; } return _NAME_KEYContent; } }
        private static Java.Lang.String _NAME_KEYContent = default;
        private static bool _NAME_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_NEW_PARAGRAPH"/>
        /// </summary>
        public static Java.Lang.String NAME_NEW_PARAGRAPH { get { if (!_NAME_NEW_PARAGRAPHReady) { _NAME_NEW_PARAGRAPHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_NEW_PARAGRAPH"); _NAME_NEW_PARAGRAPHReady = true; } return _NAME_NEW_PARAGRAPHContent; } }
        private static Java.Lang.String _NAME_NEW_PARAGRAPHContent = default;
        private static bool _NAME_NEW_PARAGRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_NOTE"/>
        /// </summary>
        public static Java.Lang.String NAME_NOTE { get { if (!_NAME_NOTEReady) { _NAME_NOTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_NOTE"); _NAME_NOTEReady = true; } return _NAME_NOTEContent; } }
        private static Java.Lang.String _NAME_NOTEContent = default;
        private static bool _NAME_NOTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_PARAGRAPH"/>
        /// </summary>
        public static Java.Lang.String NAME_PARAGRAPH { get { if (!_NAME_PARAGRAPHReady) { _NAME_PARAGRAPHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_PARAGRAPH"); _NAME_PARAGRAPHReady = true; } return _NAME_PARAGRAPHContent; } }
        private static Java.Lang.String _NAME_PARAGRAPHContent = default;
        private static bool _NAME_PARAGRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_RIGHT_ARROW"/>
        /// </summary>
        public static Java.Lang.String NAME_RIGHT_ARROW { get { if (!_NAME_RIGHT_ARROWReady) { _NAME_RIGHT_ARROWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_RIGHT_ARROW"); _NAME_RIGHT_ARROWReady = true; } return _NAME_RIGHT_ARROWContent; } }
        private static Java.Lang.String _NAME_RIGHT_ARROWContent = default;
        private static bool _NAME_RIGHT_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_RIGHT_POINTER"/>
        /// </summary>
        public static Java.Lang.String NAME_RIGHT_POINTER { get { if (!_NAME_RIGHT_POINTERReady) { _NAME_RIGHT_POINTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_RIGHT_POINTER"); _NAME_RIGHT_POINTERReady = true; } return _NAME_RIGHT_POINTERContent; } }
        private static Java.Lang.String _NAME_RIGHT_POINTERContent = default;
        private static bool _NAME_RIGHT_POINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_STAR"/>
        /// </summary>
        public static Java.Lang.String NAME_STAR { get { if (!_NAME_STARReady) { _NAME_STARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_STAR"); _NAME_STARReady = true; } return _NAME_STARContent; } }
        private static Java.Lang.String _NAME_STARContent = default;
        private static bool _NAME_STARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_UP_ARROW"/>
        /// </summary>
        public static Java.Lang.String NAME_UP_ARROW { get { if (!_NAME_UP_ARROWReady) { _NAME_UP_ARROWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_UP_ARROW"); _NAME_UP_ARROWReady = true; } return _NAME_UP_ARROWContent; } }
        private static Java.Lang.String _NAME_UP_ARROWContent = default;
        private static bool _NAME_UP_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#NAME_UP_LEFT_ARROW"/>
        /// </summary>
        public static Java.Lang.String NAME_UP_LEFT_ARROW { get { if (!_NAME_UP_LEFT_ARROWReady) { _NAME_UP_LEFT_ARROWContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_UP_LEFT_ARROW"); _NAME_UP_LEFT_ARROWReady = true; } return _NAME_UP_LEFT_ARROWContent; } }
        private static Java.Lang.String _NAME_UP_LEFT_ARROWContent = default;
        private static bool _NAME_UP_LEFT_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#SUB_TYPE"/>
        /// </summary>
        public static Java.Lang.String SUB_TYPE { get { if (!_SUB_TYPEReady) { _SUB_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUB_TYPE"); _SUB_TYPEReady = true; } return _SUB_TYPEContent; } }
        private static Java.Lang.String _SUB_TYPEContent = default;
        private static bool _SUB_TYPEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#getName--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#setName-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setName", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#getOpen--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#setOpen-boolean-"/>
        /// </summary>
        public bool Open
        {
            get { return IExecuteWithSignature<bool>("getOpen", "()Z"); } set { IExecuteWithSignature("setOpen", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#getState--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#setState-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String State
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getState", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setState", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#getStateModel--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#setStateModel-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String StateModel
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getStateModel", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setStateModel", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationText.html#setCustomAppearanceHandler-org.apache.pdfbox.pdmodel.interactive.annotation.handlers.PDAppearanceHandler-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Handlers.PDAppearanceHandler"/></param>
        public void SetCustomAppearanceHandler(Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.Handlers.PDAppearanceHandler arg0)
        {
            IExecuteWithSignature("setCustomAppearanceHandler", "(Lorg/apache/pdfbox/pdmodel/interactive/annotation/handlers/PDAppearanceHandler;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}