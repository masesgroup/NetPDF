/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Encryption
{
    #region PDEncryption declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html"/>
    /// </summary>
    public partial class PDEncryption : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.encryption.PDEncryption";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDEncryption() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDEncryption(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDEncryption implementation
    public partial class PDEncryption
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#org.apache.pdfbox.pdmodel.encryption.PDEncryption(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDEncryption(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#DEFAULT_LENGTH"/>
        /// </summary>
        public static int DEFAULT_LENGTH { get { if (!_DEFAULT_LENGTHReady) { _DEFAULT_LENGTHContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_LENGTH"); _DEFAULT_LENGTHReady = true; } return _DEFAULT_LENGTHContent; } }
        private static int _DEFAULT_LENGTHContent = default;
        private static bool _DEFAULT_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#DEFAULT_VERSION"/>
        /// </summary>
        public static int DEFAULT_VERSION { get { if (!_DEFAULT_VERSIONReady) { _DEFAULT_VERSIONContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_VERSION"); _DEFAULT_VERSIONReady = true; } return _DEFAULT_VERSIONContent; } }
        private static int _DEFAULT_VERSIONContent = default;
        private static bool _DEFAULT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#VERSION0_UNDOCUMENTED_UNSUPPORTED"/>
        /// </summary>
        public static int VERSION0_UNDOCUMENTED_UNSUPPORTED { get { if (!_VERSION0_UNDOCUMENTED_UNSUPPORTEDReady) { _VERSION0_UNDOCUMENTED_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "VERSION0_UNDOCUMENTED_UNSUPPORTED"); _VERSION0_UNDOCUMENTED_UNSUPPORTEDReady = true; } return _VERSION0_UNDOCUMENTED_UNSUPPORTEDContent; } }
        private static int _VERSION0_UNDOCUMENTED_UNSUPPORTEDContent = default;
        private static bool _VERSION0_UNDOCUMENTED_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#VERSION1_40_BIT_ALGORITHM"/>
        /// </summary>
        public static int VERSION1_40_BIT_ALGORITHM { get { if (!_VERSION1_40_BIT_ALGORITHMReady) { _VERSION1_40_BIT_ALGORITHMContent = SGetField<int>(LocalBridgeClazz, "VERSION1_40_BIT_ALGORITHM"); _VERSION1_40_BIT_ALGORITHMReady = true; } return _VERSION1_40_BIT_ALGORITHMContent; } }
        private static int _VERSION1_40_BIT_ALGORITHMContent = default;
        private static bool _VERSION1_40_BIT_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#VERSION2_VARIABLE_LENGTH_ALGORITHM"/>
        /// </summary>
        public static int VERSION2_VARIABLE_LENGTH_ALGORITHM { get { if (!_VERSION2_VARIABLE_LENGTH_ALGORITHMReady) { _VERSION2_VARIABLE_LENGTH_ALGORITHMContent = SGetField<int>(LocalBridgeClazz, "VERSION2_VARIABLE_LENGTH_ALGORITHM"); _VERSION2_VARIABLE_LENGTH_ALGORITHMReady = true; } return _VERSION2_VARIABLE_LENGTH_ALGORITHMContent; } }
        private static int _VERSION2_VARIABLE_LENGTH_ALGORITHMContent = default;
        private static bool _VERSION2_VARIABLE_LENGTH_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#VERSION3_UNPUBLISHED_ALGORITHM"/>
        /// </summary>
        public static int VERSION3_UNPUBLISHED_ALGORITHM { get { if (!_VERSION3_UNPUBLISHED_ALGORITHMReady) { _VERSION3_UNPUBLISHED_ALGORITHMContent = SGetField<int>(LocalBridgeClazz, "VERSION3_UNPUBLISHED_ALGORITHM"); _VERSION3_UNPUBLISHED_ALGORITHMReady = true; } return _VERSION3_UNPUBLISHED_ALGORITHMContent; } }
        private static int _VERSION3_UNPUBLISHED_ALGORITHMContent = default;
        private static bool _VERSION3_UNPUBLISHED_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#VERSION4_SECURITY_HANDLER"/>
        /// </summary>
        public static int VERSION4_SECURITY_HANDLER { get { if (!_VERSION4_SECURITY_HANDLERReady) { _VERSION4_SECURITY_HANDLERContent = SGetField<int>(LocalBridgeClazz, "VERSION4_SECURITY_HANDLER"); _VERSION4_SECURITY_HANDLERReady = true; } return _VERSION4_SECURITY_HANDLERContent; } }
        private static int _VERSION4_SECURITY_HANDLERContent = default;
        private static bool _VERSION4_SECURITY_HANDLERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#DEFAULT_NAME"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_NAME { get { if (!_DEFAULT_NAMEReady) { _DEFAULT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_NAME"); _DEFAULT_NAMEReady = true; } return _DEFAULT_NAMEContent; } }
        private static Java.Lang.String _DEFAULT_NAMEContent = default;
        private static bool _DEFAULT_NAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getDefaultCryptFilterDictionary--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setDefaultCryptFilterDictionary-org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary DefaultCryptFilterDictionary
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary>("getDefaultCryptFilterDictionary", "()Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;"); } set { IExecuteWithSignature("setDefaultCryptFilterDictionary", "(Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getFilter--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setFilter-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String Filter
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getFilter", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setFilter", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getLength--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setLength-int-"/>
        /// </summary>
        public int Length
        {
            get { return IExecuteWithSignature<int>("getLength", "()I"); } set { IExecuteWithSignature("setLength", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getOwnerEncryptionKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setOwnerEncryptionKey-byte[]-"/>
        /// </summary>
        public byte[] OwnerEncryptionKey
        {
            get { return IExecuteWithSignatureArray<byte>("getOwnerEncryptionKey", "()[B"); } set { IExecuteWithSignature("setOwnerEncryptionKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getOwnerKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setOwnerKey-byte[]-"/>
        /// </summary>
        public byte[] OwnerKey
        {
            get { return IExecuteWithSignatureArray<byte>("getOwnerKey", "()[B"); } set { IExecuteWithSignature("setOwnerKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getPermissions--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setPermissions-int-"/>
        /// </summary>
        public int Permissions
        {
            get { return IExecuteWithSignature<int>("getPermissions", "()I"); } set { IExecuteWithSignature("setPermissions", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getPerms--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setPerms-byte[]-"/>
        /// </summary>
        public byte[] Perms
        {
            get { return IExecuteWithSignatureArray<byte>("getPerms", "()[B"); } set { IExecuteWithSignature("setPerms", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getRecipientsLength--"/> 
        /// </summary>
        public int RecipientsLength
        {
            get { return IExecuteWithSignature<int>("getRecipientsLength", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getRevision--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setRevision-int-"/>
        /// </summary>
        public int Revision
        {
            get { return IExecuteWithSignature<int>("getRevision", "()I"); } set { IExecuteWithSignature("setRevision", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getSecurityHandler--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setSecurityHandler-org.apache.pdfbox.pdmodel.encryption.SecurityHandler-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler<Org.Apache.Pdfbox.Pdmodel.Encryption.ProtectionPolicy> SecurityHandler
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.SecurityHandler<Org.Apache.Pdfbox.Pdmodel.Encryption.ProtectionPolicy>>("getSecurityHandler", "()Lorg/apache/pdfbox/pdmodel/encryption/SecurityHandler;"); } set { IExecuteWithSignature("setSecurityHandler", "(Lorg/apache/pdfbox/pdmodel/encryption/SecurityHandler;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getStdCryptFilterDictionary--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setStdCryptFilterDictionary-org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary StdCryptFilterDictionary
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary>("getStdCryptFilterDictionary", "()Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;"); } set { IExecuteWithSignature("setStdCryptFilterDictionary", "(Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getStreamFilterName--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setStreamFilterName-org.apache.pdfbox.cos.COSName-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSName StreamFilterName
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSName>("getStreamFilterName", "()Lorg/apache/pdfbox/cos/COSName;"); } set { IExecuteWithSignature("setStreamFilterName", "(Lorg/apache/pdfbox/cos/COSName;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getStringFilterName--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setStringFilterName-org.apache.pdfbox.cos.COSName-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSName StringFilterName
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSName>("getStringFilterName", "()Lorg/apache/pdfbox/cos/COSName;"); } set { IExecuteWithSignature("setStringFilterName", "(Lorg/apache/pdfbox/cos/COSName;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getSubFilter--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setSubFilter-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String SubFilter
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSubFilter", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setSubFilter", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getUserEncryptionKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setUserEncryptionKey-byte[]-"/>
        /// </summary>
        public byte[] UserEncryptionKey
        {
            get { return IExecuteWithSignatureArray<byte>("getUserEncryptionKey", "()[B"); } set { IExecuteWithSignature("setUserEncryptionKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getUserKey--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setUserKey-byte[]-"/>
        /// </summary>
        public byte[] UserKey
        {
            get { return IExecuteWithSignatureArray<byte>("getUserKey", "()[B"); } set { IExecuteWithSignature("setUserKey", "([B)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getVersion--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setVersion-int-"/>
        /// </summary>
        public int Version
        {
            get { return IExecuteWithSignature<int>("getVersion", "()I"); } set { IExecuteWithSignature("setVersion", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#hasSecurityHandler--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSecurityHandler()
        {
            return IExecuteWithSignature<bool>("hasSecurityHandler", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#isEncryptMetaData--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEncryptMetaData()
        {
            return IExecuteWithSignature<bool>("isEncryptMetaData", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getRecipientStringAt-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Cos.COSString"/></returns>
        public Org.Apache.Pdfbox.Cos.COSString GetRecipientStringAt(int arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSString>("getRecipientStringAt", "(I)Lorg/apache/pdfbox/cos/COSString;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#getCryptFilterDictionary-org.apache.pdfbox.cos.COSName-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSName"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary"/></returns>
        public Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary GetCryptFilterDictionary(Org.Apache.Pdfbox.Cos.COSName arg0)
        {
            return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary>("getCryptFilterDictionary", "(Lorg/apache/pdfbox/cos/COSName;)Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#removeV45filters--"/>
        /// </summary>
        public void RemoveV45filters()
        {
            IExecuteWithSignature("removeV45filters", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setCryptFilterDictionary-org.apache.pdfbox.cos.COSName-org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSName"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary"/></param>
        public void SetCryptFilterDictionary(Org.Apache.Pdfbox.Cos.COSName arg0, Org.Apache.Pdfbox.Pdmodel.Encryption.PDCryptFilterDictionary arg1)
        {
            IExecuteWithSignature("setCryptFilterDictionary", "(Lorg/apache/pdfbox/cos/COSName;Lorg/apache/pdfbox/pdmodel/encryption/PDCryptFilterDictionary;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/encryption/PDEncryption.html#setRecipients-byte[][]-"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetRecipients(byte[][] arg0)
        {
            IExecuteWithSignature("setRecipients", "([[B)V", new object[] { arg0 });
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}