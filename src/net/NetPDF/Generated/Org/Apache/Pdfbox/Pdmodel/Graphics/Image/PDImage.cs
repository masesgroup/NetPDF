/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Graphics.Image
{
    #region PDImage declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html"/>
    /// </summary>
    public partial class PDImage : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.image.PDImage";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDImage class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDImage() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDImage class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDImage(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IPDImage
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html"/>
    /// </summary>
    public partial interface IPDImage : Org.Apache.Pdfbox.Pdmodel.Common.ICOSObjectable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PDImage implementation
    public partial class PDImage : Org.Apache.Pdfbox.Pdmodel.Graphics.Image.IPDImage
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getBitsPerComponent--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setBitsPerComponent-int-"/>
        /// </summary>
        public int BitsPerComponent
        {
            get { return IExecuteWithSignature<int>("getBitsPerComponent", "()I"); } set { IExecuteWithSignature("setBitsPerComponent", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getColorSpace--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setColorSpace-org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Graphics.Color.PDColorSpace ColorSpace
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.Color.PDColorSpace>("getColorSpace", "()Lorg/apache/pdfbox/pdmodel/graphics/color/PDColorSpace;"); } set { IExecuteWithSignature("setColorSpace", "(Lorg/apache/pdfbox/pdmodel/graphics/color/PDColorSpace;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getDecode--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setDecode-org.apache.pdfbox.cos.COSArray-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSArray Decode
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSArray>("getDecode", "()Lorg/apache/pdfbox/cos/COSArray;"); } set { IExecuteWithSignature("setDecode", "(Lorg/apache/pdfbox/cos/COSArray;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getHeight--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setHeight-int-"/>
        /// </summary>
        public int Height
        {
            get { return IExecuteWithSignature<int>("getHeight", "()I"); } set { IExecuteWithSignature("setHeight", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getImage--"/> 
        /// </summary>
        public Java.Awt.ImageNs.BufferedImage Image
        {
            get { return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("getImage", "()Ljava/awt/image/BufferedImage;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getInterpolate--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setInterpolate-boolean-"/>
        /// </summary>
        public bool Interpolate
        {
            get { return IExecuteWithSignature<bool>("getInterpolate", "()Z"); } set { IExecuteWithSignature("setInterpolate", "(Z)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getRawImage--"/> 
        /// </summary>
        public Java.Awt.ImageNs.BufferedImage RawImage
        {
            get { return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("getRawImage", "()Ljava/awt/image/BufferedImage;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getRawRaster--"/> 
        /// </summary>
        public Java.Awt.ImageNs.WritableRaster RawRaster
        {
            get { return IExecuteWithSignature<Java.Awt.ImageNs.WritableRaster>("getRawRaster", "()Ljava/awt/image/WritableRaster;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getSuffix--"/> 
        /// </summary>
        public Java.Lang.String Suffix
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSuffix", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getWidth--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setWidth-int-"/>
        /// </summary>
        public int Width
        {
            get { return IExecuteWithSignature<int>("getWidth", "()I"); } set { IExecuteWithSignature("setWidth", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#isEmpty--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#isStencil--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStencil()
        {
            return IExecuteWithSignature<bool>("isStencil", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getImage-java.awt.Rectangle-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Rectangle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage GetImage(Java.Awt.Rectangle arg0, int arg1)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("getImage", "(Ljava/awt/Rectangle;I)Ljava/awt/image/BufferedImage;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#getStencilImage-java.awt.Paint-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Awt.Paint"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage GetStencilImage(Java.Awt.Paint arg0)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("getStencilImage", "(Ljava/awt/Paint;)Ljava/awt/image/BufferedImage;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#createInputStream--"/>
        /// </summary>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Io.InputStream CreateInputStream()
        {
            return IExecuteWithSignature<Java.Io.InputStream>("createInputStream", "()Ljava/io/InputStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#createInputStream-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Io.InputStream CreateInputStream(Java.Util.List<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<Java.Io.InputStream>("createInputStream", "(Ljava/util/List;)Ljava/io/InputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#createInputStream-org.apache.pdfbox.filter.DecodeOptions-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Filter.DecodeOptions"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Io.InputStream CreateInputStream(Org.Apache.Pdfbox.Filter.DecodeOptions arg0)
        {
            return IExecuteWithSignature<Java.Io.InputStream>("createInputStream", "(Lorg/apache/pdfbox/filter/DecodeOptions;)Ljava/io/InputStream;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/image/PDImage.html#setStencil-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetStencil(bool arg0)
        {
            IExecuteWithSignature("setStencil", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}