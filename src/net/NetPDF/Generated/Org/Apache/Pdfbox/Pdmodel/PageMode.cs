/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel
{
    #region PageMode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html"/>
    /// </summary>
    public partial class PageMode : Java.Lang.Enum<Org.Apache.Pdfbox.Pdmodel.PageMode>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.PageMode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PageMode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PageMode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PageMode implementation
    public partial class PageMode
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#FULL_SCREEN"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode FULL_SCREEN { get { if (!_FULL_SCREENReady) { _FULL_SCREENContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "FULL_SCREEN"); _FULL_SCREENReady = true; } return _FULL_SCREENContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _FULL_SCREENContent = default;
        private static bool _FULL_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#USE_ATTACHMENTS"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode USE_ATTACHMENTS { get { if (!_USE_ATTACHMENTSReady) { _USE_ATTACHMENTSContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "USE_ATTACHMENTS"); _USE_ATTACHMENTSReady = true; } return _USE_ATTACHMENTSContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _USE_ATTACHMENTSContent = default;
        private static bool _USE_ATTACHMENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#USE_NONE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode USE_NONE { get { if (!_USE_NONEReady) { _USE_NONEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "USE_NONE"); _USE_NONEReady = true; } return _USE_NONEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _USE_NONEContent = default;
        private static bool _USE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#USE_OPTIONAL_CONTENT"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode USE_OPTIONAL_CONTENT { get { if (!_USE_OPTIONAL_CONTENTReady) { _USE_OPTIONAL_CONTENTContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "USE_OPTIONAL_CONTENT"); _USE_OPTIONAL_CONTENTReady = true; } return _USE_OPTIONAL_CONTENTContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _USE_OPTIONAL_CONTENTContent = default;
        private static bool _USE_OPTIONAL_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#USE_OUTLINES"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode USE_OUTLINES { get { if (!_USE_OUTLINESReady) { _USE_OUTLINESContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "USE_OUTLINES"); _USE_OUTLINESReady = true; } return _USE_OUTLINESContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _USE_OUTLINESContent = default;
        private static bool _USE_OUTLINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#USE_THUMBS"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode USE_THUMBS { get { if (!_USE_THUMBSReady) { _USE_THUMBSContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "USE_THUMBS"); _USE_THUMBSReady = true; } return _USE_THUMBSContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.PageMode _USE_THUMBSContent = default;
        private static bool _USE_THUMBSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#fromString-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.PageMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode FromString(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "fromString", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/PageMode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#valueOf-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.PageMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/PageMode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#values--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.PageMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.PageMode[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Pdmodel.PageMode>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/pdmodel/PageMode;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/PageMode.html#stringValue--"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String StringValue()
        {
            return IExecuteWithSignature<Java.Lang.String>("stringValue", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}