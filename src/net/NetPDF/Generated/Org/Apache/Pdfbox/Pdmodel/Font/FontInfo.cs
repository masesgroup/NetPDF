/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.4.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Font
{
    #region FontInfo declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html"/>
    /// </summary>
    public partial class FontInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FontInfo>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.font.FontInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("FontInfo class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public FontInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("FontInfo class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public FontInfo(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region FontInfo implementation
    public partial class FontInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getCIDSystemInfo--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Font.CIDSystemInfo CIDSystemInfo
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.CIDSystemInfo>("getCIDSystemInfo", "()Lorg/apache/pdfbox/pdmodel/font/CIDSystemInfo;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getCodePageRange1--"/> 
        /// </summary>
        public int CodePageRange1
        {
            get { return IExecuteWithSignature<int>("getCodePageRange1", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getCodePageRange2--"/> 
        /// </summary>
        public int CodePageRange2
        {
            get { return IExecuteWithSignature<int>("getCodePageRange2", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getFamilyClass--"/> 
        /// </summary>
        public int FamilyClass
        {
            get { return IExecuteWithSignature<int>("getFamilyClass", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getFont--"/> 
        /// </summary>
        public Org.Apache.Fontbox.FontBoxFont Font
        {
            get { return IExecuteWithSignature<Org.Apache.Fontbox.FontBoxFont>("getFont", "()Lorg/apache/fontbox/FontBoxFont;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getFormat--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Font.FontFormat Format
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.FontFormat>("getFormat", "()Lorg/apache/pdfbox/pdmodel/font/FontFormat;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getMacStyle--"/> 
        /// </summary>
        public int MacStyle
        {
            get { return IExecuteWithSignature<int>("getMacStyle", "()I"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getPanose--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Font.PDPanoseClassification Panose
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDPanoseClassification>("getPanose", "()Lorg/apache/pdfbox/pdmodel/font/PDPanoseClassification;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getPostScriptName--"/> 
        /// </summary>
        public Java.Lang.String PostScriptName
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getPostScriptName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/font/FontInfo.html#getWeightClass--"/> 
        /// </summary>
        public int WeightClass
        {
            get { return IExecuteWithSignature<int>("getWeightClass", "()I"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}