/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation
{
    #region PDAnnotationRubberStamp declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html"/>
    /// </summary>
    public partial class PDAnnotationRubberStamp : Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAnnotationMarkup
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDAnnotationRubberStamp() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDAnnotationRubberStamp(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDAnnotationRubberStamp implementation
    public partial class PDAnnotationRubberStamp
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationRubberStamp(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDAnnotationRubberStamp(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_APPROVED"/>
        /// </summary>
        public static Java.Lang.String NAME_APPROVED { get { if (!_NAME_APPROVEDReady) { _NAME_APPROVEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_APPROVED"); _NAME_APPROVEDReady = true; } return _NAME_APPROVEDContent; } }
        private static Java.Lang.String _NAME_APPROVEDContent = default;
        private static bool _NAME_APPROVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_AS_IS"/>
        /// </summary>
        public static Java.Lang.String NAME_AS_IS { get { if (!_NAME_AS_ISReady) { _NAME_AS_ISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_AS_IS"); _NAME_AS_ISReady = true; } return _NAME_AS_ISContent; } }
        private static Java.Lang.String _NAME_AS_ISContent = default;
        private static bool _NAME_AS_ISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_CONFIDENTIAL"/>
        /// </summary>
        public static Java.Lang.String NAME_CONFIDENTIAL { get { if (!_NAME_CONFIDENTIALReady) { _NAME_CONFIDENTIALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_CONFIDENTIAL"); _NAME_CONFIDENTIALReady = true; } return _NAME_CONFIDENTIALContent; } }
        private static Java.Lang.String _NAME_CONFIDENTIALContent = default;
        private static bool _NAME_CONFIDENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_DEPARTMENTAL"/>
        /// </summary>
        public static Java.Lang.String NAME_DEPARTMENTAL { get { if (!_NAME_DEPARTMENTALReady) { _NAME_DEPARTMENTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_DEPARTMENTAL"); _NAME_DEPARTMENTALReady = true; } return _NAME_DEPARTMENTALContent; } }
        private static Java.Lang.String _NAME_DEPARTMENTALContent = default;
        private static bool _NAME_DEPARTMENTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_DRAFT"/>
        /// </summary>
        public static Java.Lang.String NAME_DRAFT { get { if (!_NAME_DRAFTReady) { _NAME_DRAFTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_DRAFT"); _NAME_DRAFTReady = true; } return _NAME_DRAFTContent; } }
        private static Java.Lang.String _NAME_DRAFTContent = default;
        private static bool _NAME_DRAFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_EXPERIMENTAL"/>
        /// </summary>
        public static Java.Lang.String NAME_EXPERIMENTAL { get { if (!_NAME_EXPERIMENTALReady) { _NAME_EXPERIMENTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_EXPERIMENTAL"); _NAME_EXPERIMENTALReady = true; } return _NAME_EXPERIMENTALContent; } }
        private static Java.Lang.String _NAME_EXPERIMENTALContent = default;
        private static bool _NAME_EXPERIMENTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_EXPIRED"/>
        /// </summary>
        public static Java.Lang.String NAME_EXPIRED { get { if (!_NAME_EXPIREDReady) { _NAME_EXPIREDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_EXPIRED"); _NAME_EXPIREDReady = true; } return _NAME_EXPIREDContent; } }
        private static Java.Lang.String _NAME_EXPIREDContent = default;
        private static bool _NAME_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_FINAL"/>
        /// </summary>
        public static Java.Lang.String NAME_FINAL { get { if (!_NAME_FINALReady) { _NAME_FINALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_FINAL"); _NAME_FINALReady = true; } return _NAME_FINALContent; } }
        private static Java.Lang.String _NAME_FINALContent = default;
        private static bool _NAME_FINALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_FOR_COMMENT"/>
        /// </summary>
        public static Java.Lang.String NAME_FOR_COMMENT { get { if (!_NAME_FOR_COMMENTReady) { _NAME_FOR_COMMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_FOR_COMMENT"); _NAME_FOR_COMMENTReady = true; } return _NAME_FOR_COMMENTContent; } }
        private static Java.Lang.String _NAME_FOR_COMMENTContent = default;
        private static bool _NAME_FOR_COMMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_FOR_PUBLIC_RELEASE"/>
        /// </summary>
        public static Java.Lang.String NAME_FOR_PUBLIC_RELEASE { get { if (!_NAME_FOR_PUBLIC_RELEASEReady) { _NAME_FOR_PUBLIC_RELEASEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_FOR_PUBLIC_RELEASE"); _NAME_FOR_PUBLIC_RELEASEReady = true; } return _NAME_FOR_PUBLIC_RELEASEContent; } }
        private static Java.Lang.String _NAME_FOR_PUBLIC_RELEASEContent = default;
        private static bool _NAME_FOR_PUBLIC_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_NOT_APPROVED"/>
        /// </summary>
        public static Java.Lang.String NAME_NOT_APPROVED { get { if (!_NAME_NOT_APPROVEDReady) { _NAME_NOT_APPROVEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_NOT_APPROVED"); _NAME_NOT_APPROVEDReady = true; } return _NAME_NOT_APPROVEDContent; } }
        private static Java.Lang.String _NAME_NOT_APPROVEDContent = default;
        private static bool _NAME_NOT_APPROVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_NOT_FOR_PUBLIC_RELEASE"/>
        /// </summary>
        public static Java.Lang.String NAME_NOT_FOR_PUBLIC_RELEASE { get { if (!_NAME_NOT_FOR_PUBLIC_RELEASEReady) { _NAME_NOT_FOR_PUBLIC_RELEASEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_NOT_FOR_PUBLIC_RELEASE"); _NAME_NOT_FOR_PUBLIC_RELEASEReady = true; } return _NAME_NOT_FOR_PUBLIC_RELEASEContent; } }
        private static Java.Lang.String _NAME_NOT_FOR_PUBLIC_RELEASEContent = default;
        private static bool _NAME_NOT_FOR_PUBLIC_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_SOLD"/>
        /// </summary>
        public static Java.Lang.String NAME_SOLD { get { if (!_NAME_SOLDReady) { _NAME_SOLDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_SOLD"); _NAME_SOLDReady = true; } return _NAME_SOLDContent; } }
        private static Java.Lang.String _NAME_SOLDContent = default;
        private static bool _NAME_SOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#NAME_TOP_SECRET"/>
        /// </summary>
        public static Java.Lang.String NAME_TOP_SECRET { get { if (!_NAME_TOP_SECRETReady) { _NAME_TOP_SECRETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME_TOP_SECRET"); _NAME_TOP_SECRETReady = true; } return _NAME_TOP_SECRETContent; } }
        private static Java.Lang.String _NAME_TOP_SECRETContent = default;
        private static bool _NAME_TOP_SECRETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#SUB_TYPE"/>
        /// </summary>
        public static Java.Lang.String SUB_TYPE { get { if (!_SUB_TYPEReady) { _SUB_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUB_TYPE"); _SUB_TYPEReady = true; } return _SUB_TYPEContent; } }
        private static Java.Lang.String _SUB_TYPEContent = default;
        private static bool _SUB_TYPEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#getName--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.4/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotationRubberStamp.html#setName-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setName", "(Ljava/lang/String;)V", value); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}