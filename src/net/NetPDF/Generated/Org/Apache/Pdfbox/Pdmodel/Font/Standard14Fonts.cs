/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Font
{
    #region Standard14Fonts declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html"/>
    /// </summary>
    public partial class Standard14Fonts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Standard14Fonts>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.font.Standard14Fonts";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Standard14Fonts() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Standard14Fonts(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region FontName declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html"/>
        /// </summary>
        public partial class FontName : Java.Lang.Enum<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdmodel.font.Standard14Fonts$FontName";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FontName() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FontName(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Standard14Fonts implementation
    public partial class Standard14Fonts
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html#getNames--"/> 
        /// </summary>
        public static Java.Util.Set<Java.Lang.String> Names
        {
            get { return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "getNames", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html#containsName-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool ContainsName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "containsName", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html#getGlyphPath-org.apache.pdfbox.pdmodel.font.Standard14Fonts.FontName-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Awt.Geom.GeneralPath"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Java.Awt.Geom.GeneralPath GetGlyphPath(Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Java.Awt.Geom.GeneralPath>(LocalBridgeClazz, "getGlyphPath", "(Lorg/apache/pdfbox/pdmodel/font/Standard14Fonts$FontName;Ljava/lang/String;)Ljava/awt/geom/GeneralPath;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html#getAFM-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Fontbox.Afm.FontMetrics"/></returns>
        public static Org.Apache.Fontbox.Afm.FontMetrics GetAFM(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Fontbox.Afm.FontMetrics>(LocalBridgeClazz, "getAFM", "(Ljava/lang/String;)Lorg/apache/fontbox/afm/FontMetrics;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.html#getMappedFontName-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName GetMappedFontName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "getMappedFontName", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/font/Standard14Fonts$FontName;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region FontName implementation
        public partial class FontName
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#COURIER"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName COURIER { get { if (!_COURIERReady) { _COURIERContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "COURIER"); _COURIERReady = true; } return _COURIERContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _COURIERContent = default;
            private static bool _COURIERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#COURIER_BOLD"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName COURIER_BOLD { get { if (!_COURIER_BOLDReady) { _COURIER_BOLDContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "COURIER_BOLD"); _COURIER_BOLDReady = true; } return _COURIER_BOLDContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _COURIER_BOLDContent = default;
            private static bool _COURIER_BOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#COURIER_BOLD_OBLIQUE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName COURIER_BOLD_OBLIQUE { get { if (!_COURIER_BOLD_OBLIQUEReady) { _COURIER_BOLD_OBLIQUEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "COURIER_BOLD_OBLIQUE"); _COURIER_BOLD_OBLIQUEReady = true; } return _COURIER_BOLD_OBLIQUEContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _COURIER_BOLD_OBLIQUEContent = default;
            private static bool _COURIER_BOLD_OBLIQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#COURIER_OBLIQUE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName COURIER_OBLIQUE { get { if (!_COURIER_OBLIQUEReady) { _COURIER_OBLIQUEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "COURIER_OBLIQUE"); _COURIER_OBLIQUEReady = true; } return _COURIER_OBLIQUEContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _COURIER_OBLIQUEContent = default;
            private static bool _COURIER_OBLIQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#HELVETICA"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName HELVETICA { get { if (!_HELVETICAReady) { _HELVETICAContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "HELVETICA"); _HELVETICAReady = true; } return _HELVETICAContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _HELVETICAContent = default;
            private static bool _HELVETICAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#HELVETICA_BOLD"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName HELVETICA_BOLD { get { if (!_HELVETICA_BOLDReady) { _HELVETICA_BOLDContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "HELVETICA_BOLD"); _HELVETICA_BOLDReady = true; } return _HELVETICA_BOLDContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _HELVETICA_BOLDContent = default;
            private static bool _HELVETICA_BOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#HELVETICA_BOLD_OBLIQUE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName HELVETICA_BOLD_OBLIQUE { get { if (!_HELVETICA_BOLD_OBLIQUEReady) { _HELVETICA_BOLD_OBLIQUEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "HELVETICA_BOLD_OBLIQUE"); _HELVETICA_BOLD_OBLIQUEReady = true; } return _HELVETICA_BOLD_OBLIQUEContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _HELVETICA_BOLD_OBLIQUEContent = default;
            private static bool _HELVETICA_BOLD_OBLIQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#HELVETICA_OBLIQUE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName HELVETICA_OBLIQUE { get { if (!_HELVETICA_OBLIQUEReady) { _HELVETICA_OBLIQUEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "HELVETICA_OBLIQUE"); _HELVETICA_OBLIQUEReady = true; } return _HELVETICA_OBLIQUEContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _HELVETICA_OBLIQUEContent = default;
            private static bool _HELVETICA_OBLIQUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#SYMBOL"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName SYMBOL { get { if (!_SYMBOLReady) { _SYMBOLContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "SYMBOL"); _SYMBOLReady = true; } return _SYMBOLContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _SYMBOLContent = default;
            private static bool _SYMBOLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#TIMES_BOLD"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName TIMES_BOLD { get { if (!_TIMES_BOLDReady) { _TIMES_BOLDContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "TIMES_BOLD"); _TIMES_BOLDReady = true; } return _TIMES_BOLDContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _TIMES_BOLDContent = default;
            private static bool _TIMES_BOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#TIMES_BOLD_ITALIC"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName TIMES_BOLD_ITALIC { get { if (!_TIMES_BOLD_ITALICReady) { _TIMES_BOLD_ITALICContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "TIMES_BOLD_ITALIC"); _TIMES_BOLD_ITALICReady = true; } return _TIMES_BOLD_ITALICContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _TIMES_BOLD_ITALICContent = default;
            private static bool _TIMES_BOLD_ITALICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#TIMES_ITALIC"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName TIMES_ITALIC { get { if (!_TIMES_ITALICReady) { _TIMES_ITALICContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "TIMES_ITALIC"); _TIMES_ITALICReady = true; } return _TIMES_ITALICContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _TIMES_ITALICContent = default;
            private static bool _TIMES_ITALICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#TIMES_ROMAN"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName TIMES_ROMAN { get { if (!_TIMES_ROMANReady) { _TIMES_ROMANContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "TIMES_ROMAN"); _TIMES_ROMANReady = true; } return _TIMES_ROMANContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _TIMES_ROMANContent = default;
            private static bool _TIMES_ROMANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#ZAPF_DINGBATS"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName ZAPF_DINGBATS { get { if (!_ZAPF_DINGBATSReady) { _ZAPF_DINGBATSContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "ZAPF_DINGBATS"); _ZAPF_DINGBATSReady = true; } return _ZAPF_DINGBATSContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName _ZAPF_DINGBATSContent = default;
            private static bool _ZAPF_DINGBATSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName"/></returns>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/font/Standard14Fonts$FontName;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#values--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName"/></returns>
            public static Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Pdmodel.Font.Standard14Fonts.FontName>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/pdmodel/font/Standard14Fonts$FontName;");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/Standard14Fonts.FontName.html#getName--"/> 
            /// </summary>
            public Java.Lang.String Name
            {
                get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}