/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Documentinterchange.Taggedpdf
{
    #region PDListAttributeObject declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html"/>
    /// </summary>
    public partial class PDListAttributeObject : Org.Apache.Pdfbox.Pdmodel.Documentinterchange.Taggedpdf.PDStandardAttributeObject
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDListAttributeObject() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDListAttributeObject(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDListAttributeObject implementation
    public partial class PDListAttributeObject
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#org.apache.pdfbox.pdmodel.documentinterchange.taggedpdf.PDListAttributeObject(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDListAttributeObject(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_CIRCLE"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_CIRCLE { get { if (!_LIST_NUMBERING_CIRCLEReady) { _LIST_NUMBERING_CIRCLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_CIRCLE"); _LIST_NUMBERING_CIRCLEReady = true; } return _LIST_NUMBERING_CIRCLEContent; } }
        private static Java.Lang.String _LIST_NUMBERING_CIRCLEContent = default;
        private static bool _LIST_NUMBERING_CIRCLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_DECIMAL"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_DECIMAL { get { if (!_LIST_NUMBERING_DECIMALReady) { _LIST_NUMBERING_DECIMALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_DECIMAL"); _LIST_NUMBERING_DECIMALReady = true; } return _LIST_NUMBERING_DECIMALContent; } }
        private static Java.Lang.String _LIST_NUMBERING_DECIMALContent = default;
        private static bool _LIST_NUMBERING_DECIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_DISC"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_DISC { get { if (!_LIST_NUMBERING_DISCReady) { _LIST_NUMBERING_DISCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_DISC"); _LIST_NUMBERING_DISCReady = true; } return _LIST_NUMBERING_DISCContent; } }
        private static Java.Lang.String _LIST_NUMBERING_DISCContent = default;
        private static bool _LIST_NUMBERING_DISCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_LOWER_ALPHA"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_LOWER_ALPHA { get { if (!_LIST_NUMBERING_LOWER_ALPHAReady) { _LIST_NUMBERING_LOWER_ALPHAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_LOWER_ALPHA"); _LIST_NUMBERING_LOWER_ALPHAReady = true; } return _LIST_NUMBERING_LOWER_ALPHAContent; } }
        private static Java.Lang.String _LIST_NUMBERING_LOWER_ALPHAContent = default;
        private static bool _LIST_NUMBERING_LOWER_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_LOWER_ROMAN"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_LOWER_ROMAN { get { if (!_LIST_NUMBERING_LOWER_ROMANReady) { _LIST_NUMBERING_LOWER_ROMANContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_LOWER_ROMAN"); _LIST_NUMBERING_LOWER_ROMANReady = true; } return _LIST_NUMBERING_LOWER_ROMANContent; } }
        private static Java.Lang.String _LIST_NUMBERING_LOWER_ROMANContent = default;
        private static bool _LIST_NUMBERING_LOWER_ROMANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_NONE"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_NONE { get { if (!_LIST_NUMBERING_NONEReady) { _LIST_NUMBERING_NONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_NONE"); _LIST_NUMBERING_NONEReady = true; } return _LIST_NUMBERING_NONEContent; } }
        private static Java.Lang.String _LIST_NUMBERING_NONEContent = default;
        private static bool _LIST_NUMBERING_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_SQUARE"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_SQUARE { get { if (!_LIST_NUMBERING_SQUAREReady) { _LIST_NUMBERING_SQUAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_SQUARE"); _LIST_NUMBERING_SQUAREReady = true; } return _LIST_NUMBERING_SQUAREContent; } }
        private static Java.Lang.String _LIST_NUMBERING_SQUAREContent = default;
        private static bool _LIST_NUMBERING_SQUAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_UPPER_ALPHA"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_UPPER_ALPHA { get { if (!_LIST_NUMBERING_UPPER_ALPHAReady) { _LIST_NUMBERING_UPPER_ALPHAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_UPPER_ALPHA"); _LIST_NUMBERING_UPPER_ALPHAReady = true; } return _LIST_NUMBERING_UPPER_ALPHAContent; } }
        private static Java.Lang.String _LIST_NUMBERING_UPPER_ALPHAContent = default;
        private static bool _LIST_NUMBERING_UPPER_ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#LIST_NUMBERING_UPPER_ROMAN"/>
        /// </summary>
        public static Java.Lang.String LIST_NUMBERING_UPPER_ROMAN { get { if (!_LIST_NUMBERING_UPPER_ROMANReady) { _LIST_NUMBERING_UPPER_ROMANContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_NUMBERING_UPPER_ROMAN"); _LIST_NUMBERING_UPPER_ROMANReady = true; } return _LIST_NUMBERING_UPPER_ROMANContent; } }
        private static Java.Lang.String _LIST_NUMBERING_UPPER_ROMANContent = default;
        private static bool _LIST_NUMBERING_UPPER_ROMANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#OWNER_LIST"/>
        /// </summary>
        public static Java.Lang.String OWNER_LIST { get { if (!_OWNER_LISTReady) { _OWNER_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OWNER_LIST"); _OWNER_LISTReady = true; } return _OWNER_LISTContent; } }
        private static Java.Lang.String _OWNER_LISTContent = default;
        private static bool _OWNER_LISTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#getListNumbering--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/documentinterchange/taggedpdf/PDListAttributeObject.html#setListNumbering-java.lang.String-"/>
        /// </summary>
        public Java.Lang.String ListNumbering
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getListNumbering", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setListNumbering", "(Ljava/lang/String;)V", value); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}