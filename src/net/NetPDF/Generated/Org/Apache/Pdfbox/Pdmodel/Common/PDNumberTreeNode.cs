/*
*  Copyright (c) 2022-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Common
{
    #region PDNumberTreeNode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html"/>
    /// </summary>
    public partial class PDNumberTreeNode : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.common.PDNumberTreeNode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDNumberTreeNode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDNumberTreeNode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDNumberTreeNode implementation
    public partial class PDNumberTreeNode
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#org.apache.pdfbox.pdmodel.common.PDNumberTreeNode(java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        public PDNumberTreeNode(Java.Lang.Class arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#org.apache.pdfbox.pdmodel.common.PDNumberTreeNode(org.apache.pdfbox.cos.COSDictionary,java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        public PDNumberTreeNode(Org.Apache.Pdfbox.Cos.COSDictionary arg0, Java.Lang.Class arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getKids--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#setKids-java.util.List-"/>
        /// </summary>
        public Java.Util.List<Org.Apache.Pdfbox.Pdmodel.Common.PDNumberTreeNode> Kids
        {
            get { return IExecuteWithSignature<Java.Util.List<Org.Apache.Pdfbox.Pdmodel.Common.PDNumberTreeNode>>("getKids", "()Ljava/util/List;"); } set { IExecuteWithSignature("setKids", "(Ljava/util/List;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getLowerLimit--"/> 
        /// </summary>
        public Java.Lang.Integer LowerLimit
        {
            get { return IExecuteWithSignature<Java.Lang.Integer>("getLowerLimit", "()Ljava/lang/Integer;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getNumbers--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#setNumbers-java.util.Map-"/>
        /// </summary>
        public Java.Util.Map<Java.Lang.Integer, Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable> Numbers
        {
            get { return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable>>("getNumbers", "()Ljava/util/Map;"); } set { IExecuteWithSignature("setNumbers", "(Ljava/util/Map;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getUpperLimit--"/> 
        /// </summary>
        public Java.Lang.Integer UpperLimit
        {
            get { return IExecuteWithSignature<Java.Lang.Integer>("getUpperLimit", "()Ljava/lang/Integer;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.html#getValue-java.lang.Integer-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Integer"/></param>
        /// <returns><see cref="object"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public object GetValue(Java.Lang.Integer arg0)
        {
            return IExecuteWithSignature("getValue", "(Ljava/lang/Integer;)Ljava/lang/Object;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}