/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel
{
    #region PDPageContentStream declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html"/>
    /// </summary>
    public partial class PDPageContentStream : Java.Io.Closeable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.PDPageContentStream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDPageContentStream() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDPageContentStream(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDPageContentStream(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AppendMode declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html"/>
        /// </summary>
        public partial class AppendMode : Java.Lang.Enum<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>
        {
            const string _bridgeClassName = "org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AppendMode() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AppendMode(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AppendMode(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region PDPageContentStream implementation
    public partial class PDPageContentStream
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html#org.apache.pdfbox.pdmodel.PDPageContentStream(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream,java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAppearanceStream"/></param>
        /// <param name="arg2"><see cref="Java.Io.OutputStream"/></param>
        public PDPageContentStream(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAppearanceStream arg1, Java.Io.OutputStream arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html#org.apache.pdfbox.pdmodel.PDPageContentStream(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAppearanceStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PDPageContentStream(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.PDAppearanceStream arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html#org.apache.pdfbox.pdmodel.PDPageContentStream(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.PDPage"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PDPageContentStream(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.PDPage arg1, Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode arg2, bool arg3, bool arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html#org.apache.pdfbox.pdmodel.PDPageContentStream(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage,org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.PDPage"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PDPageContentStream(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.PDPage arg1, Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.html#org.apache.pdfbox.pdmodel.PDPageContentStream(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.PDPage)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.PDPage"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PDPageContentStream(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Pdmodel.PDPage arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region AppendMode implementation
        public partial class AppendMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#APPEND"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode APPEND { get { if (!_APPENDReady) { _APPENDContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>(LocalBridgeClazz, "APPEND"); _APPENDReady = true; } return _APPENDContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode _APPENDContent = default;
            private static bool _APPENDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#OVERWRITE"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode OVERWRITE { get { if (!_OVERWRITEReady) { _OVERWRITEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>(LocalBridgeClazz, "OVERWRITE"); _OVERWRITEReady = true; } return _OVERWRITEContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode _OVERWRITEContent = default;
            private static bool _OVERWRITEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#PREPEND"/>
            /// </summary>
            public static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode PREPEND { get { if (!_PREPENDReady) { _PREPENDContent = SGetField<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>(LocalBridgeClazz, "PREPEND"); _PREPENDReady = true; } return _PREPENDContent; } }
            private static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode _PREPENDContent = default;
            private static bool _PREPENDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode"/></returns>
            public static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/PDPageContentStream$AppendMode;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#values--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode"/></returns>
            public static Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Pdmodel.PDPageContentStream.AppendMode>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/pdmodel/PDPageContentStream$AppendMode;");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#isOverwrite--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsOverwrite()
            {
                return IExecuteWithSignature<bool>("isOverwrite", "()Z");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/PDPageContentStream.AppendMode.html#isPrepend--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsPrepend()
            {
                return IExecuteWithSignature<bool>("isPrepend", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}