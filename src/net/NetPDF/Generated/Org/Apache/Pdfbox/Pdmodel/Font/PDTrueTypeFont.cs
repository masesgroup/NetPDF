/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using pdfbox-3.0.3.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Font
{
    #region PDTrueTypeFont declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html"/>
    /// </summary>
    public partial class PDTrueTypeFont : Org.Apache.Pdfbox.Pdmodel.Font.PDSimpleFont
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.font.PDTrueTypeFont";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDTrueTypeFont() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDTrueTypeFont(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDTrueTypeFont implementation
    public partial class PDTrueTypeFont
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#org.apache.pdfbox.pdmodel.font.PDTrueTypeFont(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public PDTrueTypeFont(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont"/> to <see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDVectorFont"/>
        /// </summary>
        public static implicit operator Org.Apache.Pdfbox.Pdmodel.Font.PDVectorFont(Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont t) => t.Cast<Org.Apache.Pdfbox.Pdmodel.Font.PDVectorFont>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#load-org.apache.pdfbox.pdmodel.PDDocument-java.io.File-org.apache.pdfbox.pdmodel.font.encoding.Encoding-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Java.Io.File"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont Load(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Java.Io.File arg1, Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding arg2)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont>(LocalBridgeClazz, "load", "(Lorg/apache/pdfbox/pdmodel/PDDocument;Ljava/io/File;Lorg/apache/pdfbox/pdmodel/font/encoding/Encoding;)Lorg/apache/pdfbox/pdmodel/font/PDTrueTypeFont;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#load-org.apache.pdfbox.pdmodel.PDDocument-java.io.InputStream-org.apache.pdfbox.pdmodel.font.encoding.Encoding-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont Load(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Java.Io.InputStream arg1, Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding arg2)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont>(LocalBridgeClazz, "load", "(Lorg/apache/pdfbox/pdmodel/PDDocument;Ljava/io/InputStream;Lorg/apache/pdfbox/pdmodel/font/encoding/Encoding;)Lorg/apache/pdfbox/pdmodel/font/PDTrueTypeFont;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#load-org.apache.pdfbox.pdmodel.PDDocument-org.apache.fontbox.ttf.TrueTypeFont-org.apache.pdfbox.pdmodel.font.encoding.Encoding-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Fontbox.Ttf.TrueTypeFont"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont Load(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Fontbox.Ttf.TrueTypeFont arg1, Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding arg2)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont>(LocalBridgeClazz, "load", "(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/fontbox/ttf/TrueTypeFont;Lorg/apache/pdfbox/pdmodel/font/encoding/Encoding;)Lorg/apache/pdfbox/pdmodel/font/PDTrueTypeFont;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#load-org.apache.pdfbox.pdmodel.PDDocument-org.apache.pdfbox.io.RandomAccessRead-org.apache.pdfbox.pdmodel.font.encoding.Encoding-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Io.RandomAccessRead"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont Load(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0, Org.Apache.Pdfbox.Io.RandomAccessRead arg1, Org.Apache.Pdfbox.Pdmodel.Font.Encoding.Encoding arg2)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Font.PDTrueTypeFont>(LocalBridgeClazz, "load", "(Lorg/apache/pdfbox/pdmodel/PDDocument;Lorg/apache/pdfbox/io/RandomAccessRead;Lorg/apache/pdfbox/pdmodel/font/encoding/Encoding;)Lorg/apache/pdfbox/pdmodel/font/PDTrueTypeFont;", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#getBaseFont--"/> 
        /// </summary>
        public Java.Lang.String BaseFont
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getBaseFont", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#getTrueTypeFont--"/> 
        /// </summary>
        public Org.Apache.Fontbox.Ttf.TrueTypeFont TrueTypeFont
        {
            get { return IExecuteWithSignature<Org.Apache.Fontbox.Ttf.TrueTypeFont>("getTrueTypeFont", "()Lorg/apache/fontbox/ttf/TrueTypeFont;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#hasGlyph-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public bool HasGlyph(int arg0)
        {
            return IExecuteWithSignature<bool>("hasGlyph", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#codeToGID-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int CodeToGID(int arg0)
        {
            return IExecuteWithSignature<int>("codeToGID", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#getNormalizedPath-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.Geom.GeneralPath"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.Geom.GeneralPath GetNormalizedPath(int arg0)
        {
            return IExecuteWithSignature<Java.Awt.Geom.GeneralPath>("getNormalizedPath", "(I)Ljava/awt/geom/GeneralPath;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.3/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.html#getPath-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.Geom.GeneralPath"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.Geom.GeneralPath GetPath(int arg0)
        {
            return IExecuteWithSignature<Java.Awt.Geom.GeneralPath>("getPath", "(I)Ljava/awt/geom/GeneralPath;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}