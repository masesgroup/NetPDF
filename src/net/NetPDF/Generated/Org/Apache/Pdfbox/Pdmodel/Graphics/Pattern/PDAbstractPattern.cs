/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern
{
    #region PDAbstractPattern declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html"/>
    /// </summary>
    public partial class PDAbstractPattern : Org.Apache.Pdfbox.Pdmodel.Common.COSObjectable
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PDAbstractPattern class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDAbstractPattern() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDAbstractPattern(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PDAbstractPattern class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PDAbstractPattern(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDAbstractPattern implementation
    public partial class PDAbstractPattern
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#org.apache.pdfbox.pdmodel.graphics.pattern.PDAbstractPattern(org.apache.pdfbox.cos.COSDictionary)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        public PDAbstractPattern(Org.Apache.Pdfbox.Cos.COSDictionary arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#TYPE_SHADING_PATTERN"/>
        /// </summary>
        public static int TYPE_SHADING_PATTERN { get { if (!_TYPE_SHADING_PATTERNReady) { _TYPE_SHADING_PATTERNContent = SGetField<int>(LocalBridgeClazz, "TYPE_SHADING_PATTERN"); _TYPE_SHADING_PATTERNReady = true; } return _TYPE_SHADING_PATTERNContent; } }
        private static int _TYPE_SHADING_PATTERNContent = default;
        private static bool _TYPE_SHADING_PATTERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#TYPE_TILING_PATTERN"/>
        /// </summary>
        public static int TYPE_TILING_PATTERN { get { if (!_TYPE_TILING_PATTERNReady) { _TYPE_TILING_PATTERNContent = SGetField<int>(LocalBridgeClazz, "TYPE_TILING_PATTERN"); _TYPE_TILING_PATTERNReady = true; } return _TYPE_TILING_PATTERNContent; } }
        private static int _TYPE_TILING_PATTERNContent = default;
        private static bool _TYPE_TILING_PATTERNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#create-org.apache.pdfbox.cos.COSDictionary-org.apache.pdfbox.pdmodel.ResourceCache-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Cos.COSDictionary"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Pdfbox.Pdmodel.ResourceCache"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDAbstractPattern"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDAbstractPattern Create(Org.Apache.Pdfbox.Cos.COSDictionary arg0, Org.Apache.Pdfbox.Pdmodel.ResourceCache arg1)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.Pattern.PDAbstractPattern>(LocalBridgeClazz, "create", "(Lorg/apache/pdfbox/cos/COSDictionary;Lorg/apache/pdfbox/pdmodel/ResourceCache;)Lorg/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern;", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#getCOSObject--"/> 
        /// </summary>
        public Org.Apache.Pdfbox.Cos.COSBase COSObject
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Cos.COSBase>("getCOSObject", "()Lorg/apache/pdfbox/cos/COSBase;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#getMatrix--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#setMatrix-java.awt.geom.AffineTransform-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Util.Matrix Matrix
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Util.Matrix>("getMatrix", "()Lorg/apache/pdfbox/util/Matrix;"); } set { IExecuteWithSignature("setMatrix", "(Ljava/awt/geom/AffineTransform;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#getPatternType--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#setPatternType-int-"/>
        /// </summary>
        public int PatternType
        {
            get { return IExecuteWithSignature<int>("getPatternType", "()I"); } set { IExecuteWithSignature("setPatternType", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#getType--"/> 
        /// </summary>
        public Java.Lang.String Type
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getType", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/pattern/PDAbstractPattern.html#setPaintType-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetPaintType(int arg0)
        {
            IExecuteWithSignature("setPaintType", "(I)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}