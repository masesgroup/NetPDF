/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.1.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Pdmodel.Graphics.State
{
    #region RenderingMode declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html"/>
    /// </summary>
    public partial class RenderingMode : Java.Lang.Enum<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>
    {
        const string _bridgeClassName = "org.apache.pdfbox.pdmodel.graphics.state.RenderingMode";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RenderingMode() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RenderingMode(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region RenderingMode implementation
    public partial class RenderingMode
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#FILL"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode FILL { get { if (!_FILLReady) { _FILLContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "FILL"); _FILLReady = true; } return _FILLContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _FILLContent = default;
        private static bool _FILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#FILL_CLIP"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode FILL_CLIP { get { if (!_FILL_CLIPReady) { _FILL_CLIPContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "FILL_CLIP"); _FILL_CLIPReady = true; } return _FILL_CLIPContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _FILL_CLIPContent = default;
        private static bool _FILL_CLIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#FILL_STROKE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode FILL_STROKE { get { if (!_FILL_STROKEReady) { _FILL_STROKEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "FILL_STROKE"); _FILL_STROKEReady = true; } return _FILL_STROKEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _FILL_STROKEContent = default;
        private static bool _FILL_STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#FILL_STROKE_CLIP"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode FILL_STROKE_CLIP { get { if (!_FILL_STROKE_CLIPReady) { _FILL_STROKE_CLIPContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "FILL_STROKE_CLIP"); _FILL_STROKE_CLIPReady = true; } return _FILL_STROKE_CLIPContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _FILL_STROKE_CLIPContent = default;
        private static bool _FILL_STROKE_CLIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#NEITHER"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode NEITHER { get { if (!_NEITHERReady) { _NEITHERContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "NEITHER"); _NEITHERReady = true; } return _NEITHERContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _NEITHERContent = default;
        private static bool _NEITHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#NEITHER_CLIP"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode NEITHER_CLIP { get { if (!_NEITHER_CLIPReady) { _NEITHER_CLIPContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "NEITHER_CLIP"); _NEITHER_CLIPReady = true; } return _NEITHER_CLIPContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _NEITHER_CLIPContent = default;
        private static bool _NEITHER_CLIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#STROKE"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode STROKE { get { if (!_STROKEReady) { _STROKEContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "STROKE"); _STROKEReady = true; } return _STROKEContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _STROKEContent = default;
        private static bool _STROKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#STROKE_CLIP"/>
        /// </summary>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode STROKE_CLIP { get { if (!_STROKE_CLIPReady) { _STROKE_CLIPContent = SGetField<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "STROKE_CLIP"); _STROKE_CLIPReady = true; } return _STROKE_CLIPContent; } }
        private static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode _STROKE_CLIPContent = default;
        private static bool _STROKE_CLIPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#fromInt-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode FromInt(int arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "fromInt", "(I)Lorg/apache/pdfbox/pdmodel/graphics/state/RenderingMode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#valueOf-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/pdfbox/pdmodel/graphics/state/RenderingMode;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#values--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode"/></returns>
        public static Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Pdfbox.Pdmodel.Graphics.State.RenderingMode>(LocalBridgeClazz, "values", "()[Lorg/apache/pdfbox/pdmodel/graphics/state/RenderingMode;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#isClip--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClip()
        {
            return IExecuteWithSignature<bool>("isClip", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#isFill--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFill()
        {
            return IExecuteWithSignature<bool>("isFill", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#isStroke--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStroke()
        {
            return IExecuteWithSignature<bool>("isStroke", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/pdmodel/graphics/state/RenderingMode.html#intValue--"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int IntValue()
        {
            return IExecuteWithSignature<int>("intValue", "()I");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}