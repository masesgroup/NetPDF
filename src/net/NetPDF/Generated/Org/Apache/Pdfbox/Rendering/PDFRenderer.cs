/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using pdfbox-3.0.5.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Pdfbox.Rendering
{
    #region PDFRenderer declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html"/>
    /// </summary>
    public partial class PDFRenderer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PDFRenderer>
    {
        const string _bridgeClassName = "org.apache.pdfbox.rendering.PDFRenderer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PDFRenderer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PDFRenderer(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PDFRenderer implementation
    public partial class PDFRenderer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#org.apache.pdfbox.rendering.PDFRenderer(org.apache.pdfbox.pdmodel.PDDocument)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.PDDocument"/></param>
        public PDFRenderer(Org.Apache.Pdfbox.Pdmodel.PDDocument arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#getAnnotationsFilter--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#setAnnotationsFilter-org.apache.pdfbox.pdmodel.interactive.annotation.AnnotationFilter-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.AnnotationFilter AnnotationsFilter
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Pdmodel.Interactive.Annotation.AnnotationFilter>("getAnnotationsFilter", "()Lorg/apache/pdfbox/pdmodel/interactive/annotation/AnnotationFilter;"); } set { IExecuteWithSignature("setAnnotationsFilter", "(Lorg/apache/pdfbox/pdmodel/interactive/annotation/AnnotationFilter;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#getDefaultDestination--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#setDefaultDestination-org.apache.pdfbox.rendering.RenderDestination-"/>
        /// </summary>
        public Org.Apache.Pdfbox.Rendering.RenderDestination DefaultDestination
        {
            get { return IExecuteWithSignature<Org.Apache.Pdfbox.Rendering.RenderDestination>("getDefaultDestination", "()Lorg/apache/pdfbox/rendering/RenderDestination;"); } set { IExecuteWithSignature("setDefaultDestination", "(Lorg/apache/pdfbox/rendering/RenderDestination;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#getImageDownscalingOptimizationThreshold--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#setImageDownscalingOptimizationThreshold-float-"/>
        /// </summary>
        public float ImageDownscalingOptimizationThreshold
        {
            get { return IExecuteWithSignature<float>("getImageDownscalingOptimizationThreshold", "()F"); } set { IExecuteWithSignature("setImageDownscalingOptimizationThreshold", "(F)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#getRenderingHints--"/> <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#setRenderingHints-java.awt.RenderingHints-"/>
        /// </summary>
        public Java.Awt.RenderingHints RenderingHints
        {
            get { return IExecuteWithSignature<Java.Awt.RenderingHints>("getRenderingHints", "()Ljava/awt/RenderingHints;"); } set { IExecuteWithSignature("setRenderingHints", "(Ljava/awt/RenderingHints;)V", value); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#isGroupEnabled-org.apache.pdfbox.pdmodel.graphics.optionalcontent.PDOptionalContentGroup-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Pdfbox.Pdmodel.Graphics.Optionalcontent.PDOptionalContentGroup"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupEnabled(Org.Apache.Pdfbox.Pdmodel.Graphics.Optionalcontent.PDOptionalContentGroup arg0)
        {
            return IExecuteWithSignature<bool>("isGroupEnabled", "(Lorg/apache/pdfbox/pdmodel/graphics/optionalcontent/PDOptionalContentGroup;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#isSubsamplingAllowed--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubsamplingAllowed()
        {
            return IExecuteWithSignature<bool>("isSubsamplingAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImage-int-float-org.apache.pdfbox.rendering.ImageType-org.apache.pdfbox.rendering.RenderDestination-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Rendering.ImageType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Pdfbox.Rendering.RenderDestination"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImage(int arg0, float arg1, Org.Apache.Pdfbox.Rendering.ImageType arg2, Org.Apache.Pdfbox.Rendering.RenderDestination arg3)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImage", "(IFLorg/apache/pdfbox/rendering/ImageType;Lorg/apache/pdfbox/rendering/RenderDestination;)Ljava/awt/image/BufferedImage;", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImage-int-float-org.apache.pdfbox.rendering.ImageType-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Rendering.ImageType"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImage(int arg0, float arg1, Org.Apache.Pdfbox.Rendering.ImageType arg2)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImage", "(IFLorg/apache/pdfbox/rendering/ImageType;)Ljava/awt/image/BufferedImage;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImage-int-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImage(int arg0, float arg1)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImage", "(IF)Ljava/awt/image/BufferedImage;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImage-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImage(int arg0)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImage", "(I)Ljava/awt/image/BufferedImage;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImageWithDPI-int-float-org.apache.pdfbox.rendering.ImageType-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Pdfbox.Rendering.ImageType"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImageWithDPI(int arg0, float arg1, Org.Apache.Pdfbox.Rendering.ImageType arg2)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImageWithDPI", "(IFLorg/apache/pdfbox/rendering/ImageType;)Ljava/awt/image/BufferedImage;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderImageWithDPI-int-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="Java.Awt.ImageNs.BufferedImage"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Awt.ImageNs.BufferedImage RenderImageWithDPI(int arg0, float arg1)
        {
            return IExecuteWithSignature<Java.Awt.ImageNs.BufferedImage>("renderImageWithDPI", "(IF)Ljava/awt/image/BufferedImage;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderPageToGraphics-int-java.awt.Graphics2D-float-float-org.apache.pdfbox.rendering.RenderDestination-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Graphics2D"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Pdfbox.Rendering.RenderDestination"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void RenderPageToGraphics(int arg0, Java.Awt.Graphics2D arg1, float arg2, float arg3, Org.Apache.Pdfbox.Rendering.RenderDestination arg4)
        {
            IExecuteWithSignature("renderPageToGraphics", "(ILjava/awt/Graphics2D;FFLorg/apache/pdfbox/rendering/RenderDestination;)V", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderPageToGraphics-int-java.awt.Graphics2D-float-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Graphics2D"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void RenderPageToGraphics(int arg0, Java.Awt.Graphics2D arg1, float arg2, float arg3)
        {
            IExecuteWithSignature("renderPageToGraphics", "(ILjava/awt/Graphics2D;FF)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderPageToGraphics-int-java.awt.Graphics2D-float-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Graphics2D"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void RenderPageToGraphics(int arg0, Java.Awt.Graphics2D arg1, float arg2)
        {
            IExecuteWithSignature("renderPageToGraphics", "(ILjava/awt/Graphics2D;F)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#renderPageToGraphics-int-java.awt.Graphics2D-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Awt.Graphics2D"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void RenderPageToGraphics(int arg0, Java.Awt.Graphics2D arg1)
        {
            IExecuteWithSignature("renderPageToGraphics", "(ILjava/awt/Graphics2D;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.pdfbox/pdfbox/3.0.5/org/apache/pdfbox/rendering/PDFRenderer.html#setSubsamplingAllowed-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSubsamplingAllowed(bool arg0)
        {
            IExecuteWithSignature("setSubsamplingAllowed", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}